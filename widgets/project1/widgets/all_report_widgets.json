{
  "widgetsBundle": {
    "alias": "a_report_widget2",
    "title": "All report widgets",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "single_value_report_3",
      "name": "Single value duration report",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9.5,
        "sizeY": 5.5,
        "resources": [],
        "templateHtml": "<div class=\"satl-widget-report\" style=\"overflow: auto;height: 100%;width:100%\">\n    <div class=\"report-header\" style=\"line-height: 30px;position: relative;\" *ngIf=\"isDataLoaded\">\n    <div class=\"report-header-content\">\n        <div class=\"row\" *ngIf=\"jsonInput\">\n    <div class=\"col-2\"><span *ngIf=\"settings?.deviceTitle!=undefined\">{{settings.deviceTitle}}</span><span *ngIf=\"settings?.deviceTitle==undefined\">Device</span></div>\n    <div class=\"col-10\"><span *ngIf=\"jsonInput.devices.length==1\">{{jsonInput?.devices[0].name}}</span><span *ngIf=\"jsonInput.devices.length>1\">{{settings?.multiReportText}}</span></div>\n</div>\n        <div class=\"row\" *ngIf=\"jsonInput\">\n    <div class=\"col-2\">Report type</div>\n    <div class=\"col-10\">{{jsonInput?.reportType}} <span *ngIf=\"settings?.typeSuffix!=undefined\">{{settings.typeSuffix}}</span></div>\n</div>\n        <div class=\"row\" *ngIf=\"jsonInput&&settings?.unitKey!=undefined\">\n    <div class=\"col-2\">{{settings.unitKey}}</div>\n    <div class=\"col-10\">{{settings.unitValue}}</div>\n</div><div class=\"row\" *ngIf=\"jsonInput && jsonInput.reportType!='Status'\">\n    <div class=\"col-2\">Start date</div>\n    <div class=\"col-10\"><span>{{showDateWithFormat(jsonInput?.startDate, \"start\")}}</span> \n        <span *ngIf=\"jsonInput.reportType=='Hourly'||jsonInput.reportType=='History'\"> {{showTimeInHFormat(jsonInput.startDate, jsonInput.startTime)}}</span>\n        <span *ngIf=\"jsonInput.reportType=='Daily'||jsonInput.reportType=='Monthly'||jsonInput.reportType=='Yearly'\"> {{settings.defaultStartTime}}</span></div>\n</div><div class=\"row\" *ngIf=\"jsonInput && jsonInput.reportType!='Status'\">\n    <div class=\"col-2\">End date</div>\n    <div class=\"col-10\"><span>{{showDateWithFormat(jsonInput?.endDate, \"end\")}}</span><span *ngIf=\"jsonInput.reportType=='Hourly'||jsonInput.reportType=='History'\"> {{showTimeInHFormat(jsonInput.endDate, jsonInput.endTime)}}</span><span *ngIf=\"jsonInput.reportType=='Daily'||jsonInput.reportType=='Monthly'||jsonInput.reportType=='Yearly'\"> {{settings.defaultEndTime}}</span></div>\n</div>\n<div class=\"row\" *ngIf=\"isDataLoaded\">\n    <div class=\"col-2\">\n        Export\n    </div>\n    <div class=\"col-10\">\n        <a (click)=\"exportAsCSV()\">CSV</a>\n    </div>\n</div>\n    </div>\n</div>\n<div *ngIf=\"isDataLoaded\" class=\"report-content\">\n    <mat-table [dataSource]=\"tableData\" id=\"reportTable\"\n        style=\"background-color:inherit;\">\n        <ng-container *ngFor=\"let column of tableMeta\"\n            [matColumnDef]=\"column.key\">\n            <mat-header-cell *matHeaderCellDef\n                [style.min-width]=\"column.key=='Date'?'150px':'auto'\"\n                [style.background-color]=\"settings?.tableHeaderBgColor\"\n                [style.color]=\"settings?.tableHeaderTxtColor\">\n                {{column.title}}\n            </mat-header-cell>\n            <mat-cell *matCellDef=\"let element\"\n                style=\"color:inherit;\">\n                <span *ngIf=\"key=='Date'\">{{element[column.key]}}</span>\n                <span *ngIf=\"key!='Date'\" [innerHTML]=\"element[column.key]\"></span>\n            </mat-cell>\n        </ng-container>\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"\n            [style.background-color]=\"settings?.tableHeaderBgColor\">\n        </mat-header-row>\n        <mat-row\n            *matRowDef=\"let row; columns: displayedColumns;\">\n        </mat-row>\n\n    </mat-table>\n</div>\n<div *ngIf=\"!isDataLoaded\">\n    <!--    <mat-progress-spinner-->\n    <!--    class=\"example-margin\"-->\n    <!--    color=\"warn\"-->\n    <!--    mode=\"determinate\"-->\n    <!--    [value]=\"progressPercent\" style=\"position: relative; top: 0; left: 0; margin: 0 auto; text-align: center;\">-->\n    <!--</mat-progress-spinner>-->\n    <!--<div style=\"position:relative; top: -60px; left: 0; margin:0 auto;text-align:center;\">{{progressPercent}}%</div>-->\n    <mat-spinner style=\"position: relative; top: 0; left: 0; margin: 0 auto; text-align: center;\"></mat-spinner>\n    </div>\n</div>\n",
        "templateCss": "@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');\n*{\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 400;\n}\nform{\n    width: 100%;\n}\n.exportBtns{\n    right: 0;\n    top: 0;\n    position: relative;\n}\n.exportBtns>* {\n    margin: 0px 10px;\n}\n.report-meta table tr td {\n    padding: 5px 30px 0 0;\n}\nmat-form-field{\n    width: 100%;\n}\ndiv.row{\n    margin-right: 0!important;\n    margin-left: 0!important;\n}\n\nmat-table#reportTable {\n    position: relative;\n}\n\nmat-header-cell.mat-header-cell {\n    position: sticky;\n    top: 0;\n    background: #e9e9e9;\n}\n\nmat-row.mat-row:hover {\n    background: inherit!important;\n}\n\n.satl-widget-report::-webkit-scrollbar {\n  width: 11px;\n}\n.satl-widget-report {\n  scrollbar-width: thin;\n  scrollbar-color: #90A4AE #CFD8DC;\n}\n.satl-widget-report::-webkit-scrollbar-track {\n  background: #CFD8DC;\n}\n.satl-widget-report::-webkit-scrollbar-thumb {\n  background-color: #90A4AE ;\n  border-radius: 6px;\n  border: 3px solid #CFD8DC;\n}\nbutton.mat-button-disabled{\n    opacity: 0.35;\n}\nbutton.mat-button-disabled:hover {\n    cursor: not-allowed;\n}\n.clrWhite{\n    color: white!important;\n}\n\n.time-input-field::-webkit-calendar-picker-indicator {\n   filter: invert(1) sepia(1) saturate(1) hue-rotate(175deg);\n}\n.row{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.no-gutters{margin-right:0;margin-left:0}.no-gutters>.col,.no-gutters>[class*=col-]{padding-right:0;padding-left:0}.col,.col-1,.col-10,.col-11,.col-12,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9,.col-auto,.col-lg,.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-auto,.col-md,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-auto,.col-sm,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-auto,.col-xl,.col-xl-1,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9,.col-xl-auto{position:relative;width:100%;padding-right:15px;padding-left:15px}.col{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.row-cols-1>*{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.row-cols-2>*{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.row-cols-3>*{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.row-cols-4>*{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.row-cols-5>*{-ms-flex:0 0 20%;flex:0 0 20%;max-width:20%}.row-cols-6>*{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-first{-ms-flex-order:-1;order:-1}.order-last{-ms-flex-order:13;order:13}.order-0{-ms-flex-order:0;order:0}.order-1{-ms-flex-order:1;order:1}.order-2{-ms-flex-order:2;order:2}.order-3{-ms-flex-order:3;order:3}.order-4{-ms-flex-order:4;order:4}.order-5{-ms-flex-order:5;order:5}.order-6{-ms-flex-order:6;order:6}.order-7{-ms-flex-order:7;order:7}.order-8{-ms-flex-order:8;order:8}.order-9{-ms-flex-order:9;order:9}.order-10{-ms-flex-order:10;order:10}.order-11{-ms-flex-order:11;order:11}.order-12{-ms-flex-order:12;order:12}.offset-1{margin-left:8.333333%}.offset-2{margin-left:16.666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.333333%}.offset-5{margin-left:41.666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.333333%}.offset-8{margin-left:66.666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.333333%}.offset-11{margin-left:91.666667%}@media (min-width:576px){.col-sm{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.row-cols-sm-1>*{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.row-cols-sm-2>*{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.row-cols-sm-3>*{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.row-cols-sm-4>*{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.row-cols-sm-5>*{-ms-flex:0 0 20%;flex:0 0 20%;max-width:20%}.row-cols-sm-6>*{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-sm-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-sm-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-sm-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-sm-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-sm-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-sm-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-sm-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-sm-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-sm-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-sm-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-sm-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-sm-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-sm-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-sm-first{-ms-flex-order:-1;order:-1}.order-sm-last{-ms-flex-order:13;order:13}.order-sm-0{-ms-flex-order:0;order:0}.order-sm-1{-ms-flex-order:1;order:1}.order-sm-2{-ms-flex-order:2;order:2}.order-sm-3{-ms-flex-order:3;order:3}.order-sm-4{-ms-flex-order:4;order:4}.order-sm-5{-ms-flex-order:5;order:5}.order-sm-6{-ms-flex-order:6;order:6}.order-sm-7{-ms-flex-order:7;order:7}.order-sm-8{-ms-flex-order:8;order:8}.order-sm-9{-ms-flex-order:9;order:9}.order-sm-10{-ms-flex-order:10;order:10}.order-sm-11{-ms-flex-order:11;order:11}.order-sm-12{-ms-flex-order:12;order:12}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.333333%}.offset-sm-2{margin-left:16.666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.333333%}.offset-sm-5{margin-left:41.666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.333333%}.offset-sm-8{margin-left:66.666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.333333%}.offset-sm-11{margin-left:91.666667%}}@media (min-width:768px){.col-md{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.row-cols-md-1>*{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.row-cols-md-2>*{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.row-cols-md-3>*{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.row-cols-md-4>*{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.row-cols-md-5>*{-ms-flex:0 0 20%;flex:0 0 20%;max-width:20%}.row-cols-md-6>*{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-md-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-md-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-md-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-md-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-md-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-md-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-md-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-md-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-md-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-md-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-md-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-md-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-md-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-md-first{-ms-flex-order:-1;order:-1}.order-md-last{-ms-flex-order:13;order:13}.order-md-0{-ms-flex-order:0;order:0}.order-md-1{-ms-flex-order:1;order:1}.order-md-2{-ms-flex-order:2;order:2}.order-md-3{-ms-flex-order:3;order:3}.order-md-4{-ms-flex-order:4;order:4}.order-md-5{-ms-flex-order:5;order:5}.order-md-6{-ms-flex-order:6;order:6}.order-md-7{-ms-flex-order:7;order:7}.order-md-8{-ms-flex-order:8;order:8}.order-md-9{-ms-flex-order:9;order:9}.order-md-10{-ms-flex-order:10;order:10}.order-md-11{-ms-flex-order:11;order:11}.order-md-12{-ms-flex-order:12;order:12}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.333333%}.offset-md-2{margin-left:16.666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.333333%}.offset-md-5{margin-left:41.666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.333333%}.offset-md-8{margin-left:66.666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.333333%}.offset-md-11{margin-left:91.666667%}}@media (min-width:992px){.col-lg{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.row-cols-lg-1>*{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.row-cols-lg-2>*{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.row-cols-lg-3>*{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.row-cols-lg-4>*{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.row-cols-lg-5>*{-ms-flex:0 0 20%;flex:0 0 20%;max-width:20%}.row-cols-lg-6>*{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-lg-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-lg-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-lg-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-lg-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-lg-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-lg-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-lg-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-lg-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-lg-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-lg-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-lg-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-lg-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-lg-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-lg-first{-ms-flex-order:-1;order:-1}.order-lg-last{-ms-flex-order:13;order:13}.order-lg-0{-ms-flex-order:0;order:0}.order-lg-1{-ms-flex-order:1;order:1}.order-lg-2{-ms-flex-order:2;order:2}.order-lg-3{-ms-flex-order:3;order:3}.order-lg-4{-ms-flex-order:4;order:4}.order-lg-5{-ms-flex-order:5;order:5}.order-lg-6{-ms-flex-order:6;order:6}.order-lg-7{-ms-flex-order:7;order:7}.order-lg-8{-ms-flex-order:8;order:8}.order-lg-9{-ms-flex-order:9;order:9}.order-lg-10{-ms-flex-order:10;order:10}.order-lg-11{-ms-flex-order:11;order:11}.order-lg-12{-ms-flex-order:12;order:12}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.333333%}.offset-lg-2{margin-left:16.666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.333333%}.offset-lg-5{margin-left:41.666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.333333%}.offset-lg-8{margin-left:66.666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.333333%}.offset-lg-11{margin-left:91.666667%}}@media (min-width:1200px){.col-xl{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.row-cols-xl-1>*{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.row-cols-xl-2>*{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.row-cols-xl-3>*{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.row-cols-xl-4>*{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.row-cols-xl-5>*{-ms-flex:0 0 20%;flex:0 0 20%;max-width:20%}.row-cols-xl-6>*{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-xl-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-xl-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-xl-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-xl-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-xl-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-xl-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-xl-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-xl-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-xl-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-xl-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-xl-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-xl-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-xl-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}\n.col, .col-1, .col-10, .col-11, .col-12, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-auto, .col-lg, .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-auto, .col-md, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-auto, .col-sm, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-auto, .col-xl, .col-xl-1, .col-xl-10, .col-xl-11, .col-xl-12, .col-xl-2, .col-xl-3, .col-xl-4, .col-xl-5, .col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9, .col-xl-auto {\n    position: relative;\n    width: 100%;\n    padding-right: 5px;\n    padding-left: 5px;\n}",
        "controllerScript": "self.onInit = function() {\n    /**\n     * Declare all variable\n     * */\n    let baseUrl='/';\n    let http=self.ctx.http;\n    let $scope=self.ctx.$scope;\n    $scope.isDataLoaded=false;\n    $scope.settings=self.ctx.settings;\n    $scope.widgetConfig=self.ctx.widgetConfig;\n    let latestData=self.ctx.defaultSubscription.data;\n    let inputData=localStorage.getItem('report_data_format');\n    let token = localStorage.getItem('jwt_token');\n    const falseStateValue=$scope.settings.fStateVal.toString();\n    let jsonInput={};\n    const tableData=[];\n    \n    /**\n     * Initialize the main operation from here.\n     * */\n    try {\n        jsonInput=JSON.parse(inputData); //Parse the string to json data.\n        $scope.jsonInput=jsonInput;\n        let timeData=getTimeData(jsonInput); //Generate startUnix, endUnix and interval here.\n        let requestParams={key: self.ctx.datasources[0].dataKeys[0].name}\n        let tableInfo=generateTableHeaderData(jsonInput); //Generating the table columns\n        $scope.tableMeta=tableInfo.tableMeta;\n        $scope.displayedColumns=tableInfo.displayedColumns;\n        multideviceParams=[];\n        jsonInput.devices.forEach(device=>{\n            multideviceParams.push({'device':device, 'param':requestParams});\n        });\n        /**\n         * Revoke the handleMultiDeviceHttpRequests to get all data related to the devices and timeframe.\n         * */\n        \n        handleMultiDeviceHttpRequests(multideviceParams, multideviceParams.length-1, timeData);\n    } catch (e) {\n    }\n  \n  /**\n   * Generating the table column array and displayed text\n   * As it is a mat-table, displayedcolumn should be unique according\n   * to data key\n   **/\n    function generateTableHeaderData(iData){\n        displayedColumns=['Date'];\n        tableMeta=[{'key':'Date', 'title':$scope.settings.firstColumnName}];\n        jsonInput.devices.forEach(dvc=>{\n            displayedColumns.push(dvc.id);\n            tableMeta.push({key: dvc.id, title: dvc.name});\n        });\n        return {'displayedColumns':displayedColumns, 'tableMeta':tableMeta};\n    }\n  \n  /**\n   * Create the unix timestamp from\n   * 1. Start date / start date and time\n   * 2. End date / end date and time\n   * Interval will be created according to the selected report type.\n   **/\n  function getTimeData(iData){\n      unixList=[];\n      if(iData.reportType.toLowerCase()=='monthly'||iData.reportType.toLowerCase()=='yearly'){\n          if(iData.reportType.toLowerCase()=='monthly'){\n            startDate=iData.startDate+'-01';\n            a=new Date(iData.endDate+'-01');\n            endDate=iData.endDate+'-'+new Date(a.getFullYear(), a.getMonth()+1, 0).getDate();\n          }else{\n              startDate=iData.startDate+'-01-01';\n              endDate=iData.endDate+'-12-31'\n          }\n          stUnix=new Date(startDate+' '+$scope.settings.defaultStartTime);\n          edUnix=new Date(endDate+' '+$scope.settings.defaultEndTime);\n          let strtTs=new Date(moment().format('YYYY-MM-DD ')+$scope.settings.defaultStartTime).getTime();\n          let edTs=new Date(moment().format('YYYY-MM-DD ')+$scope.settings.defaultEndTime).getTime();\n          if(edTs<=strtTs){\n              edUnix.setDate(edUnix.getDate() + 1);\n          }\n          return {\n              startUnix: stUnix.getTime(),\n              endUnix: edUnix.getTime(),\n              interval: iData.reportType.toLowerCase()=='monthly'?(30*24*60*60*1000): (365*24*60*60*1000)\n          };\n      }else if(iData.reportType.toLowerCase()=='interval'){\n          return {\n              startUnix: new Date(moment(iData.startDate).format('yyyy-MM-DD')+' '+iData.startTime).getTime(),\n              endUnix: new Date(moment(iData.endDate).format('yyyy-MM-DD')+' '+iData.endTime).getTime(),\n              interval: new Date(moment(iData.endDate).format('yyyy-MM-DD')+' '+iData.endTime).getTime() - new Date(moment(iData.startDate).format('yyyy-MM-DD')+' '+iData.startTime).getTime()\n          };\n      }else{\n            endDate=moment(new Date(iData.endDate)).format('YYYY-MM-DD');\n            startDate=moment(new Date(iData.startDate)).format('YYYY-MM-DD');\n            startUnix=iData.reportType.toLowerCase()=='hourly'||iData.reportType.toLowerCase()=='history'?new Date(startDate+' '+iData.startTime).getTime():new Date(startDate+' '+$scope.settings.defaultStartTime).getTime();\n            edUnix=new Date(endDate+' '+$scope.settings.defaultEndTime);\n            let strtTs=new Date(moment().format('YYYY-MM-DD ')+$scope.settings.defaultStartTime).getTime();\n            let edTs=new Date(moment().format('YYYY-MM-DD ')+$scope.settings.defaultEndTime).getTime();\n            if(edTs<=strtTs){\n                edUnix.setDate(edUnix.getDate() + 1);\n            }\n            endUnix=iData.reportType.toLowerCase()=='hourly'||iData.reportType.toLowerCase()=='history'?new Date(endDate+' '+iData.endTime).getTime():edUnix.getTime();\n            interval=iData.reportType.toLowerCase()=='history'?endUnix-startUnix:iData.reportType.toLowerCase()=='hourly'?60*60*1000:24*60*60*1000;\n            return {'startUnix':startUnix, 'endUnix':endUnix, 'interval':interval};\n      }\n  }\n  \n  \n  \n   /**\n    * This will handle multi-devices https request with all aggregation\n    * level. this will be a recursive function\n    **/\n   function handleMultiDeviceHttpRequests(requests,length, timeData){\n       if(length>=0){\n          let req=http.get(baseUrl+'api/plugins/telemetry/'+latestData[0].datasource.entity.id.entityType+'/'+requests[length].device.id+'/values/timeseries?keys='+requests[length].param.key+'&endTs='+timeData.endUnix+'&startTs='+timeData.startUnix+'&limit=25000',\n                        {headers:{\"Content-Type\":\"application/json\",\"X-Authorization\":\"Bearer \"+token}}\n                        )\n            req.subscribe(response=>{\n                dataStack={\n                    device: requests[length].device,\n                    param: requests[length].param,\n                    response:response,\n                    timeData: timeData\n                };\n                let tf=getTimeData(jsonInput);\n                if(Object.keys(response).length){\n                    let responseArray=response[requests[length].param.key];\n                    let t=AnalysisMultiDeviceData(dataStack, responseArray[0].ts, responseArray[responseArray.length-1].ts, false);\n                    if(response[requests[length].param.key].length==25000){\n                        timeData.endUnix=responseArray[responseArray.length-1].ts;\n                        return handleMultiDeviceHttpRequests(requests, length, timeData);\n                    }else{\n                        return handleMultiDeviceHttpRequests(requests, length-1, tf);\n                    }\n                }else{\n                    return handleMultiDeviceHttpRequests(requests, length-1, tf);\n                }\n            });\n       }else{\n           let timeData=getTimeData(jsonInput);\n           let allRows=formattingDate();\n           let x=[];\n           total={};\n           tableData.forEach(data=>{\n               obj={};\n               obj['ts']=data.ts;\n               obj['Date']=data.date;\n               Object.keys(data.data).forEach(d=>{\n                   obj[d]=millisecondToDayTime($scope.settings.title1+': ', data.data[d]['online'])+millisecondToDayTime($scope.settings.title2+': ', data.data[d]['offline']);\n                   if(total[d]==undefined){\n                       total[d]={\n                           online: data.data[d]['online'],\n                           offline: data.data[d]['offline']\n                       };\n                   }else{\n                       total[d]['online']+=data.data[d]['online'];\n                       total[d]['offline']+=data.data[d]['offline'];\n                   }\n               });\n               x.push(obj);\n           });\n           totalObj={\n               'Date':'Total'\n           };\n           averageObj={\n               'Date': 'Average'\n           }\n           Object.keys(total).forEach(key=>{\n               totalObj[key]=millisecondToDayTime($scope.settings.title1+': ', total[key].online)+millisecondToDayTime($scope.settings.title2+': ', total[key].offline);\n               averageObj[key]=millisecondToDayTime($scope.settings.title1+': ', (total[key].online/allRows.length))+millisecondToDayTime($scope.settings.title2+': ', ( total[key].offline/allRows.length));\n           });\n          allRows.forEach(row=>{\n              f=x.find(tbdt=>tbdt.ts==row.ts);\n              if(f==undefined){\n                  ob={'ts': row.ts, 'Date': row.title};\n                  Object.keys(total).forEach(key=>{\n                      ob[key]=$scope.settings.emptyDataField;\n                  });\n                  x.push(ob)\n              }else{\n                  Object.keys(f).forEach(key=>{\n                      if('ts'!=key||'Date'!=key){\n                          if(f[key]==''){\n                              f[key]=$scope.settings.emptyDataField;\n                          }\n                      }\n                  })\n              }\n          });\n          x=_.sortBy(x, 'ts')\n          if ($scope.settings.countSUM){\n              x.push(totalObj);\n          }\n          if($scope.settings.countAVG){\n              x.push(averageObj);\n          }\n           handleDomElements(x);\n       }\n   }\n   \n   function AnalysisMultiDeviceData(dataStack, endUnix, startUnix, isCompleted){\n      let res=dataStack.response[self.ctx.datasources[0].dataKeys[0].name];\n      const allIntervals=formattingDate();\n      let sortedRes=_.sortBy(res, 'ts');\n      let lastData={};\n      allIntervals.forEach((interval, intervalIndex)=>{\n          let chunkData={\n              ts: interval.ts,\n              date: dToH(interval.ts),\n              data:{}\n          };\n          let stDt={};\n          stDt[dataStack.device.id]={online:0, offline:0};\n          let timeData=getTimeData(jsonInput);\n          chunkEndingTs=interval.ts+timeData.interval;\n          filteredTsData=sortedRes.filter(res=>(res.ts>=interval.ts&&res.ts<chunkEndingTs));\n          filteredTsData.forEach((ftData, fIndex)=>{\n              if(fIndex==0){\n                  stDt[dataStack.device.id].online+=ftData.value.toString()==falseStateValue?0:Math.abs(filteredTsData[fIndex+1].ts-ftData.ts);\n                  stDt[dataStack.device.id].offline+=ftData.value.toString()==falseStateValue?Math.abs(filteredTsData[fIndex+1].ts-ftData.ts):0;\n                  if(Object.keys(lastData).length){\n                     stDt[dataStack.device.id].online+=lastData.value.toString()==falseStateValue?0:Math.abs(interval.ts-ftData.ts);\n                    stDt[dataStack.device.id].offline+=lastData.value.toString()==falseStateValue?Math.abs(interval.ts-ftData.ts):0; \n                  }\n              }else if(fIndex==(filteredTsData.length-1)){\n                  stDt[dataStack.device.id].online+=ftData.value.toString()==falseStateValue?0:Math.abs(chunkEndingTs-ftData.ts);\n                  stDt[dataStack.device.id].offline+=ftData.value.toString()==falseStateValue?Math.abs(chunkEndingTs-ftData.ts):0;\n                  lastData=filteredTsData[filteredTsData.length-1];\n              }else{\n                  stDt[dataStack.device.id].online+=ftData.value.toString()==falseStateValue?0:Math.abs(filteredTsData[fIndex+1].ts-ftData.ts);\n                  stDt[dataStack.device.id].offline+=ftData.value.toString()==falseStateValue?Math.abs(filteredTsData[fIndex+1].ts-ftData.ts):0;\n              }\n          });\n          currentSegment=tableData.find(td=>td.ts==interval.ts);\n          if(currentSegment==undefined){\n              chunkData['data']=stDt;\n              tableData.push(chunkData);\n          }else{\n              if(Object.keys(currentSegment.data).includes(dataStack.device.id)){\n                  currentSegment.data[dataStack.device.id].online+=stDt[dataStack.device.id].online;\n                  currentSegment.data[dataStack.device.id].offline+=stDt[dataStack.device.id].offline;\n              }else{\n                  currentSegment.data[dataStack.device.id]=stDt[dataStack.device.id];\n              }\n          }\n          \n      });\n      if(isCompleted){\n          sortedObjs = _.sortBy( tableData, 'ts' );\n          handleDomElements(sortedObjs);\n      }else{\n          return true;\n      }\n   }\n   function dToH(strt){\n       let rtp=jsonInput.reportType.toLowerCase();\n       let f=rtp=='hourly'?'DD MMM, YYYY hh A':rtp=='daily'?'DD MMM, YYYY':rtp=='monthly'?'MMM, YYYY':'YYYY';\n       return moment(new Date(strt)).format(f);\n   }\n   function roundingDate(pos, unix){\n       let rtp=jsonInput.reportType.toLowerCase();\n       dtObj=new Date(unix);\n       if(pos=='start'){\n           return rtp=='hourly'?new Date(moment(dtObj).format('YYYY-MM-DD hh:00:00 A')).getTime():rtp=='daily'?new Date(moment(dtObj).format('YYYY-MM-DD ')+$scope.settings.defaultStartTime).getTime():rtp=='monthly'?new Date(moment(dtObj).format('YYYY-MM')+'-01 '+$scope.settings.defaultStartTime).getTime():new Date(moment(dtObj).format('YYYY'),1,1,0,0,0).getTime();\n       }else{\n           let lastd=new Date(dtObj.getFullYear(), dtObj.getMonth()+1, 0).getDate();\n           let edt=new Date();\n           switch (rtp) {\n               case 'hourly':\n                   return new Date(moment(dtObj).format('YYYY-MM-DD hh:59:59 A')).getTime();\n                   break;\n               case 'daily':\n                   edt=new Date(moment(dtObj).format('YYYY-MM-DD ')+$scope.settings.defaultEndTime);\n                   break;\n                case 'monthly':\n                    edt=new Date(moment(dtObj).format('YYYY-MM-')+lastd+' '+$scope.settings.defaultEndTime);\n                    break;\n               default:\n                   edt=new Date(moment(dtObj).format('YYYY')+'-12-31 '+$scope.settings.defaultEndTime);\n           }\n           let strtn=new Date(moment().format('YYYY-MM-DD ')+$scope.settings.defaultStartTime).getTime();\n           let endt=new Date(moment().format('YYYY-MM-DD ')+$scope.settings.defaultEndTime).getTime();\n           if(strtn>=endt){\n               edt.setDate(edt.getDate() + 1);\n           }\n           return edt.getTime();\n       }\n   }\n   /**\n    * Create human readable time from millisecond.\n    * Example: 2356400 millisecond will be converted to 39 minutes 16 seconds\n    * */\n   function millisecondToDayTime(sts, ms){\n       prefix=sts==$scope.settings.title2+': '?'<br>'+sts:sts;\n       let years=Math.floor(ms/(365*24*60*60*1000));\n       let restms=ms%(365*24*60*60*1000);\n       let months=Math.floor(restms/(30*24*60*60*1000));\n       restms=restms%(30*24*60*60*1000);\n       let days=Math.floor(restms/(24*60*60*1000));\n       restms=restms%(24*60*60*1000)\n       let hours=Math.floor(restms/(3600*1000));\n       restms=restms%(3600*1000);\n       let minutes=Math.round(restms/(60*1000));\n       second=restms%(60*1000);\n       seconds=Math.round(second/1000);\n       buildString=years!=0?years+(years>1?'years ':'year '):'';\n       buildString+=months!=0?months+(months>1?'months ':'month '):'';\n       buildString+=days!=0?days+(days>1?'days ':'day '):'';\n       buildString+=hours!=0?hours+(hours>1?'hours ':'hour '):'';\n       buildString+=minutes!=0?minutes+(minutes>1?'minutes ':'minute '):'';\n       return buildString==''?'': prefix+buildString;\n   }\n   \n   \n   /**\n    * This function will generate a list of {ts:int, title: string, key:string} object.\n    * ts: timestamp.\n    * title: human readable time format.\n    * key: human readable time replacing white space with underscore(_)\n    *       Example: 12_12_2020\n    * */\n    function formattingDate(){\n        iData=jsonInput;\n        dates=[];\n        if(iData.reportType.toLowerCase()=='daily'){\n            startTime=new Date(iData.startDate);\n            endTime=new Date(iData.endDate);\n            for(let i=startTime;i<endTime;){\n                dates.push({'key': moment(new Date(i)).format('DD_MM_YYYY'), 'title': moment(new Date(i)).format($scope.settings.dateFormat), 'ts': new Date(moment(new Date(i)).format('yyyy-MM-DD')+' '+$scope.settings.defaultStartTime).getTime()});\n                i.setDate(i.getDate()+1);\n            }\n        }else if (iData.reportType.toLowerCase()=='hourly'){\n            startTime=new Date(moment(iData.startDate).format('yyyy-MM-DD')+' '+iData.startTime);\n            endTime=new Date(moment(iData.endDate).format('yyyy-MM-DD')+' '+iData.endTime);\n            for(let i=startTime;i<=endTime;){\n                dates.push({'key': moment(i).format('DD_MM_YYYY_hh_mm_A'), 'title': moment(i).format($scope.settings.dateFormat+' hh A'), 'ts': new Date(moment(i).format('yyyy-MM-DD hh:00:A')).getTime()});\n                i.setHours(i.getHours()+1)\n            }\n        }else if(iData.reportType.toLowerCase()=='monthly'){\n            startTime=new Date(iData.startDate+'-01 ');\n            a=new Date(iData.endDate+'-01');\n            endTime=new Date(iData.endDate+'-'+new Date(a.getFullYear(), a.getMonth()+1, 0).getDate());\n            for(i=startTime;i<=endTime;){\n                dates.push({'key': moment(i).format('MM_YYYY'), 'title': moment(i).format($scope.settings.dateFormatForMonthly), 'ts': new Date(moment(i).format('yyyy-MM-01 ')+$scope.settings.defaultStartTime).getTime()});\n                i.setMonth(i.getMonth() + 1);\n            }\n        }else if(iData.reportType.toLowerCase()=='yearly'){\n            startTime=new Date(iData.startDate+'-01-01 00:00:00');\n            endTime=new Date(iData.endDate+'-12-31 23:59:59');\n            for(let i=startTime;i<endTime;){\n                dates.push({'key': moment(i).format('YYYY'), 'title': moment(i).format('YYYY'), 'ts': new Date(moment(i).format('YYYY'),1,1,0,0,0).getTime()});\n                i.setFullYear(i.getFullYear()+1);\n            }\n        }\n        return dates;\n    }\n    \n    /**\n     * Controlling the html DOM elements using this function\n     * disable progress, show table, changed table data will be updated\n     * from here\n     **/\n    function handleDomElements(tableData){\n        $scope.tableData=tableData;\n        $scope.isDataLoaded=true;\n        self.ctx.detectChanges();\n    }\n  \n  /**\n   * Exporting the searched data in csv format.\n   * It will take query information and then place the searched data\n   **/\n    $scope.exportAsCSV=function(){\n        items = JSON.stringify($scope.tableData);\n        items=JSON.parse(items)\n        items.forEach(item=>{\n            keys=Object.keys(item);\n            delete item['ts']\n            keys.forEach(key=>{\n                try{\n                    item[key]=item[key].replace('<br>', '/');\n                }catch{}\n            })\n        })\n        const replacer = (key, value) => value === null ? '' : value // specify how you want to handle null values here\n        const header = Object.keys(items[0]);\n        let csv = items.map(row => header.map(fieldName => JSON.stringify(row[fieldName], replacer)).join(','));\n        \n        cHeader=[];\n        tMeta= $scope.tableMeta;\n        header.forEach(h=>{\n            if(tMeta.filter(data=>data.key==h).length>0){\n                cHeader.push(tMeta.filter(data=>data.key==h)[0].title);\n            }\n        });\n        csv.unshift(cHeader.join(','));\n        csv.unshift([].join(','));\n        if(jsonInput.reportType.toLowerCase()!='status'){\n            end=jsonInput.reportType.toLowerCase()=='hourly'||jsonInput.reportType.toLowerCase()=='history'?moment(moment(jsonInput.endDate).format('YYYY-MM-DD')+' '+jsonInput.endTime).format($scope.settings.dateFormat+' hh:mm A').toString():$scope.showDateWithFormat(jsonInput.endDate, 'end')+' '+self.ctx.settings.defaultEndTime;\n            csv.unshift(['End time', '\"'+end+'\"'].join(','));\n            start=jsonInput.reportType.toLowerCase()=='hourly'||jsonInput.reportType.toLowerCase()=='history'?moment(moment(jsonInput.startDate).format('YYYY-MM-DD')+' '+jsonInput.startTime).format($scope.settings.dateFormat+' hh:mm A').toString():$scope.showDateWithFormat(jsonInput.startDate, 'start')+' '+self.ctx.settings.defaultStartTime;\n            csv.unshift(['Start time', '\"'+start+'\"'].join(','));\n        }\n        csv.unshift([self.ctx.settings?.unitKey==undefined?self.ctx.settings.unitKey:'Unit value', self.ctx.settings?.unitValue].join(','));\n        csv.unshift(['Report Type', jsonInput.reportType+' '+self.ctx.settings.typeSuffix].join(','));\n        \n        dv=jsonInput.devices.length>1?'Multiple devices':jsonInput.devices[0].name\n        csv.unshift([self.ctx.settings?.deviceTitle==undefined?'Device':self.ctx.settings.deviceTitle, dv].join(','));\n        csv = csv.join('\\r\\n')\n        let link = document.createElement(\"a\");    \n        link.id=\"lnkDwnldLnk\";\n        document.body.appendChild(link);\n        blob = new Blob([csv], { type: 'text/csv' }); \n        let csvUrl = window.webkitURL.createObjectURL(blob);\n        let filename = ($scope.settings?.csvFileName?$scope.settings?.csvFileName:'report')+moment(new Date()).format('_DD_MM_YYYY_hh_mm_A')+'.csv';\n        jQuery(\"#lnkDwnldLnk\")\n        .attr({\n            'download': filename,\n            'href': csvUrl\n        });\n        jQuery('#lnkDwnldLnk')[0].click();\n        document.body.removeChild(link);\n    }\n    \n    /**\n     * Convert 24 hours time to AM/PM format\n     * */\n    $scope.showTimeInHFormat=function(dt, tm){\n        s=moment(dt).format('YYYY-MM-DD')\n        return moment(s+' '+tm).format('hh:mm A')\n    }\n    $scope.showDateWithFormat=function(dt, pos){\n        if(pos=='start'){\n            return moment(dt).format($scope.settings.dateFormat);\n        }else{\n            const timeData=getTimeData(jsonInput);\n            if(Array.isArray(timeData)){\n                return moment(new Date(timeData[timeData.length-1].endUnix)).format($scope.settings.dateFormat);\n                \n            }else{\n                return moment(new Date(timeData.endUnix)).format($scope.settings.dateFormat);\n            }\n        }\n    }\n}\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        singleEntity: true\n    };\n};",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\n            \"firstColumnName\"\n        ],\n        \"properties\": {\n            \"tableHeaderBgColor\":{\n                \"title\":\"Table Header Background Color\",\n                \"type\":\"string\"\n            },\n            \"tableHeaderTxtColor\":{\n                \"title\":\"Table Header Text Color\",\n                \"type\":\"string\"\n            },\n            \"countAVG\":{\n                \"title\":\"Count average\",\n                \"type\":\"boolean\"\n            },\n            \"countSUM\":{\n                \"title\":\"Count sum\",\n                \"type\":\"boolean\"\n            },\n            \"firstColumnName\":{\n                \"title\":\"First column name\",\n                \"type\":\"string\"\n            },\n            \"deviceTitle\":{\n                \"title\":\"Device title\",\n                \"type\":\"string\",\n                \"default\": \"Device\"\n            },\n            \"typeSuffix\":{\n                \"title\":\"Report type suffix\",\n                \"type\":\"string\",\n                \"default\": \"duration report\"\n            },\n            \"unitKey\":{\n                \"title\":\"Unit key\",\n                \"type\":\"string\",\n                \"default\": \"Value unit\"\n            },\n            \"unitValue\":{\n                \"title\":\"Unit value\",\n                \"type\":\"string\",\n                \"default\": \"kWh\"\n            },\n            \"multiReportText\":{\n                \"title\":\"Multi devices report text\",\n                \"type\":\"string\",\n                \"default\": \"Multi devices\"\n            },\n            \"emptyDataField\":{\n                \"title\":\"Empty data field value\",\n                \"type\":\"string\",\n                \"default\": \"-\"\n            },\n            \"dateFormat\":{\n                \"title\":\"Date format\",\n                \"type\":\"string\",\n                \"default\": \"DD MMM, YYYY\"\n            },\n            \"dateFormatForMonthly\":{\n                \"title\":\"Date format for monthly report\",\n                \"type\":\"string\",\n                \"default\": \"MMM, YYYY\"\n            },\n            \"title1\":{\n                \"title\":\"Title true state\",\n                \"type\":\"string\",\n                \"default\": \"Online\"\n            },\n            \"title2\":{\n                \"title\":\"Title false state\",\n                \"type\":\"string\",\n                \"default\": \"Offline\"\n            },\n            \"fStateVal\":{\n                \"title\":\"False state value\",\n                \"type\":\"string\",\n                \"default\": \"false\"\n            },\n            \"defaultStartTime\":{\n                \"title\": \"Default start time\",\n                \"type\": \"string\",\n                \"default\": \"12:00:00 AM\"\n            },\n            \"defaultEndTime\":{\n                \"title\": \"Default end time\",\n                \"type\": \"string\",\n                \"default\": \"11:59:59 PM\"\n            },\n            \"csvFileName\":{\n                \"title\": \"CSV file name\",\n                \"type\": \"string\",\n                \"default\": \"syncross_report\"\n            }\n        }\n    },\n    \"form\": [\n    {\n        \"key\":\"tableHeaderBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"countAVG\",\n        \"type\":\"checkbox\"\n    },\n    {\n        \"key\":\"countSUM\",\n        \"type\":\"checkbox\"\n    },\n    \"firstColumnName\",\n    \"deviceTitle\",\n    \"typeSuffix\",\n    \"unitKey\",\n    \"unitValue\",\n    \"multiReportText\",\n    \"emptyDataField\",\n    \"dateFormat\",\n    \"dateFormatForMonthly\",\n    \"title1\",\n    \"title2\",\n    \"fStateVal\",\n    \"defaultStartTime\",\n    \"defaultEndTime\",\n    \"csvFileName\"]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.9248978586128855,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#ffffff\",\"color\":\"rgba(0,0,0,0.87)\",\"padding\":\"8px\",\"settings\":{\"tableHeaderBgColor\":\"#f0f0f0\",\"deviceTitle\":\"Device\",\"typeSuffix\":\"duration report\",\"unitKey\":\"Value unit\",\"unitValue\":\"kWh\",\"multiReportText\":\"Multi devices\",\"emptyDataField\":\"-\",\"dateFormat\":\"DD MMM, YYYY\",\"dateFormatForMonthly\":\"MMM, YYYY\",\"firstColumnName\":\"Date Time \\\\ Station name\",\"tableHeaderTxtColor\":\"#000000\",\"title1\":\"Online\",\"title2\":\"Offline\",\"fStateVal\":\"false\",\"defaultStartTime\":\"12:00:00 AM\",\"defaultEndTime\":\"11:59:59 PM\"},\"title\":\"Single value duration report\",\"showTitleIcon\":false,\"iconColor\":\"rgba(255,255,255,0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"showLegend\":false}"
      }
    },
    {
      "alias": "report_form",
      "name": "Report form - mat-table",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 12.5,
        "sizeY": 6.5,
        "resources": [],
        "templateHtml": "<div class=\"report-form-wrapper\" style=\"background-color: inherit; color: inherit;\">\n    <div class=\"row\">\n        <div class=\"col-md-8\">\n            <div *ngIf=\"allData && tablePagination\">\n                <div class=\"rf\" [style.height]=\"height+'px'\"\n                    [style.overflow]=\"'auto'\">\n                    <mat-table [dataSource]=\"allData.slice(tablePagination.getFrom(), tablePagination.getTo())\" class=\"satl-table\">\n                        <ng-container matColumnDef=\"select\">\n                            <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\" class=\"headercheckboxcell\">\n                                <div id=\"mat-report-header-search-box\">\n                                    <mat-checkbox (change)=\"selectAllDevice($event)\" [checked]=\"reportDevices.length==allData.length\" [indeterminate]=\"reportDevices.length!=0 && reportDevices.length!=allData.length\" style=\"font-size: 14px;\"> Select all </mat-checkbox>\n                                    <mat-form-field appearance=\"outline\" floatLabel=\"never\">\n                                        <mat-icon matPrefix class=\"material-symbols-outlined\">search</mat-icon>\n                                      <input matInput (keyup)=\"applyFilter(searchVal)\" placeholder=\"Search\" [(ngModel)]=\"searchVal\" style=\"font-size: 14px;\">\n                                      <button matSuffix mat-icon-button aria-label=\"Clear\" *ngIf=\"searchVal\" (click)=\"searchVal=''; applyFilter(searchVal)\"><mat-icon>close</mat-icon></button>\n                                    </mat-form-field>\n                                </div>  \n                            </mat-header-cell>\n                            <mat-cell *matCellDef=\"let row\" [style.background-color]=\"bgColor\" [style.color]=\"color\" class=\"checkboxcell\"  [style.border-bottom-color]=\"settings?.tableRowLineColor\">\n                                <mat-checkbox class=\"example-margin\" (change)=\"selectIndividualDevice($event, row)\" [checked]=\"styleOfCheckbox(row)\">\n                                    {{row.name}}\n                                </mat-checkbox>\n                            </mat-cell>\n                        </ng-container>\n                        <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\n                        <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n                    </mat-table>\n                </div>\n                <mat-paginator\n                    [style.background-color]=\"bgColor\"\n                    [style.color]=\"color\"\n                    [length]=\"allData.length\"\n                    [pageSize]=\"tablePagination.pageSize\"\n                    [pageSizeOptions]=\"tablePagination.pageSizeOptions\"\n                    (page)=\"tablePagination.handler($event)\"\n                    aria-label=\"Select page\"\n                    showFirstLastButtons=\"true\"\n                    class=\"report-form-paginator\">\n                </mat-paginator>\n            </div>\n        </div>\n        <div class=\"col-md-4\" style=\"height: {{formHeight}}px;\">\n            <div class=\"report-view\" style=\"overflow: auto;height:100%;\">\n                <form *ngIf=\"form\" class=\"report-view-form\"\n                    method=\"POST\"\n                    (submit)=\"searchData($event, actn, allData[0])\"\n                    [formGroup]=\"form\"\n                    accept-charset=\"utf-8\">\n                    <div class=\"fg\">\n                        <div *ngIf=\"reportDevices!=undefined\">\n                            <mat-form-field class=\"report-type satl-report-ff\" appearance=\"outline\">\n                                <mat-label [style.color]=\"color\"> Report type</mat-label>\n                                <mat-select id=\"report-type\"\n                                    formControlName=\"reportType\"\n                                    (selectionChange)=\"f($event)\"\n                                    required>\n                                    <mat-option\n                                        *ngFor=\"let reportType of reportTypes\"\n                                        [value]=\"reportType\">\n                                        {{reportType}}\n                                    </mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div\n                            *ngIf=\"form.value.reportType!=''&&form.value.reportType!='Status'\">\n                            <mat-form-field *ngIf=\"form.value.reportType=='Daily'||form.value.reportType=='Hourly'||form.value.reportType=='Interval'\" class=\"start-date satl-report-ff\" appearance=\"outline\">\n                                <mat-label [style.color]=\"color\">Start Date</mat-label>\n                                <input matInput\n                                    id=\"startDate\"\n                                    [matDatepicker]=\"startPicker\"\n                                    (click)=\"openDatePicker(startPicker)\"\n                                    [max]=\"form.value.endDate\"\n                                    formControlName=\"startDate\">\n                                <mat-datepicker-toggle matSuffix [for]=\"startPicker\"></mat-datepicker-toggle>\n                                <mat-datepicker #startPicker></mat-datepicker>\n                            </mat-form-field>\n\n                            <mat-form-field\n                                *ngIf=\"form.value.reportType=='Monthly'\"\n                                appearance=\"outline\" class=\"satl-report-ff\">\n                                <mat-label\n                                    [style.color]=\"color\">\n                                    Start Date</mat-label>\n                                <input matInput\n                                    id=\"startDate\"\n                                    [matDatepicker]=\"startPicker\"\n                                    [max]=\"form.value.endDate\"\n                                    (click)=\"openDatePicker(startPicker)\"\n                                    required>\n                                <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"startPicker\">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #startPicker\n                                    startView=\"year\"\n                                    (monthSelected)=\"selectStartDate($event, startPicker, 'YYYY-MM')\"\n                                    id=\"xDts\">\n                                </mat-datepicker>\n                            </mat-form-field>\n\n                            <mat-form-field\n                                *ngIf=\"form.value.reportType=='Yearly'\"\n                                appearance=\"outline\" class=\"satl-report-ff\">\n                                <mat-label\n                                    [style.color]=\"color\">\n                                    Start Date</mat-label>\n                                <input matInput\n                                    id=\"startDate\"\n                                    [matDatepicker]=\"startPicker\"\n                                    [max]=\"form.value.endDate\"\n                                    (click)=\"openDatePicker(startPicker)\"\n                                    required>\n                                <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"startPicker\">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #startPicker\n                                    startView=\"multi-year\"\n                                    (yearSelected)=\"selectStartDate($event, startPicker, 'YYYY')\">\n                                </mat-datepicker>\n                            </mat-form-field>\n\n                        </div>\n                        <div\n                            *ngIf=\"form.value.reportType=='Hourly'||form.value.reportType=='Interval'\">\n                            <mat-form-field\n                                class=\"start-time satl-report-ff\"\n                                appearance=\"outline\">\n                                <mat-label\n                                    [style.color]=\"color\">\n                                    Start Time</mat-label>\n                                <input matInput type=\"time\"\n                                    id=\"startTime\"\n                                    formControlName=\"startTime\">\n                            </mat-form-field>\n                        </div>\n                        <div\n                            *ngIf=\"form.value.reportType!='' && form.value.reportType!='Status'\">\n                            <mat-form-field\n                                *ngIf=\"form.value.reportType=='Hourly'||form.value.reportType=='Daily'||form.value.reportType=='Interval'\"\n                                class=\"end-date satl-report-ff\"\n                                appearance=\"outline\">\n                                <mat-label\n                                    [style.color]=\"color\">\n                                    End Date</mat-label>\n                                <input matInput id=\"endDate\"\n                                    [matDatepicker]=\"endPicker\"\n                                    (click)=\"openDatePicker(endPicker)\"\n                                    [max]=\"today\"\n                                    [min]=\"form.value.startDate\"\n                                    formControlName=\"endDate\">\n                                <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"endPicker\">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #endPicker>\n                                </mat-datepicker>\n                            </mat-form-field>\n\n                            <mat-form-field\n                                *ngIf=\"form.value.reportType=='Monthly'\"\n                                appearance=\"outline\" class=\"satl-report-ff\">\n                                <mat-label\n                                    [style.color]=\"color\">\n                                    End Date</mat-label>\n                                <input matInput id=\"endDate\"\n                                    [matDatepicker]=\"picker2\"\n                                    [max]=\"today\"\n                                    [min]=\"form.value.startDate\"\n                                    (click)=\"openDatePicker(picker2)\"\n                                    required>\n                                <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker2\">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker2\n                                    startView=\"year\"\n                                    (monthSelected)=\"selectEndDate($event, picker2, 'YYYY-MM')\">\n                                </mat-datepicker>\n                            </mat-form-field>\n                            <mat-form-field\n                                *ngIf=\"form.value.reportType=='Yearly'\"\n                                class=\"example-full-width satl-report-ff\"\n                                appearance=\"outline\">\n                                <mat-label\n                                    [style.color]=\"color\">\n                                    End Date</mat-label>\n                                <input matInput id=\"endDate\"\n                                    [matDatepicker]=\"picker2\"\n                                    [max]=\"today\"\n                                    [min]=\"form.value.startDate\"\n                                    (click)=\"openDatePicker(picker2)\"\n                                    required>\n                                <mat-datepicker-toggle\n                                    matSuffix\n                                    [for]=\"picker2\">\n                                </mat-datepicker-toggle>\n                                <mat-datepicker #picker2\n                                    startView=\"multi-year\"\n                                    (yearSelected)=\"selectEndDate($event, picker2, 'YYYY')\">\n                                </mat-datepicker>\n                            </mat-form-field>\n\n                        </div>\n                        <div\n                            *ngIf=\"form.value.reportType=='Hourly'||form.value.reportType=='Interval'\">\n                            <mat-form-field class=\"end-time satl-report-ff\"\n                                appearance=\"outline\">\n                                <mat-label\n                                    [style.color]=\"color\">\n                                    End Time</mat-label>\n                                <input matInput type=\"time\"\n                                    id=\"endTime\"\n                                    formControlName=\"endTime\">\n                            </mat-form-field>\n                        </div>\n                        <div *ngIf=\"reportDevices.length\">\n                            <div class=\"rb\" *ngFor=\"let action of dvd\">\n                                <div *ngIf=\"action.name[0]!='!'\">\n                                    <button mat-flat-button\n                                        style=\"width:100%;\"\n                                        *ngIf=\"action.name.split('--')[0]!='0'&&action.name.split('--')[0]!='1'&&action.name.split('--')[0]!='2'&&action.name.split('--')[0]!='3'\"\n                                        [style.background-color]=\"settings.buttonBgColor\"\n                                        [style.color]=\"settings.buttonTxtColor\"\n                                        (click)=\"actn=action\">{{action.name}}</button>\n                                    <div *ngIf=\"action.name.split('--')[0]=='0'\">\n                                        <div *ngIf=\"reportDevices.length>1\">\n                                            <button\n                                                mat-flat-button\n                                                style=\"width:100%;\"\n                                                *ngIf=\"form.value.reportType.toLowerCase()=='interval'\"\n                                                [style.background-color]=\"settings.buttonBgColor\"\n                                                [style.color]=\"settings.buttonTxtColor\"\n                                                (click)=\"actn=action\">{{action.name.split('--')[1]}}</button>\n                                        </div>\n                                        <button\n                                            mat-flat-button\n                                            style=\"width:100%;\"\n                                            *ngIf=\"reportDevices.length==1\"\n                                            [style.background-color]=\"settings.buttonBgColor\"\n                                            [style.color]=\"settings.buttonTxtColor\"\n                                            (click)=\"actn=action\">{{action.name.split('--')[1]}}</button>\n                                    </div>\n                                    <div *ngIf=\"action.name.split('--')[0]=='1'&&form.value.reportType.toLowerCase()!='interval'\">\n                                        <div>\n                                            <button\n                                                mat-flat-button\n                                                style=\"width:100%;\"\n                                                [style.background-color]=\"settings.buttonBgColor\"\n                                                [style.color]=\"settings.buttonTxtColor\"\n                                                (click)=\"actn=action\">{{action.name.split('--')[1]}}</button>\n                                        </div>\n                                    </div>\n                                    <div *ngIf=\"action.name.split('--')[0]=='2'&&form.value.reportType.toLowerCase()=='interval'&&reportDevices?.length>=1\">\n                                        <button\n                                            mat-flat-button\n                                            style=\"width:100%;\"\n                                            [style.background-color]=\"settings.buttonBgColor\"\n                                            [style.color]=\"settings.buttonTxtColor\"\n                                            (click)=\"actn=action\">\n                                            {{action.name.split('--')[1]}}\n                                        </button>\n                                    </div>\n                                    <div *ngIf=\"action.name.split('--')[0]=='3'&&form.value.reportType.toLowerCase()=='interval'&&reportDevices?.length==1\">\n                                        <button\n                                            mat-flat-button\n                                            style=\"width:100%;\"\n                                            [style.background-color]=\"settings.buttonBgColor\"\n                                            [style.color]=\"settings.buttonTxtColor\"\n                                            (click)=\"actn=action\">{{action.name.split('--')[1]}}</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>",
        "templateCss": "@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');\n*{\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 400;\n}\nmat-icon{\n    font-family: 'Material Icons';\n}\n.col-md-4 .report-view mat-form-field {\n    width: 100%;\n}\n\n.col-md-4 .report-view mat-form-field .mat-form-field-wrapper {\n    padding-bottom: 0;\n}\ndiv#report-form_wrapper {\n    width: 100%;\n    background-color: inherit;\n}\n\n/*.mat-form-field-appearance-outline .mat-form-field-outline {*/\n/*    color: #ccc;*/\n     /*Override outline color. */\n/*}*/\ndiv.mat-select-value,\n.mat-form-field-required-marker {\n    color: inherit !important;\n}\n\ndiv.rf::-webkit-scrollbar,\n.report-view::-webkit-scrollbar{\n  width: 10px;\n}\ndiv.rf,\n.report-view{\n  scrollbar-width: thin;\n  scrollbar-color: #90A4AE #CFD8DC;\n}\ndiv.rf::-webkit-scrollbar-track,\n.report-view::-webkit-scrollbar-track{\n  background: #CFD8DC;\n}\ndiv.rf::-webkit-scrollbar-thumb,\n.report-view::-webkit-scrollbar-thumb{\n  background-color: #90A4AE ;\n  border-radius: 6px;\n  border: 3px solid #CFD8DC;\n}\n\n\n\n.report-form-wrapper .row{\n    margin: 0;\n    padding: 0;\n    display: flex;\n}\n.report-form-wrapper .row .col-md-8{\n    width: 70%;\n    padding: 10px;\n}\n.report-form-wrapper .row .col-md-4{\n    width: 30%;\n    padding: 10px;\n}\n\n@media only screen and (max-width: 768px){\n\t.report-form-wrapper .row{\n        margin: 0;\n        padding: 0;\n        display: block;\n    }\n    .report-form-wrapper .row .col-md-8{\n        width: 100%;\n        padding: 10px;\n    }\n    .report-form-wrapper .row .col-md-4{\n        width: 100%;\n        padding: 10px;\n    }\n}\n.rb{\n    margin-top: 5px;\n}\ndiv#report-form_info{\n    color: inherit;\n}\ninput[type=\"time\"]::-webkit-calendar-picker-indicator{\n  filter: invert(100%);\n}\n#mat-report-header-search-box{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n#mat-report-header-search-box .mat-form-field-wrapper{\n    padding: 0;\n}\n.mat-input-element::placeholder{\n    color: inherit;\n}\n#mat-report-header-search-box .mat-form-field-infix {\n    border-top: 4px solid transparent;\n}\n#mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-prefix, #mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-suffix {\n    top: 5px;\n}\n#mat-report-header-search-box mat-form-field{\n    width: 300px;\n}\n\n.satl-table{\n    background: transparent!important;\n}",
        "controllerScript": "self.onInit = function() {\n    $(document).ready(function(){\n      self.onResize();\n    });\n    const { $scope } = self.ctx\n    $scope.searchVal='';\n    $scope.displayedColumns=['select'];\n    $scope.bgColor=self.ctx.widgetConfig.backgroundColor;\n    $scope.color=self.ctx.widgetConfig.color;\n    $scope.settings=self.ctx.settings;\n    $scope.formHeight=self.ctx.isMobile?self.ctx.height/2:self.ctx.height;\n    $scope.height=self.ctx.isMobile?self.ctx.height/2:self.ctx.height-65;\n    const tablePagination = {\n        pageIndex: 0,\n        pageSize: 20,\n        pageSizeOptions: [20, 50, 100],\n        handler: (pagination) => {\n            const { pageIndex, pageSize } = pagination;\n            if (pageSize !== undefined) {\n                tablePagination.pageSize = pageSize;\n            }\n            if (pageIndex !== undefined) {\n                tablePagination.pageIndex = pageIndex;\n            }\n        },\n        getFrom: () => {\n            const { pageIndex, pageSize } = tablePagination;\n            return pageIndex * pageSize;\n        },\n        getTo: () => {\n            const { pageIndex, pageSize } = tablePagination;\n            return pageIndex * pageSize + pageSize;\n        }\n    };\n    $scope.tablePagination=tablePagination;\n    $scope.styleOfCheckbox=function(row){\n        $('.tb-default mat-cell.checkboxcell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.widgetConfig.color);\n        return $scope.reportDevices.indexOf(row)>-1;\n    }\n    $scope.actn={};\n    let dvd = self.ctx.actionsApi.getActionDescriptors('ReportViewBtn');\n    self.ctx.$scope.dvd = dvd;\n    let defData=self.ctx.defaultSubscription.data\n    let allData=[];\n    $scope.allChecked=false;\n    $scope.reportDevices=[];\n    if(defData){\n        defData.forEach(dt=>{\n            allData.push({'name': dt.datasource.entityLabel!=''?dt.datasource.entityLabel:dt.datasource.entityName, 'id': dt.datasource.entityId});\n        });\n        allData.sort((a,b)=>{return a.name.localeCompare(b.name)});\n        $scope.allData=[...allData];\n        self.ctx.detectChanges();\n    }\n    buildForm(new Date());\n    $scope.reportTypes=['Hourly', 'Daily', 'Monthly', 'Yearly', 'Interval']\n    $scope.today=new Date();\n    let reportDevices = [];\n    \n    $scope.searchData=function(e, d, dvc){\n        let fg=$scope.fb.array([]);\n        if(reportDevices.length>0){\n            reportDevices.forEach(rd=>{\n                fg.push($scope.fb.group({\n                    name: rd.name,\n                    id: rd.id\n                }));\n            });\n            $scope.form.setControl('devices', fg);\n        }else{\n            self.ctx.showToast('warn', 'No device is selected', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n            return;\n        }\n        if($scope.form.valid){\n            ss=moment(moment(new Date($scope.form.value.startDate)).format('YYYY-MM-DD')+' '+$scope.form.value.startTime).unix();\n            ee=moment(moment(new Date($scope.form.value.endDate)).format('YYYY-MM-DD')+' '+$scope.form.value.endTime).unix();\n            if(ss>ee){\n                self.ctx.showToast('error', 'Start datetime is greater than end datetime', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n            }else{\n                localStorage.setItem('report_data_format', JSON.stringify($scope.form.value));\n                self.ctx.actionsApi.handleWidgetAction(e, d, dvc.id, dvc.name);\n            }\n        }else{\n            if($scope.form.value.reportType=='Status'){\n                localStorage.setItem('report_data_format', JSON.stringify($scope.form.value));\n                self.ctx.actionsApi.handleWidgetAction(e, d, dvc.id, dvc.name);\n            }else if($scope.form.value.reportType=='Yearly'||$scope.form.value.reportType=='Monthly'){\n                if($scope.form.value.startDate==''||$scope.form.value.endDate==''){\n                    self.ctx.showToast('warn', 'Invalid form input', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                }else{\n                    localStorage.setItem('report_data_format', JSON.stringify($scope.form.value));\n                    self.ctx.actionsApi.handleWidgetAction(e, d, dvc.id, dvc.name);\n                }\n            }else{\n                self.ctx.showToast('warn', 'Invalid form input', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n            }\n        }\n        \n    }\n    $scope.applyFilter=function(searchVal){\n        $scope.allData=[...allData];\n        $scope.allData = $scope.allData.filter(ele=>{\n            if(ele.name.toLowerCase().search(searchVal)!=-1){\n                return ele;\n            }\n        });\n        self.ctx.detectChanges();\n    }\n    $scope.f=function(event){\n        $scope.form.reset();\n        buildForm(event.value=='Hourly'||event.value=='Daily'||event.value=='Interval'?new Date():'');\n        $scope.form.controls['reportType'].setValue(event.value);\n        self.ctx.detectChanges();\n        self.onResize();\n    }\n    $scope.openDatePicker=function(dp) {\n        dp.open();\n    }\n    self.ctx.$scope.selectStartDate=function(eventData, dp, format) {\n        $scope.form.controls['startDate'].setValue(moment(eventData).format(format));\n        $(\"#startDate\").val(moment(eventData).format(format));\n        dp.close();\n    }\n    self.ctx.$scope.selectEndDate=function(eventData, dp, format) {\n        $scope.form.controls['endDate'].setValue(moment(eventData).format(format));\n        $(\"#endDate\").val(moment(eventData).format(format));\n        dp.close();\n    }\n    function buildForm(endt){\n        today=new Date();\n        $scope.form=$scope.fb.group({\n            devices: $scope.fb.array([]),\n            reportType: ['', $scope.validators.required],\n            startDate: ['', $scope.validators.required],\n            startTime: ['00:00', $scope.validators.required],\n            endDate: [endt, $scope.validators.required],\n            endTime: [today.getHours()+':'+(today.getMinutes()>9?today.getMinutes():'0'+today.getMinutes()), $scope.validators.required]\n        });\n    }\n    $scope.removeDevice=function(element){\n        reportDevices=reportDevices.filter(d=>d!=element);\n        delete $scope.reportDevices;\n        $scope.reportDevices=reportDevices;\n        self.ctx.detectChanges();\n    }\n    \n    $scope.selectAllDevice=function(event){\n        if(event.checked){\n            reportDevices=[...$scope.allData];\n        }else{\n            reportDevices=[];\n            if(reportDevices.length==0){\n                $scope.form.reset();\n                today=new Date();\n                $scope.form.patchValue({\n                    startTime:'00:00',\n                    endDate: new Date(),\n                    endTime: today.getHours()+':'+(today.getMinutes()>9?today.getMinutes():'0'+today.getMinutes())\n                });\n            }\n        }\n        $scope.reportDevices=[...reportDevices];\n        $scope.allChecked=_.isEqual($scope.allData,reportDevices);\n        $scope.form.patchValue({\n            'reportType': reportDevices.length>1?'Interval':''\n        });\n        self.ctx.detectChanges();\n        self.onResize();\n    }\n    $scope.selectIndividualDevice=function(event, data){\n        if(event.checked){\n            reportDevices.push(data);\n        }else{\n            reportDevices=reportDevices.filter(rd=>rd!=data);\n            if(reportDevices.length==0){\n                $scope.form.reset();\n                today=new Date();\n                $scope.form.patchValue({\n                    startTime:'00:00',\n                    endDate: new Date(),\n                    endTime: today.getHours()+':'+(today.getMinutes()>9?today.getMinutes():'0'+today.getMinutes())\n                });\n            }\n        }\n        reportDevices.sort((a,b)=>{return a.name.localeCompare(b.name)});\n        $scope.allChecked=_.isEqual($scope.allData,reportDevices);\n        $scope.reportDevices=[...reportDevices];\n        $scope.form.patchValue({\n                'reportType': reportDevices.length>1?'Interval':'Daily'\n        });\n        self.ctx.detectChanges();\n        self.onResize();\n    }\n    $scope.isDeviceChecked=function(data){\n        return reportDevices.indexOf(data)>-1;\n    }\n    \n}\nself.onDataUpdated=function(){\n    self.onResize();\n}\nself.actionSources = function() {\n     return {\n         'ReportViewBtn': {name: 'Report view action',multiple: true}\n     };\n }\n self.onResize=function(){\n    $scope=self.ctx.$scope;\n    $scope.settings=self.ctx.settings;\n    $scope.height=self.ctx.isMobile?self.ctx.height/2:self.ctx.height-65;\n    $scope.formHeight=self.ctx.isMobile?self.ctx.height/2:self.ctx.height;\n     \n    $('.tb-default mat-cell.checkboxcell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.widgetConfig.color);\n    $('.tb-default mat-header-cell.headercheckboxcell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.settings.tableHeaderTxtColor);\n    $('mat-paginator.report-form-paginator .mat-select-value-text').css('color', self.ctx.widgetConfig.color);\n    $('.tb-default mat-paginator.report-form-paginator .mat-select-arrow, .tb-default .satl-report-ff .mat-select-arrow, .tb-default .satl-report-ff button').css('color', self.ctx.widgetConfig.color);\n    $('.tb-default mat-paginator.report-form-paginator .mat-form-field-appearance-legacy .mat-form-field-underline').css('background-color', self.ctx.widgetConfig.color);\n    $('.tb-default .satl-report-ff .mat-form-field-appearance-outline .mat-form-field-outline').css('color',self.ctx.widgetConfig.color);\n    $('.tb-default #mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-outline').css('color',self.ctx.settings.tableHeaderTxtColor);\n    $(document).ready(function() {\n        $('mat-paginator.report-form-paginator .mat-select-value-text').css('color', self.ctx.widgetConfig.color);\n        $('mat-paginator.report-form-paginator .tb-default .mat-select-arrow').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default mat-form-field.satl-report-ff .mat-form-field-appearance-legacy .mat-form-field-underline').css('background-color', self.ctx.widgetConfig.color);\n        $('.mat-form-field-appearance-outline .mat-form-field-outline').css('color',self.ctx.widgetConfig.color);\n        $('.tb-default #mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-outline').css('color',self.ctx.settings.tableHeaderTxtColor);\n        $('.tb-default #mat-report-header-search-box .mat-input-element').css('caret-color',self.ctx.settings.tableHeaderTxtColor);\n        \n    });\n }\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        singleEntity: false\n    };\n};\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\n        ],\n        \"properties\": {\n            \"buttonBgColor\":{\n                \"title\":\"Button Background Color\",\n                \"type\":\"string\",\n                \"default\": \"#ff5722\"\n            },\n            \"buttonTxtColor\":{\n                \"title\":\"Button Text Color\",\n                \"type\":\"string\",\n                \"default\": \"#ffffff\"\n            },\n            \n            \"tableHeaderBgColor\":{\n                \"title\":\"Table header background color\",\n                \"type\":\"string\",\n                \"default\": \"#cccc00\"\n            },\n            \"tableHeaderTxtColor\":{\n                \"title\":\"Table header text color\",\n                \"type\":\"string\",\n                \"default\": \"#ffffff\"\n            },\n            \"tableRowLineColor\":{\n                \"title\":\"Table row line color\",\n                \"type\":\"string\",\n                \"default\": \"#777\"\n            }\n        }\n    },\n    \"form\": [\n    {\n        \"key\":\"buttonBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"buttonTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\": \"tableRowLineColor\",\n        \"type\": \"color\"\n    }\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"buttonBgColor\":\"#ff5722\",\"buttonTxtColor\":\"#ffffff\",\"tableBorderColor\":\"#cccc00\",\"tableHeaderBgColor\":\"#cccc00\",\"tableHeaderTxtColor\":\"#ffffff\"},\"title\":\"Report form - mat-table\"}"
      }
    },
    {
      "alias": "report_view",
      "name": "Report view",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9.5,
        "sizeY": 4,
        "resources": [],
        "templateHtml": "<div class=\"satl-widget-report\" style=\"overflow: auto;height: 100%;width:100%\">\n    <div class=\"report-header\" style=\"line-height: 30px;position: relative;\" *ngIf=\"isDataLoaded\">\n    <div class=\"report-header-content\">\n        <div fxLayout *ngIf=\"jsonInput\">\n            <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">Report type</div>\n            <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\">{{jsonInput?.reportType}} <span *ngIf=\"settings?.typeSuffix!=undefined\">{{settings.typeSuffix}}</span></div>\n        </div>\n        <div fxLayout *ngIf=\"jsonInput\">\n            <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\"><span *ngIf=\"settings?.deviceTitle!=undefined\">{{settings.deviceTitle}}</span><span *ngIf=\"settings?.deviceTitle==undefined\">Device</span></div>\n            <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\"><span *ngIf=\"jsonInput.devices.length==1\">{{jsonInput?.devices[0].name}}</span><span *ngIf=\"jsonInput.devices.length>1\">{{ settings?.multiReportText }}</span></div>\n        </div>\n        <div fxLayout *ngIf=\"jsonInput && jsonInput.reportType!='Status'\">\n            <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">Start date</div>\n            <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\">\n                <span>{{showDateWithFormat(hsTimeData?.start, \"start\")}}</span>\n            </div>\n        </div>\n        <div fxLayout *ngIf=\"jsonInput && jsonInput.reportType!='Status'\">\n            <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">End date</div>\n            <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\"><span>{{showDateWithFormat(hsTimeData?.end, \"end\")}}</span></div>\n        </div>\n        <div fxLayout *ngIf=\"isDataLoaded\">\n            <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">\n                Export\n            </div>\n            <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\">\n                <a (click)=\"exportAsCSV()\">CSV</a>\n            </div>\n        </div>\n        <div fxLayout *ngIf=\"isDataLoaded && actionDescriptor.length && !isMultipleDevice\">\n            <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">\n                View trend\n            </div>\n            <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\">\n                <a (click)=\"viewTrend($event, actionDescriptor[0])\">Open</a>\n            </div>\n        </div>\n        <div class=\"modify-search\">\n            <button mat-flat-button color=\"accent\" (click)=\"modifySearchPopup()\">Modify search</button>\n        </div>\n    </div>\n</div>\n<div  class=\"report-content\">\n    <mat-table [dataSource]=\"tableData\" id=\"reportTable\"\n        style=\"background-color:inherit;\">\n        <ng-container *ngFor=\"let column of tableMeta\"\n            [matColumnDef]=\"column.key\">\n            <mat-header-cell *matHeaderCellDef\n                [style.min-width]=\"column.key=='Date'?'150px':'auto'\"\n                [style.background-color]=\"settings?.tableHeaderBgColor\"\n                [style.color]=\"settings?.tableHeaderTxtColor\">\n                {{column.title}}\n            </mat-header-cell>\n            <mat-cell *matCellDef=\"let element\"\n                style=\"color:inherit;\">\n                {{element[column.key]}}\n            </mat-cell>\n        </ng-container>\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"\n            [style.background-color]=\"settings?.tableHeaderBgColor\">\n        </mat-header-row>\n        <mat-row\n            *matRowDef=\"let row; columns: displayedColumns;\">\n        </mat-row>\n\n    </mat-table>\n</div>\n<div *ngIf=\"!isDataLoaded\">\n        <mat-progress-spinner\n        class=\"example-margin\"\n        color=\"warn\"\n        mode=\"determinate\"\n        [value]=\"progressPercent\" style=\"position: relative; top: 0; left: 0; margin: 0 auto; text-align: center;\">\n    </mat-progress-spinner>\n    <div style=\"position:relative; top: -60px; left: 0; margin:0 auto;text-align:center;\">{{progressPercent}}%</div>\n    </div>\n</div>\n",
        "templateCss": "@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');\n*{\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 400;\n}\nform{\n    width: 100%;\n}\n.exportBtns{\n    right: 0;\n    top: 0;\n    position: relative;\n}\n.exportBtns>* {\n    margin: 0px 10px;\n}\n.report-meta table tr td {\n    padding: 5px 30px 0 0;\n}\nmat-form-field{\n    width: 100%;\n}\ndiv.row{\n    margin-right: 0!important;\n    margin-left: 0!important;\n}\n\nmat-table#reportTable {\n    position: relative;\n}\n\nmat-header-cell.mat-header-cell {\n    position: sticky;\n    top: 0;\n    background: #e9e9e9;\n}\n\nmat-row.mat-row:hover {\n    background: inherit!important;\n}\n\n.satl-widget-report::-webkit-scrollbar {\n  width: 11px;\n}\n.satl-widget-report {\n  scrollbar-width: thin;\n  scrollbar-color: #90A4AE #CFD8DC;\n}\n.satl-widget-report::-webkit-scrollbar-track {\n  background: #CFD8DC;\n}\n.satl-widget-report::-webkit-scrollbar-thumb {\n  background-color: #90A4AE ;\n  border-radius: 6px;\n  border: 3px solid #CFD8DC;\n}\nbutton.mat-button-disabled{\n    opacity: 0.35;\n}\nbutton.mat-button-disabled:hover {\n    cursor: not-allowed;\n}\n.clrWhite{\n    color: white!important;\n}\n\n.time-input-field::-webkit-calendar-picker-indicator {\n   filter: invert(1) sepia(1) saturate(1) hue-rotate(175deg);\n}\n.modify-search{\n    position: absolute;\n    right: 10px;\n    bottom: 20px;\n}",
        "controllerScript": "self.onInit = function() {\n    let baseUrl='/';\n    let http=self.ctx.http;\n    let $scope=self.ctx.$scope;\n    $scope.isDataLoaded=false;\n    $scope.settings=self.ctx.settings;\n    let latestData=self.ctx.defaultSubscription.data;\n    let inputData=localStorage.getItem('report_data_format');\n    let token = localStorage.getItem('jwt_token');\n    const customDialog = $scope.$injector.get(self.ctx.servicesMap.get('customDialog'));\n    let jsonInput={};\n    let actionDescriptor = self.ctx.actionsApi.getActionDescriptors('viewTrend');\n    $scope.actionDescriptor=actionDescriptor;\n    /***\n     * Iterate the data and get all device list.\n     * Store the device in a list to filter further using a popup.\n     * */\n    const allDevices=[];\n    if(self.ctx.data){\n        \n        self.ctx.data.forEach(dt=>{\n            if(allDevices.findIndex(ad=>ad.id==dt.datasource.entityId)==-1){\n                allDevices.push({'name': dt.datasource.entityLabel!=''?dt.datasource.entityLabel:dt.datasource.entityName, 'id': dt.datasource.entityId});\n            }\n        });\n        allDevices.sort((a,b)=>{return a.name.localeCompare(b.name)});\n    }\n    try {\n        jsonInput=JSON.parse(inputData);\n        $scope.isMultipleDevice=jsonInput.devices.length>1;\n        const timeData=getTimeData(jsonInput);\n        $scope.hsTimeData={\n            start: jsonInput.reportType=='Monthly'||jsonInput.reportType=='Yearly'?new Date(timeData[0].startUnix):new Date(timeData.startUnix),\n            end: jsonInput.reportType=='Monthly'||jsonInput.reportType=='Yearly'?new Date(timeData[0].endUnix):new Date(timeData.endUnix)\n        };\n        \n        $scope.jsonInput=jsonInput;\n        if (jsonInput.reportType.toLowerCase() == 'status'){\n            handleStatusData(jsonInput);\n        }else{\n            if(timeData.startUnix>timeData.endUnix){\n                self.ctx.showToast('warn', 'Start date time must be less than end date time', 2000, 'top', 'start',  $scope.toastTargetId);\n                return null;\n            }\n            let requestParams=getFormattedSettingsData(jsonInput);\n            let tableInfo=generateTableData(jsonInput);\n            $scope.tableMeta=tableInfo.tableMeta;\n            $scope.displayedColumns=tableInfo.displayedColumns;\n            if(requestParams.length>0){\n                if(jsonInput.devices.length>1){\n                    multideviceParams=[];\n                    jsonInput.devices.forEach(device=>{\n                        requestParams.forEach(param=>{\n                            multideviceParams.push({'device':device, 'param':param});\n                        });\n                    });\n                    handleMultiDeviceHttpRequests(multideviceParams, multideviceParams.length-1, timeData, [], 0, multideviceParams.length);\n                }else{\n                    if(jsonInput.reportType.toLowerCase()=='daily'||jsonInput.reportType.toLowerCase()=='hourly'){\n                        handleHttpRequests(requestParams, requestParams.length-1, timeData, [], 0, requestParams.length);\n                    }else if(jsonInput.reportType.toLowerCase()=='interval'){\n                        multideviceParams=[];\n                        jsonInput.devices.forEach(device=>{\n                            requestParams.forEach(param=>{\n                                multideviceParams.push({'device':device, 'param':param});\n                            })\n                        });\n                        handleMultiDeviceHttpRequests(multideviceParams, multideviceParams.length-1, timeData, [], 0, multideviceParams.length);\n                    }else{\n                        newParams=[];\n                        requestParams.forEach(param=>{\n                            timeData.forEach(time=>{\n                                t={};\n                                t['param']=param;\n                                t['time']=time;\n                                newParams.push(t);\n                            });\n                        });\n                        handleMonthAndYearlyHttpRequest(newParams, newParams.length-1, timeData, [], 0, newParams.length);\n                    }\n                }\n            }\n        }\n    } catch (e) {\n    }\n    \n  $scope.formatTime=function(time){\n      splited=time.split(/[:]/);\n      hour=+splited[0];\n      if(hour>12){\n          return hour-12+':'+splited[1]+' PM';\n      }else{\n          return time+' AM';\n      }\n  }\n  \n  /**\n   * Generating the table column array and displayed text\n   * As it is a mat-table, displayedcolumn should be unique according\n   * to data key\n   **/\n  function generateTableData(iData){\n      if(iData.devices.length>1){\n          displayedColumns=['DeviceName'];\n          tableMeta=[{'key':'DeviceName', 'title':'Device Name'}];\n      }else{\n          if(iData.reportType.toLowerCase()=='interval'){\n            displayedColumns=['DeviceName'];\n            tableMeta=[{'key':'DeviceName', 'title':'Device Name'}];\n          }else{\n            displayedColumns=['Date'];\n            tableMeta=[{'key':'Date', 'title':'Date'}];\n          }\n      }\n      settingsData=iData.devices.length==1?self.ctx.settings.singleDeviceTableColumn:self.ctx.settings.multiDeviceOption=='B'?self.ctx.settings.multiDeviceTableColumn:self.ctx.settings.singleDeviceTableColumn;\n      settingsData.sort(function (a, b) {\n          return a.order - b.order;\n        });\n      settingsData.forEach(setting=>{\n              column=setting.aggression.charAt(0).toUpperCase() + setting.aggression.slice(1).toLowerCase()+setting.key.charAt(0).toUpperCase() + setting.key.slice(1).toLowerCase();\n              displayedColumns.push(column);\n              tableMeta.push({'key':column, 'title':setting.title});\n      });\n      return {'displayedColumns':displayedColumns, 'tableMeta':tableMeta};\n  }\n  \n  /**\n   * Create the unix timestamp from\n   * 1. Start date / start date and time\n   * 2. End date / end date and time\n   * Interval will be created according to the selected report type.\n   **/\n  function getTimeData(iData){\n      unixList=[];\n      if(iData.reportType.toLowerCase()=='monthly'||iData.reportType.toLowerCase()=='yearly'){\n            startDate=new Date(iData.startDate);\n            endDate=new Date(iData.endDate);\n            startMonth=startDate.getMonth()+1;\n            startYear=startDate.getFullYear();\n            endMonth=endDate.getMonth()+1;\n            endYear=endDate.getFullYear();\n            firstIterate=true;\n            if(iData.reportType.toLowerCase()=='monthly'){\n                for(;startYear<=endYear;startYear++){\n                    em=12;\n                    if(firstIterate){\n                        firstIterate=false;\n                    }else{\n                        startMonth=1;\n                    }\n                    if(startYear==endYear){\n                        em=endMonth;\n                    }\n                    for(;startMonth<=em;startMonth++){\n                        s=startMonth>9?startMonth:'0'+startMonth;\n                        sUnix=new Date(s+' 01 '+startYear+' '+self.ctx.settings.defaultStartTime).getTime();\n                        eUnix=new Date(s+' '+new Date(startYear, startMonth, 0).getDate()+' '+startYear+' '+self.ctx.settings.defaultEndTime).getTime();\n                        interval=eUnix-sUnix;\n                        unixList.push({'startUnix': sUnix, 'endUnix':eUnix, 'interval':interval});\n                    }\n                }\n            }else{\n                startYear=startDate.getFullYear();\n                endYear=endDate.getFullYear()\n                for(;startYear<=endYear;startYear++){\n                    sUnix=new Date('01 01 '+startYear+' '+self.ctx.settings.defaultStartTime).getTime();\n                    eUnix=new Date('12 31 '+startYear+' '+self.ctx.settings.defaultEndTime).getTime();\n                    interval=eUnix-sUnix;\n                    unixList.push({'startUnix': sUnix, 'endUnix': eUnix, 'interval': interval});\n                }\n            }\n            return unixList;\n      }else{\n            endDate=moment(new Date(iData.endDate)).format('YYYY-MM-DD');\n            startDate=moment(new Date(iData.startDate)).format('YYYY-MM-DD');\n            startUnix=iData.reportType.toLowerCase()=='hourly'||iData.reportType.toLowerCase()=='interval'?new Date(startDate+' '+iData.startTime).getTime():new Date(startDate+' '+self.ctx.settings.defaultStartTime).getTime();\n            \n            endUnix=iData.reportType.toLowerCase()=='hourly'||iData.reportType.toLowerCase()=='interval'?new Date(endDate+' '+iData.endTime).getTime():new Date(endDate+' '+self.ctx.settings.defaultEndTime).getTime();\n            if(new Date(moment(new Date()).format('YYYY-MM-DD ')+self.ctx.settings.defaultStartTime).getTime()>=new Date(moment(new Date()).format('YYYY-MM-DD ')+self.ctx.settings.defaultEndTime).getTime()){\n                endUnix=endUnix+(iData.reportType.toLowerCase()=='daily'?24*60*60*1000:0);\n            }\n            interval=iData.reportType.toLowerCase()=='interval'?endUnix-startUnix:iData.reportType.toLowerCase()=='hourly'?60*60*1000:24*60*60*1000;\n            \n            return {'startUnix':startUnix, 'endUnix':endUnix, 'interval':interval};\n      }\n  }\n  \n  \n  /**\n   * Formatting the settings data and make them list according to the \n   * aggregations. Each aggregation contains the key also\n   **/\n  function getFormattedSettingsData(iData){\n      settingsData=iData.devices.length==1?self.ctx.settings.singleDeviceTableColumn:self.ctx.settings.multiDeviceOption=='B'?self.ctx.settings.multiDeviceTableColumn:self.ctx.settings.singleDeviceTableColumn;\n        aggregations=[];\n        settingsData.forEach(setting=>{\n            if(aggregations.indexOf(setting.aggression)<0){\n                aggregations.push(setting.aggression);\n            }\n        });\n        requestParams=[];\n        if(aggregations.length>0){\n            aggregations.forEach(aggregation=>{\n                const param={agg:aggregation, key:[], decimalPlaces:[]};\n                for(let index=0;index<settingsData.length;index++){\n                    if(aggregation==settingsData[index].aggression){\n                        param.key.push(settingsData[index].key);\n                        param.decimalPlaces.push(settingsData[index].decimalPlace?settingsData[index].decimalPlace:0);\n                    }\n                }\n                requestParams.push(param);\n            });\n        }\n        return requestParams;\n  }\n  \n  \n  /**\n   * This will handle all http requests\n   * Basically it will a recursive function and function will call \n   * until the length meet to conditional statement\n   **/\n   function handleHttpRequests(requestParams, length, timeData, dataStack, progressInitVal, progressEndVal){\n      $scope.progressPercent=Math.ceil((progressInitVal/progressEndVal)*100);\n        self.ctx.detectChanges();\n        progressInitVal=progressInitVal+1;\n       if(length>=0){\n           request=http.get(baseUrl+'api/plugins/telemetry/'+latestData[0].datasource.entity.id.entityType+'/'+jsonInput.devices[0].id+'/values/timeseries?keys='+requestParams[length].key+'&endTs='+timeData.endUnix+'&startTs='+timeData.startUnix+'&interval='+timeData.interval+'&agg='+requestParams[length].agg, {headers:{\"Content-Type\":\"application/json\",\"X-Authorization\":\"Bearer \"+token}}\n                );\n            request.subscribe(response=>{\n                d={};\n                d['agg']=requestParams[length].agg;\n                d['key']=requestParams[length].key;\n                d['response']=response;\n                d['decimalPlace']=requestParams[length].decimalPlaces;\n                dataStack.push(d);\n                handleHttpRequests(requestParams, length-1, timeData, dataStack, progressInitVal, progressEndVal);\n            });\n       }else{\n           AnalysisData(dataStack, timeData);\n       }\n   }\n   \n   \n   /**\n    * Handle http request for single device with report type monthly and yearly.\n    * As every month and year will not contain same timeframe, we need to separate them from default.\n    * It will handle a single device report request for monthly and yearly basis\n    **/\n    function handleMonthAndYearlyHttpRequest(requestParams, length, timeData, dataStack, progressInitVal, progressEndVal){\n        $scope.progressPercent=Math.ceil((progressInitVal/progressEndVal)*100);\n        self.ctx.detectChanges();\n        progressInitVal=progressInitVal+1;\n        if(length>=0){\n          request=http.get(baseUrl+'api/plugins/telemetry/'+latestData[0].datasource.entity.id.entityType+'/'+jsonInput.devices[0].id+'/values/timeseries?keys='+requestParams[length].param.key+'&endTs='+requestParams[length].time.endUnix+'&startTs='+requestParams[length].time.startUnix+'&interval='+requestParams[length].time.interval+'&agg='+requestParams[length].param.agg, {headers:{\"Content-Type\":\"application/json\",\"X-Authorization\":\"Bearer \"+token}}\n                );\n            request.subscribe(response=>{\n                d={};\n                d['agg']=requestParams[length].param.agg;\n                d['key']=requestParams[length].param.key;\n                d['decimalPlace']=requestParams[length].param.decimalPlaces;\n                d['time']=requestParams[length].time.startUnix+(requestParams[length].time.interval/2);\n                d['response']=response;\n                \n                dataStack.push(d);\n                handleMonthAndYearlyHttpRequest(requestParams, length-1, timeData, dataStack, progressInitVal, progressEndVal);\n            });\n      }else{\n          AnalysisMonthAndYearData(dataStack);\n      }\n    }\n    \n    \n    \n    /**\n     * Creating table visible modeled data from raw data found from http\n     * request and response\n     **/\n     function AnalysisMonthAndYearData(dataStack){\n         timeList=[];\n         preFinalData=[];\n         dataStack.forEach(singleData=>{\n             sresp=singleData.response;\n             if(timeList.indexOf(singleData.time)==-1){\n                 timeList.push(singleData.time);\n                 d={};\n                 d['Date']=dateTimeConversion(singleData.time);\n                 if(Object.keys(sresp).length>0){\n                     for(let key in sresp){\n                         dIndex=singleData.key.indexOf(key);\n                         dataKey=singleData.agg.charAt(0).toUpperCase() + singleData.agg.slice(1).toLowerCase()+key.charAt(0).toUpperCase() + key.slice(1).toLowerCase();\n                         d[dataKey]=Number(sresp[key][0].value).toFixed(singleData.decimalPlace[dIndex]>-1?singleData.decimalPlace[dIndex]:0);\n                     }\n                 }else{\n                     singleData.key.forEach(k=>{\n                         dIndex=singleData.key.indexOf(k);\n                         dataKey=singleData.agg.charAt(0).toUpperCase() + singleData.agg.slice(1).toLowerCase()+k.charAt(0).toUpperCase() + k.slice(1).toLowerCase();\n                         d[dataKey]=$scope.settings?.emptyDataField;\n                     });\n                 }\n                 preFinalData.push(d);\n             }else{\n                 index=timeList.indexOf(singleData.time);\n                 if(Object.keys(sresp).length>0){\n                     for(let key in sresp){\n                         dIndex=singleData.key.indexOf(key);\n                         dataKey=singleData.agg.charAt(0).toUpperCase() + singleData.agg.slice(1).toLowerCase()+key.charAt(0).toUpperCase() + key.slice(1).toLowerCase();\n                         preFinalData[index][dataKey]=Number(sresp[key][0].value).toFixed(singleData.decimalPlace[dIndex]>-1?singleData.decimalPlace[dIndex]:0);\n                     }\n                 }else{\n                     singleData.key.forEach(k=>{\n                         dIndex=singleData.key.indexOf(k);\n                         dataKey=singleData.agg.charAt(0).toUpperCase() + singleData.agg.slice(1).toLowerCase()+k.charAt(0).toUpperCase() + k.slice(1).toLowerCase();\n                         preFinalData[index][dataKey]=$scope.settings?.emptyDataField;\n                     });\n                 }\n             }\n         });\n         handleDomElements(preFinalData.reverse());\n     }\n    \n   /**\n    * This will handle multi-devices https request with all aggregation\n    * level. this will be a recursive function\n    **/\n   function handleMultiDeviceHttpRequests(requests,length, timeData, dataStack, progressInitVal, progressEndVal){\n       $scope.progressPercent=Math.ceil((progressInitVal/progressEndVal)*100);\n        self.ctx.detectChanges();\n        progressInitVal=progressInitVal+1;\n       if(length>=0){\n          req=http.get(baseUrl+'api/plugins/telemetry/'+latestData[0].datasource.entity.id.entityType+'/'+requests[length].device.id+'/values/timeseries?keys='+requests[length].param.key+'&endTs='+timeData.endUnix+'&startTs='+timeData.startUnix+'&interval='+timeData.interval+'&agg='+requests[length].param.agg,\n                        {headers:{\"Content-Type\":\"application/json\",\"X-Authorization\":\"Bearer \"+token}}\n                        )\n            req.subscribe(response=>{\n                dataStack.push({\n                    device: requests[length].device,\n                    param: requests[length].param,\n                    response:response\n                });\n                handleMultiDeviceHttpRequests(requests, length-1, timeData, dataStack, progressInitVal, progressEndVal);\n            })\n       }else{\n           AnalysisMultiDeviceData(dataStack);\n       }\n   }\n   function AnalysisData(dataStack, timeData){\n        unixList=[];\n        let t=timeData.startUnix+(timeData.interval/2);\n        for(;t<= timeData.endUnix; t=t+timeData.interval){\n            unixList.push(t);\n        }\n        data=[];\n        dataStack.forEach(d=>{\n            res=d.response;\n            resp={};\n            if(Object.keys(res).length){\n                for(let key in res){\n                    r=[];\n                    unixList.forEach(unix=>{\n                        q=res[key].find(i=>i.ts==unix);\n                        if(typeof(q)=='object'){\n                            r.push(q);\n                        }else{\n                            r.push({\n                               'ts':unix,\n                               'value':$scope.settings?.emptyDataField\n                            });\n                        }\n                    });\n                    resp[key]=r;\n                }\n            }else{\n                r=[];\n                keys=d.key;\n                unixList.forEach(unix=>{\n                    r.push({'ts':unix, 'value':$scope.settings?.emptyDataField});\n                });\n                keys.forEach(key=>{\n                    resp[key]=r;\n                });\n            }\n            data.push({\n                agg:d.agg,\n                key:d.key,\n                decimalPlace:d.decimalPlace,\n                response:resp,\n            });\n        });\n        generateFinalOutput(data);\n   }\n   \n   \n   function AnalysisMultiDeviceData(dataStack){\n       tableData=[];\n       dataStack.forEach(data=>{\n           d={}\n           q=tableData.find(fData=>fData.DeviceId==data.device.id);\n           if(typeof(q)=='object'){\n               res=data.response;\n               if(Object.keys(res).length>0){\n                   for(let key in res){\n                       dIndex=data.param.key.indexOf(key);\n                       dataKey=data.param.agg.charAt(0).toUpperCase() + data.param.agg.slice(1).toLowerCase()+key.charAt(0).toUpperCase() + key.slice(1).toLowerCase();\n                       q[dataKey]=Number(res[key][0].value).toFixed(data.param.decimalPlaces[dIndex]>-1?data.param.decimalPlaces[dIndex]:0);\n                   }\n               }else{\n                   data.param.key.forEach(k=>{\n                       dIndex=data.param.key.indexOf(k);\n                       dataKey=data.param.agg.charAt(0).toUpperCase() + data.param.agg.slice(1).toLowerCase()+k.charAt(0).toUpperCase() + k.slice(1).toLowerCase();\n                       q[dataKey]=Number(0).toFixed(data.param.decimalPlaces[dIndex]>-1?data.param.decimalPlaces[dIndex]:0);\n                   })\n               }\n           }else{\n               d['DeviceName']=data.device.name;\n               d['DeviceId']=data.device.id;\n               res=data.response;\n               if(Object.keys(res).length>0){\n                   for(let key in res){\n                       dIndex=data.param.key.indexOf(key);\n                       dataKey=data.param.agg.charAt(0).toUpperCase() + data.param.agg.slice(1).toLowerCase()+key.charAt(0).toUpperCase() + key.slice(1).toLowerCase();\n                       d[dataKey]=Number(res[key][0].value).toFixed(data.param.decimalPlaces[dIndex]>-1?data.param.decimalPlaces[dIndex]:0);\n                   }\n               }else{\n                   data.param.key.forEach(k=>{\n                       dIndex=data.param.key.indexOf(k);\n                       dataKey=data.param.agg.charAt(0).toUpperCase() + data.param.agg.slice(1).toLowerCase()+k.charAt(0).toUpperCase() + k.slice(1).toLowerCase();\n                       d[dataKey]=Number(0).toFixed(data.param.decimalPlaces[dIndex]>-1?data.param.decimalPlaces[dIndex]:0);\n                   });\n               }\n               tableData.push(d);\n           }\n       });\n       if(tableData.length>0){\n           finalData=[];\n           tableData.forEach(dt=>{\n                tmpData={};\n                generateTableData(jsonInput).displayedColumns.forEach(tdata=>{\n                    if(Object.keys(dt).indexOf(tdata)<0){\n                        tmpData[tdata]=0.00;\n                    }else{\n                        tmpData[tdata]=dt[tdata];\n                    }\n                });\n                finalData.push(tmpData);\n            });\n            \n            handleDomElements(finalData);\n       }\n   }\n   \n   /**\n    * This function will generate table data to show inside the table\n    * rendered in html\n    **/\n    function generateFinalOutput(finalData){\n        tableData=[];\n        first=true;\n        finalData.forEach(final=>{\n            response=final.response;\n            for(let key in response){\n                dIndex=final.key.indexOf(key);\n                dataKey=final.agg.charAt(0).toUpperCase() + final.agg.slice(1).toLowerCase()+key.charAt(0).toUpperCase() + key.slice(1).toLowerCase();\n                if(first){\n                    first=false;\n                    for(let i=0;i<response[key].length;i++){\n                        d={};\n                        d['Date']=dateTimeConversion(response[key][i].ts);\n                        d['ts']=response[key][i].ts;\n                        d[dataKey]=response[key][i].value==$scope.settings.emptyDataField?response[key][i].value:Number(response[key][i].value).toFixed(final.decimalPlace[dIndex]>=0?final.decimalPlace[dIndex]:0);\n                        tableData.push(d);\n                    }\n                }else{\n                    for(let i=0;i<response[key].length;i++){\n                        tableData[i][dataKey]=response[key][i].value==$scope.settings.emptyDataField? response[key][i].value : Number(response[key][i].value).toFixed(final.decimalPlace[dIndex]>=0?final.decimalPlace[dIndex]:0);\n                    }\n                }\n            }\n        });\n        finalData=[];\n        tableData.forEach(dt=>{\n            tmpData={};\n            generateTableData(jsonInput).displayedColumns.forEach(tdata=>{\n                if(Object.keys(dt).indexOf(tdata)<0){\n                    tmpData[tdata]=$scope.settings?.emptyDataField;\n                }else{\n                    tmpData[tdata]=dt[tdata];\n                }\n            });\n            finalData.push(tmpData);\n        });\n        handleDomElements(finalData);\n    }\n    \n    /**\n     * Status data for multi device option.\n     * status data comes from the defaultSubscription.data\n     **/\n    function handleStatusData(jsonInput){\n        statusColumn=self.ctx.settings.statusTableColumn;\n        keys=['deviceName'];\n        tableMeta=[{'title':'Device name', 'key':'deviceName'}];\n        data=[];\n        statusColumn.forEach(col=>{\n            c=latestData.filter(lData=>lData.dataKey.name==col.key);\n            if(c.length>0){\n                if(keys.indexOf(c[0].dataKey.name)==-1){\n                    keys.push(c[0].dataKey.name);\n                    tableMeta.push({\n                        'title': c[0].dataKey.label,\n                        'key': c[0].dataKey.name\n                    });\n                }\n            }else{\n                keys.push(col.key);\n                tableMeta.push({\n                        'title': col.key+' (invalid key)',\n                        'key': col.key\n                    });\n            }\n        });\n        latestData.forEach(x=>{\n            if(statusColumn.filter(col=>col.key==x.dataKey.name).length>0){\n                data.push({\n                    \"deviceName\":x.datasource.name,\n                    \"dataKey\":x.dataKey.name,\n                    \"data\":Number(x.data[0][1]).toFixed(2),\n                });\n            }\n        });\n        tableData=[];\n        for(i=0;i<jsonInput.devices.length;i++){\n            q={};\n            q.deviceName=jsonInput.devices[i].name;\n            data.forEach(sd=>{\n                if(jsonInput.devices[i].name==sd.deviceName){\n                    q[sd.dataKey]=sd.data;\n                }\n            });\n            tableData.push(q);\n        }\n        \n        l=[];\n        statusColumn.forEach(col=>l.push(col.key));\n        if(l.length>0){\n            l.forEach(col=>{\n                tKeys=Object.keys(tableData[0]);\n                for(let x=0;x<tableData.length;x++){\n                    if(tKeys.indexOf(col)==-1){\n                        tableData[x][col]='Invalid';\n                    }\n                }\n            });\n        }\n        $scope.displayedColumns=keys;\n        $scope.tableMeta=tableMeta;\n        handleDomElements(tableData);\n    }\n    \n    \n    /**\n     * Controlling the html DOM elements using this function\n     * disable progress, show table, changed table data will be updated\n     * from here\n     **/\n    function handleDomElements(tableData){\n        $scope.tableData=tableData;\n        $scope.isDataLoaded=true;\n        self.ctx.detectChanges();\n    }\n  \n  /**\n   * Exporting the searched data in csv format.\n   * It will take query information and then place the searched data\n   **/\n    $scope.exportAsCSV=function(){\n        const items = $scope.tableData\n        const replacer = (key, value) => value === null ? '' : value // specify how you want to handle null values here\n        const header = Object.keys(items[0]);\n        let csv = items.map(row => header.map(fieldName => JSON.stringify(row[fieldName], replacer)).join(','));\n        cHeader=[];\n        tMeta= $scope.tableMeta;\n        header.forEach(h=>{\n            if(tMeta.filter(data=>data.key==h).length>0){\n                cHeader.push(tMeta.filter(data=>data.key==h)[0].title);\n            }\n        });\n        csv.unshift(cHeader.join(','));\n        csv.unshift([].join(','));\n        if(jsonInput.reportType.toLowerCase()!='status'){\n            end=$scope.showDateWithFormat($scope.hsTimeData.end, 'end')\n            csv.unshift(['End time', '\"'+end+'\"'].join(','));\n            start=$scope.showDateWithFormat($scope.hsTimeData.start, 'start')\n            csv.unshift(['Start time', '\"'+start+'\"'].join(','));\n        }\n        csv.unshift(['Report Type', jsonInput.reportType+' '+self.ctx.settings.typeSuffix].join(','));\n        dv=jsonInput.devices.length>1?self.ctx.settings.multiReportText!=undefined?self.ctx.settings.multiReportText:'Multiple devices':jsonInput.devices[0].name\n        csv.unshift([self.ctx.settings?.deviceTitle==undefined?'Device':self.ctx.settings.deviceTitle, dv].join(','));\n        csv = csv.join('\\r\\n')\n\n        let link = document.createElement(\"a\");    \n        link.id=\"lnkDwnldLnk\";\n        document.body.appendChild(link);\n        blob = new Blob([csv], { type: 'text/csv' }); \n        let csvUrl = window.webkitURL.createObjectURL(blob);\n        let filename = ($scope.settings?.csvFileName?$scope.settings?.csvFileName:'report')+moment(new Date()).format('_DD_MM_YYYY_hh_mm_A')+'.csv';\n        jQuery(\"#lnkDwnldLnk\")\n        .attr({\n            'download': filename,\n            'href': csvUrl\n        });\n        jQuery('#lnkDwnldLnk')[0].click();\n        document.body.removeChild(link);\n    }\n    \n    \n    /**\n     * Convert the unix format to human readable date time format\n     **/\n    function dateTimeConversion(dateData){\n      dateData=new Date(dateData);\n      return jsonInput.reportType.toLowerCase()=='hourly'?moment(dateData).format($scope.settings.dateFormatForHourly):jsonInput.reportType.toLowerCase()=='daily'?moment(dateData).format($scope.settings.dateFormatForDaily):jsonInput.reportType.toLowerCase()=='monthly'?moment(dateData).format($scope.settings.dateFormatForMonthly):moment(dateData).format($scope.settings.dateFormatForYearly);\n    }\n    \n    $scope.showTimeInHFormat=function(dt, tm){\n        return moment(moment(dt).format('YYYY-MM-DD ')+tm).format('hh:mm A');\n    }\n    $scope.showDateWithFormat=function(dt, pos){\n        if(pos=='start'){\n            return moment(dt).format($scope.settings.dateFormat);\n        }else{\n            const timeData=getTimeData(jsonInput);\n            if(Array.isArray(timeData)){\n                return moment(new Date(timeData[timeData.length-1].endUnix)).format($scope.settings.dateFormat);\n                \n            }else{\n                return moment(new Date(timeData.endUnix)).format($scope.settings.dateFormat);\n            }\n        }\n    }\n    $scope.viewTrend=function(event, action){\n        trendKeys=[];\n        $scope.tableMeta.forEach(tm=>{\n            if(tm.key!='Date'){\n                trendKeys.push({key: tm.key, label: tm.title});\n            }\n        });\n        localStorage.setItem('reportData', JSON.stringify({keys: trendKeys, data:$scope.tableData}));\n        self.ctx.actionsApi.handleWidgetAction(event, action);\n    }\n    \n    /***\n     * Handle the modify search button.\n     * It should open a pop up window showing all the devices with selected.\n     * Template will be binded to the popup.\n     * */\n     template=`\n        <div aria-label=\"Info\" id=\"popup-container\" ngStyle.xs=\"width: 100%\" ngStyle.sm=\"width: 100%\" style=\"width: 700px\">\n        <form *ngIf=\"form\" [formGroup]=\"form\" (submit)=\"applyFilter()\" #dataForm=\"ngForm\">\n            <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                <div>Modify search</div>\n                <span fxFlex></span>\n                <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n            </mat-toolbar>\n            <div mat-dialog-content fxLayout fxLayout.sm=\"column\" fxLayout.xs=\"column\" style=\"padding: 0;\">\n                <div fxFlex=\"60\" fxFlex.sm=\"100\" fxFlex.xs=\"100\" style=\"overflow: auto;\">\n                    <mat-table *ngIf=\"tablePagination && data.data\" [dataSource]=\"data.data.slice(tablePagination.getFrom(), tablePagination.getTo())\" style=\"padding: 10px;max-height: 65vh\">\n                    \n                        <ng-container matColumnDef=\"select\">\n                            <mat-header-cell *matHeaderCellDef>\n                                <div fxLayout fxLayoutAlign=\"space-between center\">\n                                    <mat-checkbox (change)=\"selectAllDevice($event)\" [checked]=\"selectedDevice.length==data.data.length\" [indeterminate]=\"selectedDevice.length!=0 && selectedDevice.length!=data.data.length\"> Select all </mat-checkbox>\n                                    <div>\n                                        <mat-form-field floatLabel=\"never\" *ngIf=\"showSearch\">\n                                            <mat-icon matPrefix >search</mat-icon>\n                                            <input matInput (keyup)=\"applySearch($event)\" placeholder=\"Search\">\n                                        </mat-form-field>\n                                        <button mat-icon-button type=\"button\" (click)=\"showSearch=!showSearch\"><mat-icon *ngIf=\"!showSearch\">search</mat-icon><mat-icon *ngIf=\"showSearch\">close</mat-icon></button>\n                                    </div>\n                                </div>  \n                            </mat-header-cell>\n                            <mat-cell *matCellDef=\"let row\">\n                                <mat-checkbox class=\"example-margin\" (change)=\"selectDevices($event, row)\" [checked]=\"isChecked(row)\">\n                                    {{row.name}}\n                                </mat-checkbox>\n                            </mat-cell>\n                        </ng-container>\n                        <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\n                        <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n                    </mat-table>\n                    <mat-paginator\n                        [length]=\"data.data.length\"\n                        [pageSize]=\"tablePagination.pageSize\"\n                        [pageSizeOptions]=\"tablePagination.pageSizeOptions\"\n                        (page)=\"tablePagination.handler($event)\"\n                        showFirstLastButtons=\"true\">\n                    </mat-paginator>\n                </div>\n                <div fxFlex=\"40\" fxFlex.sm=\"100\" fxFlex.xs=\"100\" fxLayout=\"column\" fxLayout.xs=\"column\" fxLayout.sm=\"column\" fxLayoutGap=\"10px\"  style=\"padding: 10px;\">\n                    <div>\n                        <mat-form-field style=\"width: 100%\">\n                          <mat-label>Report type</mat-label>\n                          <mat-select formControlName=\"reportType\" (selectionChange)=\"f($event)\">\n                            <mat-option *ngFor=\"let rType of reportTypes\" [value]=\"rType\">\n                              {{rType}}\n                            </mat-option>\n                          </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"form.value.reportType=='Hourly' || form.value.reportType=='Interval'\">\n                        <mat-form-field style=\"width: 100%\">\n                          <mat-label>Select Start Time</mat-label>\n                          <input matInput type=\"time\" formControlName=\"startTime\">\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"form.value.reportType=='Hourly'||form.value.reportType=='Daily' || form.value.reportType=='Interval'\">\n                        <mat-form-field style=\"width: 100%\">\n                          <mat-label>Select Start Date</mat-label>\n                          <input matInput [matDatepicker]=\"picker\" formControlName=\"startDate\" [max]=\"form.value.endDate\" (click)=\"openDatePicker(picker)\" >\n                          <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                          <mat-datepicker #picker></mat-datepicker>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"form.value.reportType=='Hourly' || form.value.reportType=='Interval'\">\n                        <mat-form-field style=\"width: 100%\">\n                          <mat-label>Select End Time</mat-label>\n                          <input matInput type=\"time\" formControlName=\"endTime\">\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"form.value.reportType=='Hourly'||form.value.reportType=='Daily' || form.value.reportType=='Interval'\">\n                        <mat-form-field style=\"width: 100%\">\n                          <mat-label>Select End Date</mat-label>\n                          <input matInput [matDatepicker]=\"picker2\" formControlName=\"endDate\" [min]=\"form.value.startDate\" [max]=\"today\" (click)=\"openDatePicker(picker2)\">\n                          <mat-datepicker-toggle matSuffix [for]=\"picker2\"></mat-datepicker-toggle>\n                          <mat-datepicker #picker2></mat-datepicker>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"form.value.reportType=='Monthly'\">\n                        <mat-form-field style=\"width: 100%\">\n                            <mat-label>Start Month</mat-label>\n                                <input matInput (click)=\"openDatePicker(startPicker)\" [(ngModel)]=\"model.startDate\" name=\"startDate\" required>\n                                <input matInput [matDatepicker]=\"startPicker\" type=\"hidden\">\n                                <mat-datepicker-toggle matSuffix [for]=\"startPicker\"> </mat-datepicker-toggle>\n                                <mat-datepicker #startPicker startView=\"year\" (monthSelected)=\"monthOrYearSelected($event, startPicker, 'YYYY-MM', 'start')\" id=\"mnthStart\">\n                            </mat-datepicker>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"form.value.reportType=='Monthly'\">\n                        <mat-form-field style=\"width: 100%\">\n                            <mat-label>End Month</mat-label>\n                            <input matInput (click)=\"openDatePicker(endPicker)\" [(ngModel)]=\"model.endDate\" name=\"endDate\" required>\n                            <input matInput [matDatepicker]=\"endPicker\" type=\"hidden\">\n                            <mat-datepicker-toggle matSuffix [for]=\"endPicker\"></mat-datepicker-toggle>\n                            <mat-datepicker #endPicker startView=\"year\" (monthSelected)=\"monthOrYearSelected($event, endPicker, 'YYYY-MM', 'end')\" id=\"mnthEnd\"> </mat-datepicker>\n                        </mat-form-field>\n                    </div>\n                    \n                    <div *ngIf=\"form.value.reportType=='Yearly'\">\n                        <mat-form-field style=\"width: 100%\">\n                            <mat-label>Start Year</mat-label>\n                                <input matInput (click)=\"openDatePicker(startPicker)\" [(ngModel)]=\"model.startDate\" name=\"startDate\" required>\n                                <input matInput [matDatepicker]=\"startPicker\" type=\"hidden\">\n                                <mat-datepicker-toggle matSuffix [for]=\"startPicker\"> </mat-datepicker-toggle>\n                                <mat-datepicker #startPicker startView=\"multi-year\" (yearSelected)=\"monthOrYearSelected($event, startPicker, 'YYYY', 'start')\" id=\"mnthStart\">\n                            </mat-datepicker>\n                        </mat-form-field>\n                    </div>\n                    <div *ngIf=\"form.value.reportType=='Yearly'\">\n                        <mat-form-field style=\"width: 100%\">\n                            <mat-label>End Year</mat-label>\n                            <input matInput (click)=\"openDatePicker(endPicker)\" [(ngModel)]=\"model.endDate\" name=\"endDate\" required>\n                            <input matInput [matDatepicker]=\"endPicker\" type=\"hidden\">\n                            <mat-datepicker-toggle matSuffix [for]=\"endPicker\"></mat-datepicker-toggle>\n                            <mat-datepicker #endPicker startView=\"multi-year\" (yearSelected)=\"monthOrYearSelected($event, endPicker, 'YYYY', 'end')\" id=\"mnthEnd\"> </mat-datepicker>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n            <div mat-dialog-actions align=\"end\">\n                <button mat-flat-button color=\"primary\">Apply Filter</button>\n            </div>\n        </form>\n        </div>\n            `;\n    $scope.modifySearchPopup=function(){\n        customDialog.customDialog(template, searchModificationController, {data: allDevices, jsonInput: jsonInput}).subscribe(\n            function(res) {\n                if (res) {\n                }\n            }\n        );\n    }\n    function searchModificationController(instance) {\n        instance.displayedColumns=['select'];\n        const dataBackup=instance.data.data;\n        instance.showSearch=false;\n        instance.searchVal='';\n        const tablePagination = {\n            pageIndex: 0,\n            pageSize: 10,\n            pageSizeOptions: [10, 20, 50, 100],\n            handler: (pagination) => {\n                const { pageIndex, pageSize } = pagination;\n                if (pageSize !== undefined) {\n                    tablePagination.pageSize = pageSize;\n                }\n                if (pageIndex !== undefined) {\n                    tablePagination.pageIndex = pageIndex;\n                }\n            },\n            getFrom: () => {\n                const { pageIndex, pageSize } = tablePagination;\n                return pageIndex * pageSize;\n            },\n            getTo: () => {\n                const { pageIndex, pageSize } = tablePagination;\n                return pageIndex * pageSize + pageSize;\n            }\n        };\n        instance.tablePagination=tablePagination;\n        instance.today=new Date();\n        instance.model={startDate:'', endDate: ''};\n        instance.selectedDevice=instance.data.jsonInput.devices;\n        instance.form=instance.fb.group({\n            reportType: [instance.data.jsonInput.reportType],\n            startTime:[instance.data.jsonInput.startTime],\n            startDate:[instance.data.jsonInput.startDate],\n            endTime:[instance.data.jsonInput.endTime],\n            endDate:[instance.data.jsonInput.endDate]\n        });\n        if(instance.data.jsonInput.reportType=='Monthly'||instance.data.jsonInput.reportType=='Yearly'){\n            instance.model={startDate:instance.data.jsonInput.startDate, endDate: instance.data.jsonInput.endDate};\n        }\n        instance.f=function(event){\n            instance.form.reset();\n            buildForm(event.value=='Hourly'||event.value=='Daily'?new Date():'');\n            instance.form.controls['reportType'].setValue(event.value);\n            self.ctx.detectChanges();\n            self.onResize();\n        }\n        function buildForm(endt){\n            today=new Date();\n            instance.form=instance.fb.group({\n                reportType: ['', instance.validators.required],\n                startDate: ['', instance.validators.required],\n                startTime: ['00:00', instance.validators.required],\n                endDate: [endt, instance.validators.required],\n                endTime: [today.getHours()+':'+(today.getMinutes()>9?today.getMinutes():'0'+today.getMinutes()), instance.validators.required]\n            });\n        }\n        if(instance.selectedDevice.length==1){\n            instance.reportTypes=['Hourly', 'Daily', 'Monthly', 'Yearly', 'Interval']\n        }else{\n            instance.reportTypes=['Interval']\n        }\n        instance.selectDevices=function(event, device){\n            if(event.checked){\n                instance.selectedDevice.push(device);\n            }else{\n                instance.selectedDevice=instance.selectedDevice.filter(rd=>rd.id!=device.id);\n            }\n            instance.selectedDevice.sort((a,b)=>{return a.name.localeCompare(b.name)});\n            if(instance.selectedDevice.length<=1){\n                instance.reportTypes=['Hourly', 'Daily', 'Monthly', 'Yearly', 'Interval']\n            }else{\n                instance.reportTypes=['Interval']\n            }\n        }\n        instance.selectAllDevice=function(event){\n            if(event.checked){\n                instance.selectedDevice=instance.data.data;\n            }else{\n                instance.selectedDevice=[];\n            }\n            instance.selectedDevice.sort((a,b)=>{return a.name.localeCompare(b.name)});\n            if(instance.selectedDevice.length<=1){\n                instance.reportTypes=['Hourly', 'Daily', 'Monthly', 'Yearly', 'Interval']\n            }else{\n                instance.reportTypes=['Interval']\n            }\n        }\n        instance.isChecked=function(device){\n            return instance.selectedDevice.findIndex(sd=>sd.id==device.id)!=-1;\n        }\n        instance.applySearch=function($event){\n            instance.data.data=[...dataBackup];\n            instance.data.data = instance.data.data.filter(ele=>{\n                if(ele.name.toLowerCase().search($event.target.value.toLowerCase())!=-1){\n                    return ele;\n                }\n            });\n            self.ctx.detectChanges();\n        }\n        instance.applyFilter=function(){\n            if(instance.form.valid && instance.selectedDevice.length){\n                ss=moment(moment(new Date(instance.form.value.startDate)).format('YYYY-MM-DD')+' '+instance.form.value.startTime).unix();\n                ee=moment(moment(new Date(instance.form.value.endDate)).format('YYYY-MM-DD')+' '+instance.form.value.endTime).unix();\n                if(ss>ee){\n                    self.ctx.showToast('error', 'Start datetime is greater than end datetime', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                    return;\n                }\n                jsonInput=instance.form.value;\n                jsonInput['devices']=instance.selectedDevice;\n                localStorage.setItem('report_data_format', JSON.stringify(jsonInput));\n                self.onInit();\n                instance.dialogRef.close(null);\n            }else{\n                if(instance.selectedDevice.length==0){\n                    self.ctx.showToast('warn', 'No device is selected', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                }else{\n                    self.ctx.showToast('warn', 'Invalid date time selection', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                }\n            }\n        }\n        instance.close = function (){\n            instance.dialogRef.close(null);\n        };\n        instance.openDatePicker=function(picker){\n            picker.open();\n        }\n        instance.monthOrYearSelected=function(eventData, dp, format, pos) {\n            if(pos=='start'){\n                instance.form.controls['startDate'].setValue(moment(eventData).format(format));\n            }else{\n                instance.form.controls['endDate'].setValue(moment(eventData).format(format));\n            }\n            dp.close();\n        }\n    }\n}\nself.actionSources = function() {\n     return {\n         'viewTrend': {name: 'View trend',multiple: false}\n     };\n }",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\n            \"singleDeviceTableColumn\"\n        ],\n        \"properties\": {\n            \"singleDeviceTableColumn\": {\n                \"type\": \"array\",\n                \"title\": \"Single Device Table Column\",\n                \"maxItems\": 20,\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\n                            \"title\": \"Title\",\n                            \"type\": \"string\"\n                        },\n                        \"key\": {\n                            \"title\": \"key\",\n                            \"type\": \"string\"\n                        },\n                        \"aggression\": {\n                            \"title\": \"aggression\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"MIN\",\n                                \"MAX\",\n                                \"AVG\",\n                                \"COUNT\",\n                                \"SUM\",\n                                \"INC\"\n                            ]\n                        },\n                        \"order\": {\n                            \"title\": \"Order\",\n                            \"type\": \"number\"\n                        },\n                        \"decimalPlace\": {\n                            \"title\": \"Decimal Place\",\n                            \"type\": \"number\"\n                        }\n                    },\n                    \"required\": [\n                        \"key\",\n                        \"aggression\"\n                    ]\n                }\n            },\n            \"multiDeviceOption\": {\n              \"title\": \"Multi Device Option\",\n              \"type\": \"string\"\n            },\n            \"multiDeviceTableColumn\": {\n                \"type\": \"array\",\n                \"title\": \"Multi-devices Table Column\",\n                \"maxItems\": 20,\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"title\": {\n                            \"title\": \"Title\",\n                            \"type\": \"string\"\n                        },\n                        \"key\": {\n                            \"title\": \"key\",\n                            \"type\": \"string\"\n                        },\n                        \"aggression\": {\n                            \"title\": \"aggression\",\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"MIN\",\n                                \"MAX\",\n                                \"AVG\",\n                                \"COUNT\",\n                                \"SUM\"\n                            ]\n                        },\n                        \"order\": {\n                            \"title\": \"Order\",\n                            \"type\": \"number\"\n                        },\n                        \"decimalPlace\": {\n                            \"title\": \"Decimal Place\",\n                            \"type\": \"number\"\n                        }\n                    },\n                    \"required\": [\n                        \"key\",\n                        \"aggression\"\n                    ]\n                }\n            },\n            \"statusTableColumn\": {\n                \"type\": \"array\",\n                \"title\": \"Status Table Column\",\n                \"maxItems\": 20,\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"key\": {\n                            \"title\": \"key\",\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"required\": [\n                        \"key\"\n                    ]\n                }\n            },\n            \"buttonBgColor\":{\n                \"title\":\"Button Background Color\",\n                \"type\":\"string\"\n            },\n            \"darkMode\":{\n                \"title\":\"Enable dark mode for input field\",\n                \"type\":\"boolean\"\n            },\n            \"buttonTxtColor\":{\n                \"title\":\"Button Text Color\",\n                \"type\":\"string\"\n            },\n            \"tableHeaderBgColor\":{\n                \"title\":\"Table Header Background Color\",\n                \"type\":\"string\"\n            },\n            \"tableHeaderTxtColor\":{\n                \"title\":\"Table Header Text Color\",\n                \"type\":\"string\"\n            },\n            \n            \"dialogBackgroundColor\": {\n                \"title\": \"Dialog background color\",\n                \"type\": \"string\"\n            },\n            \"dialogTextColor\": {\n                \"title\": \"Dialog text color\",\n                \"type\": \"string\"\n            },\n            \"multiReportText\":{\n                \"title\":\"Multi devices report text\",\n                \"type\":\"string\",\n                \"default\": \"Multi devices\"\n            },\n            \"deviceTitle\":{\n                \"title\":\"Device title\",\n                \"type\":\"string\",\n                \"default\": \"Device\"\n            },\n            \"typeSuffix\":{\n                \"title\":\"Report type suffix\",\n                \"type\":\"string\",\n                \"default\": \"Report\"\n            },\n            \"emptyDataField\":{\n                \"title\":\"Empty data field value\",\n                \"type\":\"string\",\n                \"default\": \"-\"\n            },\n            \"dateFormat\":{\n                \"title\":\"Date format\",\n                \"type\":\"string\",\n                \"default\": \"DD MMM, YYYY\"\n            },\n            \"dateFormatForHourly\":{\n                \"title\":\"Date format for hourly report\",\n                \"type\":\"string\",\n                \"default\": \"DD MMM, YYYY hh:00 A\"\n            },\n            \"dateFormatForDaily\":{\n                \"title\":\"Date format for daily report\",\n                \"type\":\"string\",\n                \"default\": \"DD MMM, YYYY\"\n            },\n            \"dateFormatForMonthly\":{\n                \"title\":\"Date format for monthly report\",\n                \"type\":\"string\",\n                \"default\": \"MMM, YYYY\"\n            },\n            \"dateFormatForYearly\":{\n                \"title\":\"Date format for yearly report\",\n                \"type\":\"string\",\n                \"default\": \"YYYY\"\n            },\n            \"defaultStartTime\":{\n                \"title\": \"Default start time\",\n                \"type\": \"string\",\n                \"default\": \"12:00:00 AM\"\n            },\n            \"defaultEndTime\":{\n                \"title\": \"Default end time\",\n                \"type\": \"string\",\n                \"default\": \"11:59:59 PM\"\n            },\n            \"csvFileName\":{\n                \"title\": \"CSV file name\",\n                \"type\": \"string\",\n                \"default\": \"syncross_report\"\n            }\n        }\n    },\n    \"form\": [\n        {\n        \"key\": \"singleDeviceTableColumn\",\n        \"add\": \"New\",\n        \"style\": {\n            \"add\": \"btn-success\"\n        },\n        \"items\": [\n            \"singleDeviceTableColumn[].title\",\n            \"singleDeviceTableColumn[].key\",\n            {\n                \"key\": \"singleDeviceTableColumn[].aggression\",\n                \"type\": \"select\",\n                \"titleMap\": [{\n                        \"name\": \"MIN\",\n                        \"value\": \"MIN\"\n                    },\n                    {\n                        \"name\": \"MAX\",\n                        \"value\": \"MAX\"\n                    },\n                    {\n                        \"name\": \"AVG\",\n                        \"value\": \"AVG\"\n                    },\n                    {\n                        \"name\": \"COUNT\",\n                        \"value\": \"COUNT\"\n                    },\n                    {\n                        \"name\": \"SUM\",\n                        \"value\": \"SUM\"\n                    }\n                ]\n            },\n            \"singleDeviceTableColumn[].order\",\n            \"singleDeviceTableColumn[].decimalPlace\"\n        ]\n    },\n    {\n            \"key\": \"multiDeviceOption\",\n            \"type\": \"radios\",\n            \"titleMap\": [{\n                    \"value\": \"A\",\n                    \"name\": \"Single Device Settings\"\n                },\n                {\n                    \"value\": \"B\",\n                    \"name\": \"Create New Settings\"\n                }\n                ]\n        },\n    {\n        \"condition\": \"model.multiDeviceOption === 'B'\",\n        \"key\": \"multiDeviceTableColumn\",\n        \"add\": \"New\",\n        \"style\": {\n            \"add\": \"btn-success\"\n        },\n        \"items\": [\n            \"multiDeviceTableColumn[].title\",\n            \"multiDeviceTableColumn[].key\",\n            {\n                \"key\": \"multiDeviceTableColumn[].aggression\",\n                \"type\": \"select\",\n                \"titleMap\": [{\n                        \"name\": \"MIN\",\n                        \"value\": \"MIN\"\n                    },\n                    {\n                        \"name\": \"MAX\",\n                        \"value\": \"MAX\"\n                    },\n                    {\n                        \"name\": \"AVG\",\n                        \"value\": \"AVG\"\n                    },\n                    {\n                        \"name\": \"COUNT\",\n                        \"value\": \"COUNT\"\n                    },\n                    {\n                        \"name\": \"SUM\",\n                        \"value\": \"SUM\"\n                    }\n                ]\n            },\n            \"singleDeviceTableColumn[].order\",\n            \"singleDeviceTableColumn[].decimalPlace\"\n        ]\n    },\n    {\n        \"key\": \"statusTableColumn\",\n        \"add\": \"New\",\n        \"style\": {\n            \"add\": \"btn-success\"\n        },\n        \"items\": [\n            \"statusTableColumn[].key\"\n        ]\n    },\n    {\n        \"key\":\"darkMode\",\n        \"type\":\"checkbox\"\n    },\n    {\n        \"key\":\"buttonBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"buttonTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"dialogBackgroundColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"dialogTextColor\",\n        \"type\":\"color\"\n    },\n    \"multiReportText\",\n    \"deviceTitle\",\n    \"typeSuffix\",\n    \"emptyDataField\",\n    \"dateFormat\",\n    \"dateFormatForHourly\",\n    \"dateFormatForDaily\",\n    \"dateFormatForMonthly\",\n    \"dateFormatForYearly\",\n    \"defaultStartTime\",\n    \"defaultEndTime\",\n    \"csvFileName\"]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#ffffff\",\"color\":\"rgba(0,0,0,0.87)\",\"padding\":\"8px\",\"settings\":{\"multiDeviceOption\":\"A\",\"singleDeviceTableColumn\":[{\"aggression\":\"MIN\",\"title\":\"voltage\",\"key\":\"voltage\"}],\"buttonBgColor\":\"#67d7b1\",\"buttonTxtColor\":\"#000000\",\"tableHeaderBgColor\":\"#f0f0f0\",\"darkMode\":true,\"dialogBackgroundColor\":\"#1d1d1d\",\"dialogTextColor\":\"#ffffff\",\"statusTableColumn\":[{\"key\":\"voltage\"},{\"key\":\"current\"},{\"key\":\"power\"}],\"multiReportText\":\"Multiple\",\"deviceTitle\":\"Station\",\"typeSuffix\":\"Report\",\"emptyDataField\":\"-\",\"dateFormat\":\"DD MMM, yyyy\",\"dateFormatForMonthly\":\"MMM, YYYY\",\"tableHeaderTxtColor\":\"#000000\",\"defaultStartTime\":\"12:00:00 AM\",\"defaultEndTime\":\"11:59:59 PM\"},\"title\":\"Report view\",\"showTitleIcon\":false,\"iconColor\":\"rgba(255,255,255,0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"showLegend\":false}"
      }
    },
    {
      "alias": "report_view_energy_view_vertical_device",
      "name": "Consumption Report",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9.5,
        "sizeY": 4,
        "resources": [],
        "templateHtml": "<div class=\"satl-widget-report\" style=\"overflow: auto;height: 100%;width:100%\">\n    <div class=\"report-header\" style=\"line-height: 30px;position: relative;\" *ngIf=\"isDataLoaded\">\n        <div class=\"report-header-content\">\n            <div fxLayout *ngIf=\"jsonInput\">\n                <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\"><span *ngIf=\"settings?.deviceTitle!=undefined\">{{settings.deviceTitle}}</span><span *ngIf=\"settings?.deviceTitle==undefined\">Device</span></div>\n                <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\"><span *ngIf=\"jsonInput.devices.length==1\">{{jsonInput?.devices[0].name}}</span><span *ngIf=\"jsonInput.devices.length>1\">{{settings?.multiReportText}}</span></div>\n            </div>\n            <div fxLayout *ngIf=\"jsonInput\">\n                <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">Report type</div>\n                <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\">{{jsonInput?.reportType}} <span *ngIf=\"settings?.typeSuffix!=undefined\">{{settings.typeSuffix}}</span></div>\n            </div>\n            <div fxLayout *ngIf=\"jsonInput && settings?.unitKey!=undefined\">\n                <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">{{settings.unitKey}}</div>\n                <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\">{{settings.unitValue}}</div>\n            </div>\n    \n            <div fxLayout *ngIf=\"jsonInput && jsonInput.reportType!='Status'\">\n                <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">Start date</div>\n                <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\">\n                    <span>{{showDateWithFormat(hsTimeData?.start, \"start\")}}</span>\n                </div>\n            </div>\n            <div fxLayout *ngIf=\"jsonInput && jsonInput.reportType!='Status'\">\n                <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">End date</div>\n                <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\"><span>{{showDateWithFormat(hsTimeData?.end, \"end\")}}</span></div>\n            </div>\n    \n            <div fxLayout *ngIf=\"isDataLoaded\">\n                <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">\n                    Export\n                </div>\n                <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\">\n                    <a (click)=\"exportAsCSV()\">CSV</a>\n                </div>\n            </div>\n            <div fxLayout *ngIf=\"isDataLoaded && actionDescriptor.length\">\n                <div fxFlex=\"16.66\" fxFlex.sm=\"20\" fxFlex.xs=\"40\">\n                    View trend\n                </div>\n                <div fxFlex=\"83.33\" fxFlex.sm=\"80\" fxFlex.xs=\"60\">\n                    <a (click)=\"viewTrend($event, actionDescriptor[0])\">Open</a>\n                </div>\n            </div>\n            <div class=\"modify-search\">\n                <button mat-flat-button color=\"accent\" (click)=\"modifySearchPopup()\">Modify search</button>\n            </div>\n        </div>\n    </div>\n<div *ngIf=\"isDataLoaded\" class=\"report-content\">\n    <mat-table [dataSource]=\"tableData\" id=\"reportTable\"\n        style=\"background-color:inherit;\">\n        <ng-container *ngFor=\"let column of tableMeta\"\n            [matColumnDef]=\"column.key\">\n            <mat-header-cell *matHeaderCellDef\n                [style.min-width]=\"column.key=='Date'?'150px':'auto'\"\n                [style.background-color]=\"settings?.tableHeaderBgColor\"\n                [style.color]=\"settings?.tableHeaderTxtColor\">\n                {{column.title}}\n            </mat-header-cell>\n            <mat-cell *matCellDef=\"let element\"\n                style=\"color:inherit;\">\n                {{element[column.key]}}\n            </mat-cell>\n        </ng-container>\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"\n            [style.background-color]=\"settings?.tableHeaderBgColor\">\n        </mat-header-row>\n        <mat-row\n            *matRowDef=\"let row; columns: displayedColumns;\">\n        </mat-row>\n\n    </mat-table>\n</div>\n<div *ngIf=\"!isDataLoaded\">\n        <mat-progress-spinner\n        class=\"example-margin\"\n        color=\"warn\"\n        mode=\"determinate\"\n        [value]=\"progressPercent\" style=\"position: relative; top: 0; left: 0; margin: 0 auto; text-align: center;\">\n    </mat-progress-spinner>\n    <div style=\"position:relative; top: -60px; left: 0; margin:0 auto;text-align:center;\">{{progressPercent}}%</div>\n    </div>\n</div>\n",
        "templateCss": "@import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');\n*{\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 400;\n}\nform{\n    width: 100%;\n}\n.exportBtns{\n    right: 0;\n    top: 0;\n    position: relative;\n}\n.exportBtns>* {\n    margin: 0px 10px;\n}\n.report-meta table tr td {\n    padding: 5px 30px 0 0;\n}\nmat-form-field{\n    width: 100%;\n}\ndiv.row{\n    margin-right: 0!important;\n    margin-left: 0!important;\n}\n\nmat-table#reportTable {\n    position: relative;\n}\n\nmat-header-cell.mat-header-cell {\n    position: sticky;\n    top: 0;\n    background: #e9e9e9;\n}\n\nmat-row.mat-row:hover {\n    background: lightgray!important;\n}\n\n.satl-widget-report::-webkit-scrollbar {\n  width: 11px;\n}\n.satl-widget-report {\n  scrollbar-width: thin;\n  scrollbar-color: #90A4AE #CFD8DC;\n}\n.satl-widget-report::-webkit-scrollbar-track {\n  background: #CFD8DC;\n}\n.satl-widget-report::-webkit-scrollbar-thumb {\n  background-color: #90A4AE ;\n  border-radius: 6px;\n  border: 3px solid #CFD8DC;\n}\nbutton.mat-button-disabled{\n    opacity: 0.35;\n}\nbutton.mat-button-disabled:hover {\n    cursor: not-allowed;\n}\n.clrWhite{\n    color: white!important;\n}\n\n.time-input-field::-webkit-calendar-picker-indicator {\n   filter: invert(1) sepia(1) saturate(1) hue-rotate(175deg);\n}\n.modify-search{\n    position: absolute;\n    right: 10px;\n    bottom: 20px;\n}\n.report-header-content{\n    position: relative;\n}",
        "controllerScript": "self.onInit = function() {\r\n    let http=self.ctx.http;\r\n    let $scope=self.ctx.$scope;\r\n    $scope.isDataLoaded=false;\r\n    $scope.settings=self.ctx.settings;\r\n    $scope.widgetConfig=self.ctx.widgetConfig;\r\n    const customDialog = $scope.$injector.get(self.ctx.servicesMap.get('customDialog'));\r\n    /***\r\n     * Iterate the data and get all device list.\r\n     * Store the device in a list to filter further using a popup.\r\n     * */\r\n    const allDevices=[];\r\n    if(self.ctx.data){\r\n        \r\n        self.ctx.data.forEach(dt=>{\r\n            allDevices.push({'name': dt.datasource.entityLabel!=''?dt.datasource.entityLabel:dt.datasource.entityName, 'id': dt.datasource.entityId});\r\n        });\r\n        allDevices.sort((a,b)=>{return a.name.localeCompare(b.name)});\r\n    }\r\n    /***\r\n    * Store action descriptor information array into actionDescriptor variable\r\n    * */\r\n    $scope.actionDescriptor = self.ctx.actionsApi.getActionDescriptors('viewTrend');\r\n    \r\n    let jsonInput={};\r\n    /***\r\n     * Extract the query data from localStorage.\r\n     * Generate table displayedColumns, meta data etc.\r\n     * */\r\n    try {\r\n        jsonInput=JSON.parse(localStorage.getItem('report_data_format'));\r\n        const timeData=getTimeData(jsonInput);\r\n        $scope.hsTimeData={\r\n            start: new Date(timeData.startUnix),\r\n            end: new Date(timeData.endUnix)\r\n        };\r\n        \r\n        $scope.jsonInput=jsonInput;\r\n        let requestParams={aggregation: self.ctx.settings.aggregation, decimalPlace: self.ctx.settings.decimalPlace, key: self.ctx.datasources[0].dataKeys[0].name}\r\n        let tableInfo=generateTableData(jsonInput);\r\n        $scope.tableMeta=tableInfo.tableMeta;\r\n        $scope.displayedColumns=tableInfo.displayedColumns;\r\n        multideviceParams=[];\r\n        jsonInput.devices.forEach(device=>{\r\n            multideviceParams.push({'device':device, 'param':requestParams});\r\n        });\r\n        handleMultiDeviceHttpRequests(multideviceParams, multideviceParams.length-1, timeData, [], 0, multideviceParams.length);\r\n    } catch (e) {\r\n    }\r\n  \r\n  /**\r\n   * Generating the table column array and displayed text\r\n   * As it is a mat-table, displayedcolumn should be unique according\r\n   * to data key\r\n   **/\r\n    function generateTableData(iData){\r\n        displayedColumns=['Date'];\r\n        tableMeta=[{'key':'Date', 'title':$scope.settings.firstColumnName}];\r\n        jsonInput.devices.forEach(dvc=>{\r\n            displayedColumns.push(dvc.id);\r\n            tableMeta.push({key: dvc.id, title: dvc.name});\r\n        });\r\n        if($scope.settings.countAVG){\r\n            tableMeta.push({key: 'avg', title: 'Average'});\r\n        }\r\n        if($scope.settings.countSUM){\r\n            tableMeta.push({key: 'sum', title: 'Sum'});\r\n        }\r\n        return {'displayedColumns':displayedColumns, 'tableMeta':tableMeta};\r\n    }\r\n  \r\n  /**\r\n   * Create the unix timestamp from\r\n   * 1. Start date / start date and time\r\n   * 2. End date / end date and time\r\n   * Interval will be created according to the selected report type.\r\n   **/\r\n  function getTimeData(iData){\r\n      unixList=[];\r\n      if(iData.reportType.toLowerCase()=='monthly'||iData.reportType.toLowerCase()=='yearly'){\r\n          if(iData.reportType.toLowerCase()=='monthly'){\r\n            startDate=iData.startDate+'-01';\r\n            a=new Date(iData.endDate+'-01');\r\n            endDate=iData.endDate+'-'+new Date(a.getFullYear(), a.getMonth()+1, 0).getDate();\r\n          }else{\r\n              startDate=iData.startDate+'-01-01';\r\n              endDate=iData.endDate+'-12-31'\r\n          }\r\n          let endDateObj=new Date(endDate+' '+$scope.settings.defaultEndTime);\r\n          if(iData.reportType.toLowerCase()!='hourly'){\r\n              let strt=new Date(moment().format('YYYY-MM-DD ')+$scope.settings.defaultStartTime).getTime();\r\n              let end=new Date(moment().format('YYYY-MM-DD ')+$scope.settings.defaultEndTime).getTime();\r\n              if(strt>=end){\r\n                  endDateObj.setDate(endDateObj.getDate() + 1);\r\n              }\r\n          }\r\n          return {\r\n              startUnix: new Date(startDate+' '+$scope.settings.defaultStartTime).getTime(),\r\n              endUnix: endDateObj.getTime(),\r\n              interval: 24*60*60*1000\r\n          };\r\n      }else if(iData.reportType.toLowerCase()=='interval'){\r\n          return {\r\n              startUnix: new Date(moment(iData.startDate).format('yyyy-MM-DD')+' '+iData.startTime).getTime(),\r\n              endUnix: new Date(moment(iData.endDate).format('yyyy-MM-DD')+' '+iData.endTime).getTime(),\r\n              interval: new Date(moment(iData.endDate).format('yyyy-MM-DD')+' '+iData.endTime).getTime() - new Date(moment(iData.startDate).format('yyyy-MM-DD')+' '+iData.startTime).getTime()\r\n          };\r\n      }else{\r\n            endDate=moment(new Date(iData.endDate)).format('YYYY-MM-DD');\r\n            startDate=moment(new Date(iData.startDate)).format('YYYY-MM-DD');\r\n            startUnix=iData.reportType.toLowerCase()=='hourly'||iData.reportType.toLowerCase()=='interval'?new Date(startDate+' '+iData.startTime).getTime():new Date(startDate+' '+$scope.settings.defaultStartTime).getTime();\r\n            \r\n            endUnix=iData.reportType.toLowerCase()=='hourly'||iData.reportType.toLowerCase()=='interval'?new Date(endDate+' '+iData.endTime).getTime():(new Date(endDate+' '+$scope.settings.defaultEndTime).getTime()+86400000);\r\n            interval=iData.reportType.toLowerCase()=='interval'?endUnix-startUnix:iData.reportType.toLowerCase()=='hourly'?60*60*1000:24*60*60*1000;\r\n            \r\n            return {'startUnix':startUnix, 'endUnix':endUnix, 'interval':interval};\r\n      }\r\n  }\r\n  \r\n  \r\n  \r\n   /**\r\n    * This will handle multi-devices https request with all aggregation\r\n    * level. this will be a recursive function\r\n    **/\r\n   function handleMultiDeviceHttpRequests(requests,length, timeData, dataStack, progressInitVal, progressEndVal){\r\n       $scope.progressPercent=Math.ceil((progressInitVal/progressEndVal)*100);\r\n        self.ctx.detectChanges();\r\n        progressInitVal=progressInitVal+1;\r\n       if(length>=0){\r\n          let req=http.get('/api/plugins/telemetry/DEVICE/'+requests[length].device.id+'/values/timeseries?keys='+requests[length].param.key+'&endTs='+timeData.endUnix+'&startTs='+timeData.startUnix+'&interval='+timeData.interval+'&agg='+requests[length].param.aggregation,\r\n                        {headers:{\"Content-Type\":\"application/json\",\"X-Authorization\":\"Bearer \"+localStorage.getItem('jwt_token')}});\r\n            req.subscribe(response=>{\r\n                dataStack.push({\r\n                    device: requests[length].device,\r\n                    param: requests[length].param,\r\n                    response:response\r\n                });\r\n                handleMultiDeviceHttpRequests(requests, length-1, timeData, dataStack, progressInitVal, progressEndVal);\r\n            })\r\n       }else{\r\n           AnalysisMultiDeviceData(dataStack);\r\n       }\r\n   }\r\n   \r\n   function AnalysisMultiDeviceData(dataStack){\r\n      dtInterval=formattingDate();\r\n      tableData=[];\r\n      sumOfEachData={};\r\n      dtInterval.forEach(dts=>{\r\n          d={'Date': dts.title};\r\n          $scope.tableMeta.forEach(meta=>{\r\n              if(meta.key!='Date'){\r\n                  dvcData=dataStack.find(d=>d.device.id==meta.key);\r\n                  if(dvcData){\r\n                      dvcResponseDt=dvcData.response[self.ctx.datasources[0].dataKeys[0].name];\r\n                      if(dvcResponseDt !=undefined){\r\n                          if(jsonInput.reportType.toLowerCase()=='monthly'){\r\n                              let monthData=dvcResponseDt.filter(dt=>moment(new Date(dt.ts)).format('YYYY-MM')==moment(new Date(dts.ts)).format('YYYY-MM'));\r\n                              let totalOfMonth=0;\r\n                              monthData.forEach(mEach=>{\r\n                                  totalOfMonth+=Number(mEach.value);\r\n                              });\r\n                              mdt={value: totalOfMonth};\r\n                          }else if(jsonInput.reportType.toLowerCase()=='yearly'){\r\n                              let yearData=dvcResponseDt.filter(dt=>moment(new Date(dt.ts)).format('YYYY')==moment(new Date(dts.ts)).format('YYYY'));\r\n                              let totalOfYear=0;\r\n                              yearData.forEach(yEach=>{\r\n                                  totalOfYear+=Number(yEach.value);\r\n                              });\r\n                              mdt={value: totalOfYear};\r\n                          }else{\r\n                              ed=jsonInput.reportType.toLowerCase()=='daily'?dts.ts+(24*60*60*1000):dts.ts+3600000;\r\n                              mdt=dvcResponseDt.find(qdt=>qdt.ts>=dts.ts&&qdt.ts<=ed);\r\n                          }\r\n                          d[meta.key]=mdt!=undefined?Number(mdt.value).toFixed(self.ctx.settings.decimalPlace):$scope.settings.emptyDataField;\r\n                      }else{\r\n                          d[meta.key]=$scope.settings.emptyDataField;\r\n                      }\r\n                      if(sumOfEachData[meta.key]==undefined){\r\n                          sumOfEachData[meta.key]=d[meta.key]!=$scope.settings.emptyDataField? Number(d[meta.key]): 0;\r\n                      }else{\r\n                          sumOfEachData[meta.key]+=d[meta.key]!=$scope.settings.emptyDataField? Number(d[meta.key]): 0;\r\n                      }\r\n                  }\r\n              }\r\n          });\r\n          tableData.push(d);\r\n      });\r\n      if(jsonInput.reportType.toLowerCase()=='interval'){\r\n          d={'Date':moment(jsonInput.startDate).format('DD-MM-yyyy')+' - '+moment(jsonInput.endDate).format('DD-MM-yyyy')};\r\n          $scope.tableMeta.forEach(meta=>{\r\n              dvcData=dataStack.find(d=>d.device.id==meta.key);\r\n              if(dvcData){\r\n                  dvcResponseDt=dvcData.response[self.ctx.datasources[0].dataKeys[0].name];\r\n                  if(dvcResponseDt !=undefined){\r\n                      d[meta.key]=Number(dvcResponseDt[0].value).toFixed(self.ctx.settings.decimalPlace);\r\n                  }\r\n              }\r\n          });\r\n          tableData.push(d);\r\n      }\r\n      hasAvgKey=$scope.tableMeta.find(meta=>meta.key=='avg');\r\n      if(hasAvgKey!=undefined){\r\n          avg={'Date': 'Average'};\r\n          Object.keys(sumOfEachData).forEach(function(key) {\r\n              avg[key]=Number(sumOfEachData[key]/tableData.length).toFixed(self.ctx.settings.decimalPlace);\r\n          });\r\n          tableData.push(avg);\r\n      }\r\n      hasSumKey=$scope.tableMeta.find(meta=>meta.key=='sum');\r\n      if(hasSumKey!=undefined){\r\n          Object.keys(sumOfEachData).forEach(function(key) {\r\n              sumOfEachData[key]=sumOfEachData[key].toFixed(self.ctx.settings.decimalPlace);\r\n          });\r\n          sumOfEachData['Date']='Total';\r\n          tableData.push(sumOfEachData);\r\n      }\r\n      handleDomElements(tableData);\r\n   }\r\n    function formattingDate(){\r\n        iData=jsonInput;\r\n        hsts=getTimeData(jsonInput);\r\n        dates=[];\r\n        x=new Date(hsts.startUnix);\r\n        e=new Date(hsts.endUnix);\r\n        const rtype=iData.reportType.toLowerCase()\r\n        for(; x<e;rtype=='daily'?x.setDate(x.getDate()+1):rtype=='hourly'?x.setHours(x.getHours()+1):rtype=='monthly'?x.setMonth(x.getMonth()+1):x.setFullYear(x.getFullYear()+1)){\r\n            format=iData.reportType=='Daily'?$scope.settings.dateFormatForDaily:iData.reportType=='Hourly'?$scope.settings.dateFormatForHourly:iData.reportType=='Monthly'?$scope.settings.dateFormatForMonthly:$scope.settings.dateFormatForYearly;\r\n            key=moment(x).format(format).replace(/[&\\/\\\\#, +()$~%.'\":*?<>{}]/g, '_')\r\n            dates.push({'key': key, 'title': moment(x).format(format), 'ts': x.getTime()});\r\n        }\r\n        return dates;\r\n    }\r\n    \r\n    /**\r\n     * Controlling the html DOM elements using this function\r\n     * disable progress, show table, changed table data will be updated\r\n     * from here\r\n     **/\r\n    function handleDomElements(tableData){\r\n        $scope.tableData=tableData;\r\n        $scope.isDataLoaded=true;\r\n        self.ctx.detectChanges();\r\n    }\r\n  \r\n  /**\r\n   * Exporting the searched data in csv format.\r\n   * It will take query information and then place the searched data\r\n   **/\r\n    $scope.exportAsCSV=function(){\r\n        const items = $scope.tableData\r\n        const replacer = (key, value) => value === null ? '' : value // specify how you want to handle null values here\r\n        const header = Object.keys(items[0]);\r\n        let csv = items.map(row => header.map(fieldName => JSON.stringify(row[fieldName], replacer)).join(','));\r\n        cHeader=[];\r\n        tMeta= $scope.tableMeta;\r\n        header.forEach(h=>{\r\n            if(tMeta.filter(data=>data.key==h).length>0){\r\n                cHeader.push(tMeta.filter(data=>data.key==h)[0].title);\r\n            }\r\n        });\r\n        csv.unshift(cHeader.join(','));\r\n        csv.unshift([].join(','));\r\n        if(jsonInput.reportType.toLowerCase()!='status'){\r\n            end=$scope.showDateWithFormat($scope.hsTimeData.end, 'end')\r\n            csv.unshift(['End time', '\"'+end+'\"'].join(','));\r\n            start=$scope.showDateWithFormat($scope.hsTimeData.start, 'start')\r\n            csv.unshift(['Start time', '\"'+start+'\"'].join(','));\r\n        }\r\n        csv.unshift([self.ctx.settings?.unitKey==undefined?self.ctx.settings.unitKey:'Unit value', self.ctx.settings?.unitValue].join(','));\r\n        csv.unshift(['Report Type', jsonInput.reportType+' '+self.ctx.settings.typeSuffix].join(','));\r\n        \r\n        dv=jsonInput.devices.length>1?'Multiple devices':jsonInput.devices[0].name\r\n        csv.unshift([self.ctx.settings?.deviceTitle==undefined?'Device':self.ctx.settings.deviceTitle, dv].join(','));\r\n        csv = csv.join('\\r\\n')\r\n\r\n        let link = document.createElement(\"a\");    \r\n        link.id=\"lnkDwnldLnk\";\r\n        document.body.appendChild(link);\r\n        blob = new Blob([csv], { type: 'text/csv' }); \r\n        let csvUrl = window.webkitURL.createObjectURL(blob);\r\n        let filename = ($scope.settings?.csvFileName?$scope.settings?.csvFileName:'report')+moment(new Date()).format('_DD_MM_YYYY_hh_mm_A')+'.csv';\r\n        jQuery(\"#lnkDwnldLnk\")\r\n        .attr({\r\n            'download': filename,\r\n            'href': csvUrl\r\n        });\r\n        jQuery('#lnkDwnldLnk')[0].click();\r\n        document.body.removeChild(link);\r\n    }\r\n    \r\n    $scope.showTimeInHFormat=function(dt, tm){\r\n        s=moment(dt).format('YYYY-MM-DD')\r\n        return moment(s+' '+tm).format('hh:mm A')\r\n    }\r\n    $scope.showDateWithFormat=function(dt, pos){\r\n        if(pos=='start'){\r\n            return moment(dt).format($scope.settings.dateFormat);\r\n        }else{\r\n            const timeData=getTimeData(jsonInput);\r\n            if(typeof(timeData)=='object'){\r\n                return moment(new Date(timeData.endUnix)).format($scope.settings.dateFormat);\r\n            }else{\r\n                return moment(new Date(timeData[timeData.length-1].endUnix)).format($scope.settings.dateFormat);\r\n            }\r\n        }\r\n    }\r\n    $scope.viewTrend=function(event, action){\r\n        trendData=JSON.stringify($scope.tableData);\r\n        trendJson=JSON.parse(trendData);\r\n        let ds=[];\r\n        let dsKey=[];\r\n        trendJson.forEach(tj=>{\r\n            dc={};\r\n            if(tj.Date!=undefined && (tj.Date!='Average' && tj.Date!='Total')){\r\n                Object.keys(tj).forEach(key=>{\r\n                if(key=='Date'){\r\n                    dc[key]=tj[key];\r\n                }else{\r\n                    dvc=jsonInput.devices.filter(ji=>ji.id==key);\r\n                    if(dvc.length){\r\n                        dc[dvc[0].name.split(' ').join('-')]=tj[key];\r\n                    }\r\n                    k={label: dvc[0].name, key: dvc[0].name.split(' ').join('-')}\r\n                    if(dsKey.filter(dk=>dk.key==k.key).length==0){\r\n                        dsKey.push(k);\r\n                    }\r\n                }\r\n            });\r\n            ds.push(dc);\r\n            }\r\n        });\r\n        localStorage.setItem('reportData', JSON.stringify({keys: dsKey, data: ds}));\r\n        \r\n        self.ctx.actionsApi.handleWidgetAction(event, action);\r\n    }\r\n    /***\r\n     * Handle the modify search button.\r\n     * It should open a pop up window showing all the devices with selected.\r\n     * Template will be binded to the popup.\r\n     * */\r\n     template=`\r\n        <div aria-label=\"Info\" id=\"popup-container\" ngStyle.xs=\"width: 100%\" ngStyle.sm=\"width: 100%\" style=\"width: 700px\">\r\n        <form *ngIf=\"form\" [formGroup]=\"form\" (submit)=\"applyFilter()\" #dataForm=\"ngForm\">\r\n            <mat-toolbar fxLayout=\"row\" color=\"primary\">\r\n                <div>Modify search</div>\r\n                <span fxFlex></span>\r\n                <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\r\n            </mat-toolbar>\r\n            <div mat-dialog-content fxLayout fxLayout.sm=\"column\" fxLayout.xs=\"column\" style=\"padding: 0;\">\r\n                <div fxFlex=\"60\" fxFlex.sm=\"100\" fxFlex.xs=\"100\" style=\"overflow: auto;\">\r\n                    <mat-table *ngIf=\"tablePagination && data.data\" [dataSource]=\"data.data.slice(tablePagination.getFrom(), tablePagination.getTo())\" style=\"padding: 10px;max-height: 65vh\">\r\n                    \r\n                        <ng-container matColumnDef=\"select\">\r\n                            <mat-header-cell *matHeaderCellDef>\r\n                                <div fxLayout fxLayoutAlign=\"space-between center\">\r\n                                    <mat-checkbox (change)=\"selectAllDevice($event)\" [checked]=\"selectedDevice.length==data.data.length\" [indeterminate]=\"selectedDevice.length!=0 && selectedDevice.length!=data.data.length\"> Select all </mat-checkbox>\r\n                                    <div>\r\n                                        <mat-form-field floatLabel=\"never\" *ngIf=\"showSearch\">\r\n                                            <mat-icon matPrefix >search</mat-icon>\r\n                                            <input matInput (keyup)=\"applySearch($event)\" placeholder=\"Search\">\r\n                                        </mat-form-field>\r\n                                        <button mat-icon-button type=\"button\" (click)=\"showSearch=!showSearch\"><mat-icon *ngIf=\"!showSearch\">search</mat-icon><mat-icon *ngIf=\"showSearch\">close</mat-icon></button>\r\n                                    </div>\r\n                                </div>  \r\n                            </mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let row\">\r\n                                <mat-checkbox class=\"example-margin\" (change)=\"selectDevices($event, row)\" [checked]=\"isChecked(row)\">\r\n                                    {{row.name}}\r\n                                </mat-checkbox>\r\n                            </mat-cell>\r\n                        </ng-container>\r\n                        <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\r\n                        <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n                    </mat-table>\r\n                    <mat-paginator\r\n                        [length]=\"data.data.length\"\r\n                        [pageSize]=\"tablePagination.pageSize\"\r\n                        [pageSizeOptions]=\"tablePagination.pageSizeOptions\"\r\n                        (page)=\"tablePagination.handler($event)\"\r\n                        showFirstLastButtons=\"true\">\r\n                    </mat-paginator>\r\n                </div>\r\n                <div fxFlex=\"40\" fxFlex.sm=\"100\" fxFlex.xs=\"100\" fxLayout=\"column\" fxLayout.xs=\"column\" fxLayout.sm=\"column\" fxLayoutGap=\"10px\"  style=\"padding: 10px;\">\r\n                    <div>\r\n                        <mat-form-field style=\"width: 100%\">\r\n                          <mat-label>Report type</mat-label>\r\n                          <mat-select formControlName=\"reportType\" (selectionChange)=\"f($event)\">\r\n                            <mat-option *ngFor=\"let rType of reportTypes\" [value]=\"rType\">\r\n                              {{rType}}\r\n                            </mat-option>\r\n                          </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf=\"form.value.reportType=='Hourly'\">\r\n                        <mat-form-field style=\"width: 100%\">\r\n                          <mat-label>Select Start Time</mat-label>\r\n                          <input matInput type=\"time\" formControlName=\"startTime\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf=\"form.value.reportType=='Hourly'||form.value.reportType=='Daily'\">\r\n                        <mat-form-field style=\"width: 100%\">\r\n                          <mat-label>Select Start Date</mat-label>\r\n                          <input matInput [matDatepicker]=\"picker\" formControlName=\"startDate\" [max]=\"form.value.endDate\" (click)=\"openDatePicker(picker)\" >\r\n                          <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                          <mat-datepicker #picker></mat-datepicker>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf=\"form.value.reportType=='Hourly'\">\r\n                        <mat-form-field style=\"width: 100%\">\r\n                          <mat-label>Select End Time</mat-label>\r\n                          <input matInput type=\"time\" formControlName=\"endTime\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf=\"form.value.reportType=='Hourly'||form.value.reportType=='Daily'\">\r\n                        <mat-form-field style=\"width: 100%\">\r\n                          <mat-label>Select End Date</mat-label>\r\n                          <input matInput [matDatepicker]=\"picker2\" formControlName=\"endDate\" [min]=\"form.value.startDate\" [max]=\"today\" (click)=\"openDatePicker(picker2)\">\r\n                          <mat-datepicker-toggle matSuffix [for]=\"picker2\"></mat-datepicker-toggle>\r\n                          <mat-datepicker #picker2></mat-datepicker>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf=\"form.value.reportType=='Monthly'\">\r\n                        <mat-form-field style=\"width: 100%\">\r\n                            <mat-label>Start Month</mat-label>\r\n                                <input matInput (click)=\"openDatePicker(startPicker)\" [(ngModel)]=\"model.startDate\" name=\"startDate\" required>\r\n                                <input matInput [matDatepicker]=\"startPicker\" type=\"hidden\">\r\n                                <mat-datepicker-toggle matSuffix [for]=\"startPicker\"> </mat-datepicker-toggle>\r\n                                <mat-datepicker #startPicker startView=\"year\" (monthSelected)=\"monthOrYearSelected($event, startPicker, 'YYYY-MM', 'start')\" id=\"mnthStart\">\r\n                            </mat-datepicker>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf=\"form.value.reportType=='Monthly'\">\r\n                        <mat-form-field style=\"width: 100%\">\r\n                            <mat-label>End Month</mat-label>\r\n                            <input matInput (click)=\"openDatePicker(endPicker)\" [(ngModel)]=\"model.endDate\" name=\"endDate\" required>\r\n                            <input matInput [matDatepicker]=\"endPicker\" type=\"hidden\">\r\n                            <mat-datepicker-toggle matSuffix [for]=\"endPicker\"></mat-datepicker-toggle>\r\n                            <mat-datepicker #endPicker startView=\"year\" (monthSelected)=\"monthOrYearSelected($event, endPicker, 'YYYY-MM', 'end')\" id=\"mnthEnd\"> </mat-datepicker>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    \r\n                    <div *ngIf=\"form.value.reportType=='Yearly'\">\r\n                        <mat-form-field style=\"width: 100%\">\r\n                            <mat-label>Start Year</mat-label>\r\n                                <input matInput (click)=\"openDatePicker(startPicker)\" [(ngModel)]=\"model.startDate\" name=\"startDate\" required>\r\n                                <input matInput [matDatepicker]=\"startPicker\" type=\"hidden\">\r\n                                <mat-datepicker-toggle matSuffix [for]=\"startPicker\"> </mat-datepicker-toggle>\r\n                                <mat-datepicker #startPicker startView=\"multi-year\" (yearSelected)=\"monthOrYearSelected($event, startPicker, 'YYYY', 'start')\" id=\"mnthStart\">\r\n                            </mat-datepicker>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div *ngIf=\"form.value.reportType=='Yearly'\">\r\n                        <mat-form-field style=\"width: 100%\">\r\n                            <mat-label>End Year</mat-label>\r\n                            <input matInput (click)=\"openDatePicker(endPicker)\" [(ngModel)]=\"model.endDate\" name=\"endDate\" required>\r\n                            <input matInput [matDatepicker]=\"endPicker\" type=\"hidden\">\r\n                            <mat-datepicker-toggle matSuffix [for]=\"endPicker\"></mat-datepicker-toggle>\r\n                            <mat-datepicker #endPicker startView=\"multi-year\" (yearSelected)=\"monthOrYearSelected($event, endPicker, 'YYYY', 'end')\" id=\"mnthEnd\"> </mat-datepicker>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div mat-dialog-actions align=\"end\">\r\n                <button mat-flat-button color=\"primary\">Apply Filter</button>\r\n            </div>\r\n        </form>\r\n        </div>\r\n            `;\r\n    $scope.modifySearchPopup=function(){\r\n        customDialog.customDialog(template, searchModificationController, {data: allDevices, jsonInput: jsonInput}).subscribe(\r\n            function(res) {\r\n                if (res) {\r\n                }\r\n            }\r\n        );\r\n    }\r\n    function searchModificationController(instance) {\r\n        instance.displayedColumns=['select'];\r\n        const dataBackup=instance.data.data;\r\n        instance.showSearch=false;\r\n        instance.searchVal='';\r\n        const tablePagination = {\r\n            pageIndex: 0,\r\n            pageSize: 10,\r\n            pageSizeOptions: [10, 20, 50, 100],\r\n            handler: (pagination) => {\r\n                const { pageIndex, pageSize } = pagination;\r\n                if (pageSize !== undefined) {\r\n                    tablePagination.pageSize = pageSize;\r\n                }\r\n                if (pageIndex !== undefined) {\r\n                    tablePagination.pageIndex = pageIndex;\r\n                }\r\n            },\r\n            getFrom: () => {\r\n                const { pageIndex, pageSize } = tablePagination;\r\n                return pageIndex * pageSize;\r\n            },\r\n            getTo: () => {\r\n                const { pageIndex, pageSize } = tablePagination;\r\n                return pageIndex * pageSize + pageSize;\r\n            }\r\n        };\r\n        instance.tablePagination=tablePagination;\r\n        instance.today=new Date();\r\n        instance.model={startDate:'', endDate: ''};\r\n        instance.selectedDevice=instance.data.jsonInput.devices;\r\n        instance.form=instance.fb.group({\r\n            reportType: [instance.data.jsonInput.reportType],\r\n            startTime:[instance.data.jsonInput.startTime],\r\n            startDate:[instance.data.jsonInput.startDate],\r\n            endTime:[instance.data.jsonInput.endTime],\r\n            endDate:[instance.data.jsonInput.endDate]\r\n        });\r\n        if(instance.data.jsonInput.reportType=='Monthly'||instance.data.jsonInput.reportType=='Yearly'){\r\n            instance.model={startDate:instance.data.jsonInput.startDate, endDate: instance.data.jsonInput.endDate};\r\n        }\r\n        instance.f=function(event){\r\n            instance.form.reset();\r\n            buildForm(event.value=='Hourly'||event.value=='Daily'?new Date():'');\r\n            instance.form.controls['reportType'].setValue(event.value);\r\n            self.ctx.detectChanges();\r\n            self.onResize();\r\n        }\r\n        function buildForm(endt){\r\n            today=new Date();\r\n            instance.form=instance.fb.group({\r\n                reportType: ['', instance.validators.required],\r\n                startDate: ['', instance.validators.required],\r\n                startTime: ['00:00', instance.validators.required],\r\n                endDate: [endt, instance.validators.required],\r\n                endTime: [today.getHours()+':'+(today.getMinutes()>9?today.getMinutes():'0'+today.getMinutes()), instance.validators.required]\r\n            });\r\n        }\r\n        instance.reportTypes=['Hourly', 'Daily', 'Monthly', 'Yearly']\r\n        instance.selectDevices=function(event, device){\r\n            if(event.checked){\r\n                instance.selectedDevice.push(device);\r\n            }else{\r\n                instance.selectedDevice=instance.selectedDevice.filter(rd=>rd.id!=device.id);\r\n            }\r\n            instance.selectedDevice.sort((a,b)=>{return a.name.localeCompare(b.name)});\r\n        }\r\n        instance.selectAllDevice=function(event){\r\n            if(event.checked){\r\n                instance.selectedDevice=instance.data.data;\r\n            }else{\r\n                instance.selectedDevice=[];\r\n            }\r\n            instance.selectedDevice.sort((a,b)=>{return a.name.localeCompare(b.name)});\r\n        }\r\n        instance.isChecked=function(device){\r\n            return instance.selectedDevice.findIndex(sd=>sd.id==device.id)!=-1;\r\n        }\r\n        instance.applySearch=function($event){\r\n            instance.data.data=[...dataBackup];\r\n            instance.data.data = instance.data.data.filter(ele=>{\r\n                if(ele.name.toLowerCase().search($event.target.value.toLowerCase())!=-1){\r\n                    return ele;\r\n                }\r\n            });\r\n            self.ctx.detectChanges();\r\n        }\r\n        instance.applyFilter=function(){\r\n            if(instance.form.valid && instance.selectedDevice.length){\r\n                ss=moment(moment(new Date(instance.form.value.startDate)).format('YYYY-MM-DD')+' '+instance.form.value.startTime).unix();\r\n                ee=moment(moment(new Date(instance.form.value.endDate)).format('YYYY-MM-DD')+' '+instance.form.value.endTime).unix();\r\n                if(ss>ee){\r\n                    self.ctx.showToast('error', 'Start datetime is greater than end datetime', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\r\n                    return;\r\n                }\r\n                jsonInput=instance.form.value;\r\n                jsonInput['devices']=instance.selectedDevice;\r\n                localStorage.setItem('report_data_format', JSON.stringify(jsonInput));\r\n                self.onInit();\r\n                instance.dialogRef.close(null);\r\n            }else{\r\n                if(instance.selectedDevice.length==0){\r\n                    self.ctx.showToast('warn', 'No device is selected', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\r\n                }else{\r\n                    self.ctx.showToast('warn', 'Invalid date time selection', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\r\n                }\r\n            }\r\n        }\r\n        instance.close = function (){\r\n            instance.dialogRef.close(null);\r\n        };\r\n        instance.openDatePicker=function(picker){\r\n            picker.open();\r\n        }\r\n        instance.monthOrYearSelected=function(eventData, dp, format, pos) {\r\n            if(pos=='start'){\r\n                instance.form.controls['startDate'].setValue(moment(eventData).format(format));\r\n            }else{\r\n                instance.form.controls['endDate'].setValue(moment(eventData).format(format));\r\n            }\r\n            dp.close();\r\n        }\r\n    }\r\n}\r\nself.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 1,\r\n        maxDataKeys: 2,\r\n        singleEntity: false\r\n    };\r\n};\r\nself.actionSources = function() {\r\n     return {\r\n         'viewTrend': {name: 'View trend',multiple: false}\r\n     };\r\n }",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\n            \"aggregation\", \"firstColumnName\"\n        ],\n        \"properties\": {\n            \"aggregation\": {\n                \"title\": \"Aggregation\",\n                \"type\": \"string\",\n                \"enum\": [\n                    \"MIN\",\n                    \"MAX\",\n                    \"AVG\",\n                    \"COUNT\",\n                    \"SUM\"\n                ],\n                \"default\": \"MIN\"\n            },\n            \"decimalPlace\":{\n                \"title\": \"Decimal place\",\n                \"type\": \"number\",\n                \"default\": \"2\"\n            },\n            \"tableHeaderBgColor\":{\n                \"title\":\"Table Header Background Color\",\n                \"type\":\"string\"\n            },\n            \"tableHeaderTxtColor\":{\n                \"title\":\"Table Header Text Color\",\n                \"type\":\"string\"\n            },\n            \"countAVG\":{\n                \"title\":\"Count average\",\n                \"type\":\"boolean\"\n            },\n            \"countSUM\":{\n                \"title\":\"Count sum\",\n                \"type\":\"boolean\"\n            },\n            \"firstColumnName\":{\n                \"title\":\"First column name\",\n                \"type\":\"string\"\n            },\n            \"deviceTitle\":{\n                \"title\":\"Device title\",\n                \"type\":\"string\",\n                \"default\": \"Device\"\n            },\n            \"typeSuffix\":{\n                \"title\":\"Report type suffix\",\n                \"type\":\"string\",\n                \"default\": \"consumption report\"\n            },\n            \"unitKey\":{\n                \"title\":\"Unit key\",\n                \"type\":\"string\",\n                \"default\": \"Value unit\"\n            },\n            \"unitValue\":{\n                \"title\":\"Unit value\",\n                \"type\":\"string\",\n                \"default\": \"kWh\"\n            },\n            \"multiReportText\":{\n                \"title\":\"Multi devices report text\",\n                \"type\":\"string\",\n                \"default\": \"Multi devices\"\n            },\n            \"emptyDataField\":{\n                \"title\":\"Empty data field value\",\n                \"type\":\"string\",\n                \"default\": \"-\"\n            },\n            \"dateFormat\":{\n                \"title\":\"Date format\",\n                \"type\":\"string\",\n                \"default\": \"DD MMM, YYYY\"\n            },\n            \"dateFormatForHourly\":{\n                \"title\":\"Date format for hourly report\",\n                \"type\":\"string\",\n                \"default\": \"DD MMM, YYYY hh:00 A\"\n            },\n            \"dateFormatForDaily\":{\n                \"title\":\"Date format for daily report\",\n                \"type\":\"string\",\n                \"default\": \"DD MMM, YYYY\"\n            },\n            \"dateFormatForMonthly\":{\n                \"title\":\"Date format for monthly report\",\n                \"type\":\"string\",\n                \"default\": \"MMM, YYYY\"\n            },\n            \"dateFormatForYearly\":{\n                \"title\":\"Date format for yearly report\",\n                \"type\":\"string\",\n                \"default\": \"YYYY\"\n            },\n            \"defaultStartTime\":{\n                \"title\": \"Default start time\",\n                \"type\": \"string\",\n                \"default\": \"12:00:00 AM\"\n            },\n            \"defaultEndTime\":{\n                \"title\": \"Default end time\",\n                \"type\": \"string\",\n                \"default\": \"11:59:59 PM\"\n            },\n            \"csvFileName\":{\n                \"title\": \"CSV file name\",\n                \"type\": \"string\",\n                \"default\": \"syncross_report\"\n            }\n        }\n    },\n    \"form\": [\n        {\n        \"key\": \"aggregation\",\n        \"type\": \"select\",\n        \"titleMap\": [{\n                \"name\": \"MIN\",\n                \"value\": \"MIN\"\n            },\n            {\n                \"name\": \"MAX\",\n                \"value\": \"MAX\"\n            },\n            {\n                \"name\": \"AVG\",\n                \"value\": \"AVG\"\n            },\n            {\n                \"name\": \"COUNT\",\n                \"value\": \"COUNT\"\n            },\n            {\n                \"name\": \"SUM\",\n                \"value\": \"SUM\"\n            }\n        ]\n    },\n    \n    {\n        \"key\":\"decimalPlace\",\n        \"type\":\"number\"\n    },\n    {\n        \"key\":\"tableHeaderBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"countAVG\",\n        \"type\":\"checkbox\"\n    },\n    {\n        \"key\":\"countSUM\",\n        \"type\":\"checkbox\"\n    },\n    \"firstColumnName\",\n    \"deviceTitle\",\n    \"typeSuffix\",\n    \"unitKey\",\n    \"unitValue\",\n    \"multiReportText\",\n    \"emptyDataField\",\n    \"dateFormat\",\n    \"dateFormatForHourly\",\n    \"dateFormatForDaily\",\n    \"dateFormatForMonthly\",\n    \"dateFormatForYearly\",\n    \"defaultStartTime\",\n    \"defaultEndTime\",\n    \"csvFileName\"]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.9248978586128855,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#ffffff\",\"color\":\"rgba(0,0,0,0.87)\",\"padding\":\"8px\",\"settings\":{\"tableHeaderBgColor\":\"#f0f0f0\",\"aggregation\":\"MIN\",\"decimalPlace\":2,\"deviceTitle\":\"Device\",\"typeSuffix\":\"consumption report\",\"unitKey\":\"Value unit\",\"unitValue\":\"kWh\",\"multiReportText\":\"Multi devices\",\"dateFormat\":\"DD MMM, YYYY\",\"dateFormatForMonthly\":\"MMM, YYYY\",\"firstColumnName\":\"Date\\\\Device\",\"emptyDataField\":\"No Data\",\"tableHeaderTxtColor\":\"#000000\"},\"title\":\"Consumption Report\",\"showTitleIcon\":false,\"iconColor\":\"rgba(255,255,255,0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"showLegend\":false}"
      }
    },
    {
      "alias": "report_trend_view",
      "name": "Report Trend View",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "https://cdn.jsdelivr.net/npm/chart.js"
          }
        ],
        "templateHtml": "<canvas id=\"myChart\"></canvas>",
        "templateCss": "",
        "controllerScript": "self.onInit = function() {\nconst ctx = document.getElementById('myChart');\nreportData=JSON.parse(localStorage.getItem('reportData'));\nlabels=[];\ndatasets=[];\nreportData?.data?.forEach(rd=>{\n    if(rd.Date==undefined){\n        labels.push(rd.DeviceName);\n    }else{\n        labels.push(rd.Date);\n    }\n    Object.keys(rd).forEach(key=>{\n        k=reportData?.keys.filter(ks=>ks.key==key);\n        if(key!='Date'){\n            \n            datapoint=datasets.filter(ds=>ds.label==k[0].label)\n            if (datapoint.length) {\n                ind=datasets.indexOf(datapoint[0]);\n                datasets[ind].data.push(rd[key]=='-'?0:rd[key]);\n            }else{\n                datasets.push({\n                    label: k[0].label,\n                    data: [rd[key]=='-'?0:rd[key]],\n                    borderWidth: 1\n                });\n            }\n        }\n    })\n});\n\n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: labels,\n      datasets: datasets\n    },\n    options: {\n        responsive: true,\n        maintainAspectRatio: true,\n      scales: {\n        y: { \n          beginAtZero: true\n        }\n      },\n      animations: {\n          tension: {\n            duration: 1000,\n            easing: 'linear',\n            from: 0,\n            to: 0.5\n          }\n        }\n    }\n  });\n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\n        ],\n        \"properties\": {\n            \"unknownDataReplace\":{\n                \"title\":\"Unknown data replace with 0\",\n                \"type\":\"boolean\",\n                \"default\": \"true\"\n            }\n        }\n    },\n    \"form\": [\n    {\n        \"key\":\"unknownDataReplace\",\n        \"type\":\"checkbox\"\n    }\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"Report Trend View\",\"dropShadow\":true}"
      }
    }
  ]
}