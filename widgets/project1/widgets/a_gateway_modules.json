{
  "widgetsBundle": {
    "alias": "a_gateway_modules",
    "title": "A Gateway Modules",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "modbus_module_2_opc_static_widget",
      "name": "(OPC) static widget",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "static",
        "sizeX": 11.5,
        "sizeY": 7,
        "resources": [],
        "templateHtml": "<!--This section is for gateway table-->\r\n<mat-spinner *ngIf=\"!dataSource\" class=\"mat-spinner\"></mat-spinner>\r\n<div class=\"header_section\" *ngIf=\"dataSource\">\r\n    <div class=\"header_left\" (click)=\"backwardChangePage()\">\r\n        <strong>\r\n            <mat-icon *ngIf=\"!isGateway\">keyboard_arrow_left</mat-icon>\r\n            <span class=\"gateway_title\" *ngIf=\"isGateway\">OPC GATEWAY</span>\r\n            <span class=\"gateway_title\" *ngIf=\"isGatewayEndpoint\">GATEWAY {{gatewayEndpointList?.gwName}} ENDPOINT</span>\r\n            <span class=\"gateway_title\" *ngIf=\"isGatewayDevice\">ENDPOINT {{gatewayDeviceList?.title}} DEVICE</span>\r\n        </strong>\r\n    </div>\r\n    <div class=\"header_right\">\r\n        <div class=\"search_bar\">\r\n            <input type=\"text\" placeholder=\"search here ...\" (input)=\"searchData($event, isGateway?'gateway':isGatewayEndpoint?'endpoint':'device')\" />\r\n            <mat-icon class=\"search_icon\">search</mat-icon>\r\n        </div>\r\n        <div *ngIf=\"isGateway\">\r\n            <button mat-stroked-button [style.background-color]=\"settings?.addBtnBgColor\" matTooltip=\"Import JSON file\" (click)=\"openImportDialog()\">\r\n                <mat-icon [style.color]=\"settings?.addBtnTxtColor\">\r\n                    file_upload\r\n                </mat-icon>\r\n            </button>\r\n        </div>\r\n        <div *ngIf=\"isGateway\">\r\n            <button mat-stroked-button [style.background-color]=\"settings?.addBtnBgColor\" matTooltip=\"Export JSON file\" (click)=\"exportJSON()\">\r\n                <mat-icon [style.color]=\"settings?.addBtnTxtColor\">\r\n                    file_download\r\n                </mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"add_new_GW_btn\">\r\n            <button mat-stroked-button [style.background-color]=\"settings?.addBtnBgColor\" (click)=\"openDialog()\">\r\n                <span [style.color]=\"settings?.addBtnTxtColor\">+ ADD NEW</span>\r\n            </button>\r\n        </div>\r\n        <div class=\"deploy_btn\">\r\n            <button mat-stroked-button color=\"primary\" (click)=\"deploy()\" [style.background-color]=\"settings?.deployBtnBgColor\">\r\n                <span [style.color]=\"settings?.deployBtnTxtColor\">DEPLOY </span>\r\n                <mat-icon [style.color]=\"settings?.deployBtnTxtColor\">play_arrow</mat-icon>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div *ngIf=\"dataSource\">\r\n    <div class=\"rf\" [style.height]=\"height+'px'\" [style.overflow]=\"'auto'\">\r\n        <mat-table [dataSource]=\"dataSource.slice(tablePagination.getFrom(), tablePagination.getTo())\" class=\"satl-table\">\r\n            <div *ngFor=\"let col of displayedColumns\">\r\n                <ng-container matColumnDef={{col}}>\r\n                    <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\" class=\"headercheckboxcell {{col}}\">\r\n                        <div id=\"mat-report-header-search-box\">\r\n                            <mat-checkbox *ngIf=\"col==='checkbox'\" (change)=\"allElementSelectChange($event)\" [checked]=\"styleOfHeaderCheckbox()\" [indeterminate]=\"selected_data.length>0 && selected_data.length!==dataSource.length\"></mat-checkbox>\r\n                            <span *ngIf=\"col!=='checkbox'\" [ngClass]=\"col === 'actions' ? 'align_left': 'align_right'\">{{col.toUpperCase()}}</span>\r\n                        </div>\r\n                    </mat-header-cell>\r\n                    <mat-cell *matCellDef=\"let element\" [style.background-color]=\"bgColor\" [style.color]=\"color\" class=\"checkboxcell\" [style.border-bottom-color]=\"settings?.tableRowLineColor\">\r\n                        <mat-checkbox *ngIf=\"col==='checkbox'\" class=\"example-margin\" (change)=\"singleElementSelectChange($event, element)\" [checked]=\"styleOfCheckbox(element)\"></mat-checkbox>\r\n                        <span *ngIf=\"col!=='checkbox'\">{{element[col]}}</span>\r\n                        <div *ngIf=\"col=='actions'&& isGateway\">\r\n                            <button mat-icon-button matTooltip=\"Export JSON file\" (click)=\"exportJSON(element)\">\r\n                                <mat-icon [style.color]=\"color\">\r\n                                    file_download\r\n                                </mat-icon>\r\n                            </button>\r\n                            <button mat-icon-button aria-label=\"Example icon button with a vertical three dot icon\" (click)=\"openFunctionDialog(element)\">\r\n                                <mat-icon [style.color]=\"color\">functions</mat-icon>\r\n                            </button>\r\n                            <button mat-icon-button aria-label=\"Example icon button with a vertical three dot icon\" (click)=\"forwardChangePage(element)\">\r\n                                <mat-icon [style.color]=\"color\">settings</mat-icon>\r\n                            </button>\r\n                            <button mat-icon-button (click)=\"openDialog(element)\">\r\n                                <mat-icon [style.color]=\"color\">edit</mat-icon>\r\n                            </button>\r\n                            <button mat-icon-button (click)=\"deleteGateway(element)\">\r\n                                <mat-icon [style.color]=\"color\">delete</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                        <div *ngIf=\"col=='actions' && isGatewayEndpoint\">\r\n                            <button mat-icon-button (click)=\"openDialog(element)\">\r\n                                <mat-icon [style.color]=\"color\">edit</mat-icon>\r\n                            </button>\r\n                            <button mat-icon-button aria-label=\"Example icon button with a vertical three dot icon\" (click)=\"forwardChangePage(element)\">\r\n                                <mat-icon [style.color]=\"color\">settings</mat-icon>\r\n                            </button>\r\n                            <button mat-icon-button (click)=\"deleteGatewayEndpoint(element)\">\r\n                                <mat-icon [style.color]=\"color\">delete</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                        <div *ngIf=\"col=='actions' && isGatewayDevice\">\r\n                            <button mat-icon-button (click)=\"openDialog(element)\">\r\n                                <mat-icon [style.color]=\"color\">edit</mat-icon>\r\n                            </button>\r\n                            <button mat-icon-button (click)=\"deleteGatewayDevice(element)\">\r\n                                <mat-icon [style.color]=\"color\">delete</mat-icon>\r\n                            </button>\r\n                        </div>\r\n                    </mat-cell>\r\n                </ng-container>\r\n            </div>\r\n            <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></mat-header-row>\r\n            <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n        </mat-table>\r\n    </div>\r\n    <mat-paginator [style.background-color]=\"bgColor\" [style.color]=\"color\" [length]=\"dataSource.length\" [pageSize]=\"tablePagination.pageSize\" [pageSizeOptions]=\"tablePagination.pageSizeOptions\" (page)=\"tablePagination.handler($event)\" aria-label=\"Select page\" showFirstLastButtons=\"true\" class=\"report-form-paginator\"></mat-paginator>\r\n</div>",
        "templateCss": "/*////////////////////////////////*/\n.header_section{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 70px;\n}\n.header_left{\n    display: flex;\n    align-items: center;\n    \n}\n.gateway_title{\n    font-size: 25px;\n    margin-left: 10px;\n}\n.header_right{\n    margin-bottom: 5px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    gap: 5px;\n}\n.search_bar{\n    position: relative;\n}\n.search_bar input{\n    padding-top: 7px;\n    padding-bottom: 7px;\n    padding-left: 7px;\n    padding-right: 30px;\n    border-radius: 4px;\n    border: 1px solid gray;\n}\n.search_icon{\n    position: absolute;\n    top: 6px;\n    right: 5px;\n}\n.add_new_GW_btn button{\n    background-color: #CC0000;\n    color: white;\n    padding: 0 20px;\n}\n.add_new_GW_btn span{\n    color: white;\n}\n.deploy_btn button{\n    background-color: #CC0000;\n    color: white;\n    padding: 0 20px;\n}\n.deploy_btn span{\n    color: white;\n}\n.add_new_btn button{\n    background-color: #CC0000;\n    padding: 0 20px;\n}\n.add_new_btn span{\n    color: white;\n}\n.mat-spinner{\n    position: absolute;\n    top: 45%;\n    left: 45%;\n    /*margin: 48% auto;*/\n    /*width: 100%;;*/\n    /*height: 100%;*/\n    /*display: flex;*/\n    /*justify-content: center;*/\n    /*align-items: center;*/\n}\n\nmat-header-cell{\n    width: 23%;\n    text-align: center;\n}\nmat-header-cell:first-child{\n    width: 10%;\n    text-align: left;\n}\nmat-header-cell:last-child{\n    width: 23%;\n    text-align: right;\n}\nmat-header-cell:last-child span{\n    padding-right: 15px;\n}\n\nmat-cell{\n    text-align: center;\n}\nmat-cell:first-child{\n    text-align: left;\n}\nmat-cell:last-child{\n    text-align: right;\n}\n.mat-form-field-appearance-outline .mat-form-field-infix {\n  border: none!important;   \n}\nmat-form-field{\n    /*width: 100%;*/\n}\n/*end popup style*/\n#mat-report-header-search-box .mat-form-field-wrapper{\n    padding: 0;\n}\n.mat-input-element::placeholder{\n    color: inherit;\n}\n#mat-report-header-search-box .mat-form-field-infix {\n    border-top: 4px solid transparent;\n}\n#mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-prefix, #mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-suffix {\n    top: 5px;\n}\n#mat-report-header-search-box mat-form-field{\n    width: 300px;\n}",
        "controllerScript": "self.onInit = function() {\n    $(document).ready(function(){\n      self.onResize();\n    });\n    $scope = self.ctx.$scope;\n    $scope.color=self.ctx.widgetConfig.color;\n    $scope.bgColor=self.ctx.widgetConfig.backgroundColor;\n    let data=[];\n    \n    // global variables\n    let modbusData=[];\n    $scope.globalGatewayData = [];\n    $scope.functions = false;\n    $scope.currentGatewayIndex=-1;\n    $scope.currentEndpointIndex=-1;\n    \n    $scope.isGateway = true;\n    $scope.isGatewayEndpoint = false;\n    $scope.isGatewayDevice = false;\n    \n    self.ctx.gatewayList = [];\n    $scope.gatewayEndpointList = [];\n    $scope.gatewayDeviceList = [];\n    \n    $scope.settings=self.ctx.settings;\n    \n    $scope.selected_data = [];\n    $scope.isAllSelected = false;\n    $scope.isDeterminate = false;\n    $scope.displayedColumns = ['checkbox','gwName', 'host', 'port','endpoints', 'actions'];\n    \n    const tablePagination = {\n        pageIndex: 0,\n        pageSize: 5,\n        pageSizeOptions: [20, 50, 100],\n        handler: (pagination) => {\n            const { pageIndex, pageSize } = pagination;\n            if (pageSize !== undefined) {\n                tablePagination.pageSize = pageSize;\n            }\n            if (pageIndex !== undefined) {\n                tablePagination.pageIndex = pageIndex;\n            }\n        },\n        getFrom: () => {\n            const { pageIndex, pageSize } = tablePagination;\n            return pageIndex * pageSize;\n        },\n        getTo: () => {\n            const { pageIndex, pageSize } = tablePagination;\n            return pageIndex * pageSize + pageSize;\n        }\n    };\n    $scope.tablePagination=tablePagination;\n    window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n    window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;\n    window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange\n    \n    if (!window.indexedDB) {\n        window.alert(\"Your browser doesn't support a stable version of IndexedDB.\")\n    }\n    var db;\n    \n    let token = localStorage.getItem('jwt_token');\n    //let token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.sCLTWdBeL2U462uO9uEhST6jlJ2xLFQRkqtfbPCACm0'\n    let req=self.ctx.http.get(self.ctx.settings.url+'/opc/ocs', {headers: {Authorization: 'Bearer '+token}});\n    req.subscribe(res=>{\n        data=res;\n        let conn = window.indexedDB.open(self.ctx.settings.dbName, 1);\n        conn.onsuccess = function (event) {\n            db = conn.result;\n            clearData();\n            writeData(data);\n            $scope.readAll();\n        };\n        conn.onupgradeneeded = function (event, data) {\n            var db = event.target.result;\n            var objectStore = db.createObjectStore(\"modbus\", {keyPath: \"gw\"});\n        \n            objectStore.add({gw: 'gateway', value: data});\n        }\n        conn.onerror = function (event) {\n            // console.log(\"error: \");\n        };\n    });\n    \n    function clearData() {\n        const transaction = db.transaction([\"modbus\"], \"readwrite\");\n        transaction.oncomplete = (event) => {};\n        transaction.onerror = (event) => {};\n        const objectStore = transaction.objectStore(\"modbus\");\n        const objectStoreRequest = objectStore.clear();\n        objectStoreRequest.onsuccess = (event) => {\n        };\n    }\n    \n    function writeData(data){\n        let transaction = db.transaction([\"modbus\"], \"readwrite\")\n            .objectStore(\"modbus\");\n        transaction.add({gw: 'gateway', value: data});\n    }\n    \n    $scope.readAll=(type='gateway')=>{\n        modbusDt = [];\n        let objectStore = db.transaction(\"modbus\").objectStore(\"modbus\");\n        objectStore.openCursor().onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                modbusDt=cursor.value.value;\n                cursor.continue();\n            } else {\n                modbusDt.forEach(gwt=>{\n                    gwt['endpoints']=gwt.gwDevices.length;\n                    gwt.gwDevices.forEach(gwdevice=>{\n                        gwdevice['device']=gwdevice.devices.length;\n                        gwdevice.devices.forEach(sd=>{\n                            sd['totalDataPoints']=sd.dataPoints.length;\n                        })\n                    });\n                });\n                self.ctx.gatewayList = [...modbusDt];\n                if(type=='gateway'){\n                    $scope.dataSource = self.ctx.gatewayList;\n                }else if(type=='endpoint'){\n                    $scope.dataSource=self.ctx.gatewayList[$scope.currentGatewayIndex].gwDevices;\n                }else{\n                    $scope.dataSource=self.ctx.gatewayList[$scope.currentGatewayIndex].gwDevices[$scope.currentEndpointIndex].devices;\n                }\n                $scope.globalGatewayData=[...modbusDt];\n                self.ctx.detectChanges();\n                self.onResize();\n            }\n        };\n    }\n    \n    $scope.modify=(cData, type='gateway')=>{\n        var objectStore = db.transaction([\"modbus\"], \"readwrite\")\n            .objectStore(\"modbus\");\n        objectStore.openCursor().onsuccess = (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n                const updateData = cursor.value;\n                updateData.value=cData;\n                cursor.update(updateData);\n                cursor.continue();\n            }else{\n                $scope.readAll(type);\n            }\n        }\n    }\n    \n    $scope.remove=(id)=>{\n        if (confirm('Do you really want to delete?')){\n            const request = db.transaction('modbus', 'readwrite').objectStore('modbus');\n            request.delete(id.toString());\n            request.onsuccess = () => {\n            }\n            request.onerror = (err) => {\n            }\n            $scope.readAll();\n        }\n    }\n    deploymentErrorTemplate=`\n    <div aria-label=\"Info\" style=\"width: 700px\">\n        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <span fxFlex>\n            <div style=\"display:flex;justify-content:space-between;\">\n                <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                    Deployment Errors\n                </div>\n            </div>\n        </span>\n            <button mat-icon-button (click)=\"close()\"><mat-icon>close</mat-icon></button>\n        </mat-toolbar>\n        <div mat-dialog-content>\n        <ul *ngFor=\"let error of data.data\">\n            <li>{{error}}</li>\n        </ul>\n        </div>\n    </div>\n    `\n    $scope.deploy=()=>{\n        token = localStorage.getItem('jwt_token');\n        let postReq=self.ctx.http.post(self.ctx.settings.url+'/opc/ocs', $scope.globalGatewayData, {headers: {Authorization: 'Bearer '+token}});\n        postReq.subscribe(res=>{\n            if(res.msg=='success'){\n                let haltReq=self.ctx.http.get(self.ctx.settings.url+'/opc/halt', {headers: {Authorization: 'Bearer '+token}});\n                haltReq.subscribe(res2=>{\n                    self.ctx.showToast('success', 'Successfully deployed!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                }, error2=>{\n                    self.ctx.showToast('warn', 'Deployed Successfully without halting!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                })\n            }else{\n                customDialog.customDialog(deploymentErrorTemplate,\n                    InfoDialogController, {data:res}).subscribe(\n                    function(res3) {\n                        if (res3) {}\n                    }\n                );\n            }\n        }, error=>{\n            self.ctx.showToast('error', 'Deployment failed!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n        });\n    }\n    \n    // table processing\n    self.ctx.checkDeviceNameExist = function(device, isAdd){\n        for(let i=0;i<$scope.globalGatewayData.length;i++){\n            let endpoints = $scope.globalGatewayData[i].gwDevices;\n            for(let j=0;j<endpoints.length;j++){\n                let devices = endpoints[j].devices;\n                for(let k=0;k<devices.length;k++){\n                    if(!isAdd && devices[k].deviceName===self.ctx.editableDeviceName)continue;\n                    if(devices[k].deviceName===device.deviceName){\n                        self.ctx.showToast('warn', 'This device already exist', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                        return true;\n                    }\n                }\n            }\n        }\n        return false\n    }\n    $scope.styleOfCheckbox=function(row){\n        $('.tb-default mat-cell.checkboxcell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.widgetConfig.color);\n        return $scope.selected_data.indexOf(row)!==-1;\n    }\n    $scope.styleOfHeaderCheckbox=()=>{\n        $('.tb-default #mat-report-header-search-box .mat-checkbox-frame').css('border', '1px solid '+self.ctx.settings.tableHeaderTxtColor);\n        return $scope.isAllSelected;\n    }\n    \n    // dialog essentials\n    let $injector = self.ctx.$scope.$injector;\n    let customDialog = $injector.get(self.ctx.servicesMap.get('customDialog'));\n    \n    $scope.searchData = function(event, type='gateway'){\n        $scope.dataSource = type=='gateway'?$scope.globalGatewayData:type=='endpoint'?$scope.gatewayEndpointList.gwDevices:$scope.gatewayDeviceList.devices;\n        if(event.target.value!=''){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                if(type=='gateway'){\n                    if(ele.gwName.toLowerCase().search(event.target.value.toLowerCase())!=-1){\n                        return ele;\n                    }\n                }else if(type=='endpoint'){\n                    if(ele.title.toLowerCase().search(event.target.value.toLowerCase())!=-1){\n                        return ele;\n                    }\n                }else{\n                    if(ele.deviceName.toLowerCase().search(event.target.value.toLowerCase())!=-1){\n                        return ele;\n                    }\n                }\n            });\n        }\n        self.ctx.detectChanges()\n    }\n    \n    $scope.forwardChangePage = function(element){\n        tablePagination.pageIndex = 0;\n        tablePagination.pageSize = 5;\n        $scope.tablePagination=tablePagination;\n        $scope.isAllSelected = false;\n        $scope.selected_data = [];\n        \n        if($scope.isGateway){\n            $scope.isGateway = false;\n            $scope.isGatewayEndpoint = true;\n            $scope.gatewayEndpointList = element;\n            $scope.currentGatewayIndex=$scope.globalGatewayData.indexOf(element)\n            $scope.dataSource = $scope.gatewayEndpointList.gwDevices;\n            $scope.displayedColumns = ['checkbox','title','ipAddress','portNumber','device','actions'];\n        }else if($scope.isGatewayEndpoint){\n            $scope.isGatewayEndpoint = false;\n            $scope.isGatewayDevice = true;\n            $scope.displayedColumns = ['checkbox','deviceName','totalDataPoints', 'actions'];\n            $scope.gatewayDeviceList = element;\n            $scope.dataSource = $scope.gatewayDeviceList.devices;\n            $scope.currentEndpointIndex=$scope.globalGatewayData[$scope.currentGatewayIndex].gwDevices.indexOf(element);\n        }\n        self.ctx.detectChanges();\n        self.onResize();\n    }\n    $scope.backwardChangePage = function(element){\n        tablePagination.pageIndex = 0;\n        tablePagination.pageSize = 5;\n        $scope.tablePagination=tablePagination;\n        $scope.isAllSelected = false;\n        $scope.selected_data = [];\n        if($scope.isGatewayEndpoint){\n            $scope.isGateway = true;\n            $scope.isGatewayDevice = false;\n            $scope.isGatewayEndpoint=false;\n            $scope.dataSource = self.ctx.gatewayList;\n            $scope.displayedColumns = ['checkbox','gwName', 'host', 'port','endpoints', 'actions'];\n        }else if($scope.isGatewayDevice){\n            $scope.isGatewayDevice = false;\n            $scope.isGatewayEndpoint = true;\n            \n            $scope.globalGatewayData.forEach((ele,index)=>{\n                if(ele.gwName===$scope.gatewayEndpointList.gwName){\n                    $scope.dataSource = ele.gwDevices;\n                    $scope.gatewayEndpointList = ele;\n                }\n            });\n            // $scope.dataSource = self.ctx.gatewayEndpointList.gwDevices;\n            $scope.displayedColumns = ['checkbox','title','ipAddress','portNumber','device','actions'];\n        }\n        self.ctx.detectChanges();\n        self.onResize();\n    }\n    \n    $scope.singleElementSelectChange = function(event, element){\n        let key = $scope.isGateway?'gwName':$scope.isGatewayEndpoint?'title':'deviceName';\n        \n        if(event.checked){\n            $scope.selected_data.push(element)\n        }else{\n            $scope.selected_data = $scope.selected_data.filter(ele=>ele!=element)\n        }\n        ////////////////////////////\n        if($scope.selected_data.length!==$scope.dataSource.length){\n            $scope.isAllSelected = false\n        }else if($scope.selected_data.length===$scope.dataSource.length){\n            $scope.isAllSelected = true\n        }\n        if($scope.selected_data.length===0){\n            $scope.isAllSelected = false\n        }\n    }\n    $scope.allElementSelectChange = function(event){\n        $scope.isAllSelected=event.checked;\n        $scope.isAllSelected = event.checked;\n        $scope.isAllElementSelected = event.checked;\n        $scope.selected_data=event.checked?$scope.dataSource:[];\n        self.ctx.detectChanges();\n    }\n    \n    $scope.deleteGateway = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element\n            })\n            $scope.modify($scope.dataSource)\n        }\n    }\n    \n    $scope.deleteGatewayEndpoint = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element\n            })\n            $scope.globalGatewayData[$scope.currentGatewayIndex].gwDevices = [...$scope.dataSource]\n            $scope.modify($scope.globalGatewayData, 'endpoint')\n        }\n    }\n    $scope.deleteGatewayDevice = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element\n            });\n            $scope.globalGatewayData[$scope.currentGatewayIndex].gwDevices[$scope.currentEndpointIndex].devices = [...$scope.dataSource]\n            $scope.modify($scope.globalGatewayData, 'device');\n            self.ctx.detectChanges()\n        }\n    }\n    \n    $scope.openFunctionDialog = function(element){\n        $scope.functions = true;\n        $scope.openDialog(element);\n    }    \n    \n    \n    \n    ////////////// dialog\n    $scope.openDialog=function(dt={}){\n        if($scope.isGateway && !$scope.functions){\n            template=`\n    <form method=\"POST\" *ngIf=\"gatewayform\" [formGroup]=\"gatewayform\" (submit)=\"saveGateway($event,dt)\" style=\"padding: '0px'\">\n        <div aria-label=\"Info\" style=\"min-width: 500px;\">\n            <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                <span fxFlex>\n                    <div style=\"display:flex;justify-content:space-between;\">\n                        <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                            {{isAdd?'ADD':'UPDATE'}} OPC GATEWAY\n                        </div>\n                    </div>\n                </span>\n                <button mat-icon-button>\n                    <mat-icon>save</mat-icon>\n                </button>\n                <button mat-icon-button type=\"button\" (click)=\"close()\">\n                    <mat-icon>close</mat-icon>\n                </button>\n            </mat-toolbar>\n            <div mat-dialog-content>\n                <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                    <mat-label>Gateway Name</mat-label>\n                    <input required formControlName=\"gwName\" matInput placeholder=\"Gateway Name\">\n                </mat-form-field>\n                <div style=\"width: '100%'; display:'flex'; justify-content: 'space-between';gap: '4px';\">\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Host</mat-label>\n                        <input required formControlName=\"host\" matInput placeholder=\"Host\">\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Port</mat-label>\n                        <input required formControlName=\"port\" matInput placeholder=\"Port\">\n                    </mat-form-field>\n                </div>\n                <div style=\"width: '100%';display:'flex'; justify-content: 'space-between';gap: '4px';\">\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Username</mat-label>\n                        <input formControlName=\"user\" matInput placeholder=\"Username\">\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Password</mat-label>\n                        <input formControlName=\"password\" matInput placeholder=\"Password\">\n                    </mat-form-field>\n                </div>\n                <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                    <mat-label>Data fetch interval</mat-label>\n                    <input type=\"number\" required formControlName=\"dataFetchInterval\" matInput placeholder=\"Data fetch interval\">\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                    <mat-label>Attribute Topic</mat-label>\n                    <input required formControlName=\"attrTopic\" matInput placeholder=\"Attribute Topic\">\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                    <mat-label>Timeseries Topic</mat-label>\n                    <input required formControlName=\"tsTopic\" matInput placeholder=\"Timeseries Topic\">\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                    <mat-label>Timeseries Data Push Interval (seconds)</mat-label>\n                    <input type=\"number\" required formControlName=\"tsDataPushInterval\" matInput placeholder=\"Timeseries Data Push Interval (seconds)\">\n                </mat-form-field>\n                <div style=\"width: '100%'; display:'flex'; justify-content: 'space-between';gap: '4px';\">\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>RPC Pub Topic</mat-label>\n                        <input formControlName=\"rpcPubTopic\" matInput placeholder=\"RPC Pub Topic\">\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>RPC Sub Topic</mat-label>\n                        <input formControlName=\"rpcSubTopic\" matInput placeholder=\"RPC Sub Topic\">\n                    </mat-form-field>\n                </div>\n            </div>\n        </div>\n    </form>\n    `;\n        }else if($scope.isGateway && $scope.functions){\n            template=`\n    <form method=\"POST\" *ngIf=\"gatewayform\" [formGroup]=\"gatewayform\" (submit)=\"saveGatewayFunc($event,dt)\" style=\"padding: '0px'\">\n        <div aria-label=\"Info\" style=\"min-width: 700px;\">\n            <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                <span fxFlex>\n                    <div style=\"display:flex;justify-content:space-between;\">\n                        <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                            GATEWAY FUNCTIONS\n                        </div>\n                    </div>\n                </span>\n                <button mat-icon-button><mat-icon>save</mat-icon></button>\n                <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n            </mat-toolbar>\n            <div mat-dialog-content style=\"display:'flex';flex-direction:'column';gap:'5px'\">\n                <mat-tab-group>\n                    <mat-tab>\n                        <ng-template mat-tab-label>\n                            <label matTooltip=\"device: String,\\ncomError: Boolean,\\np_data: Object,\\ndata: Object,\\np_time: ts_ms,\\ntime: ts_ms,\\nendpoint: string,\\nattr: <AttrObject>,\\nts: <TsObject>\">Formater Function(msg)</label>\n                        </ng-template>\n                        <textarea rows=\"18\" placeholder=\"Formater Function (msg.attr, msg.ts)\" formControlName=\"formaterFunc\" style=\"width:'100%';padding:15px;background-color:'black';font-family: 'Courier';color: 'white';border-radius: '6px'\"></textarea>\n                    </mat-tab>\n                    \n                    \n                    <mat-tab>\n                        <ng-template mat-tab-label>\n                            <label matTooltip=\"device: String,\\ncomError: Boolean,\\np_data: Object,\\npa_data: Object,\\ndata: Object,\\np_time: ts_ms,\\npa_time: ts_ms,\\ntime: ts_ms,\\nendpoint: string,\\nattr: <AttrObject>,\\nts: <TsObject>\">Ts Formater Function(msg)</label>\n                        </ng-template>\n                        <textarea rows=\"18\" placeholder=\"Ts Formater Function (msg.attr, msg.ts)\" formControlName=\"tsFormaterFunc\" style=\"width:'100%';padding:15px;background-color:'black';font-family: 'Courier';color: 'white';border-radius: '6px'\"></textarea>\n                    </mat-tab>\n                </mat-tab-group>\n            </div>\n        </div>\n    </form>`;\n        }else if($scope.isGatewayEndpoint){\n            template=`\n    <form method=\"POST\" *ngIf=\"gatewayendpoitform\" [formGroup]=\"gatewayendpoitform\" (submit)=\"saveGatewayEndpoint($event,dt)\" style=\"padding: '0px'\">\n        <div aria-label=\"Info\" style=\"min-width: 700px;\">\n            <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                <span fxFlex>\n                    <div style=\"display:flex;justify-content:space-between;\">\n                        <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                            {{isAdd?'ADD':'UPDATE'}} OPC GATEWAY ENDPOINT\n                        </div>\n                    </div>\n                </span>\n                <button mat-icon-button>\n                    <mat-icon>save</mat-icon>\n                </button>\n                <button mat-icon-button type=\"button\" (click)=\"close()\">\n                    <mat-icon>close</mat-icon>\n                </button>\n            </mat-toolbar>\n            <div mat-dialog-content>\n                <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                    <mat-label>Title</mat-label>\n                    <input required formControlName=\"title\" matInput placeholder=\"Title\">\n                </mat-form-field>\n                <div style=\"width: '100%';display:'flex';justify-content: 'space-between';gap: '4px';\">\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Ip Address</mat-label>\n                        <input required formControlName=\"ipAddress\" matInput placeholder=\"Ip Address\">\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Port Number</mat-label>\n                        <input required formControlName=\"portNumber\" matInput placeholder=\"Port Number\">\n                    </mat-form-field>\n                </div>\n                <div style=\"width: '100%';display:'flex';justify-content: 'space-between';gap: '4px';\">\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Security Policy</mat-label>\n                        <mat-select required placeholder=\"Security Policy\" formControlName=\"securityPolicy\">\n                            <mat-option value=\"None\">None</mat-option>\n                            <mat-option value=\"Basic128\">Basic128</mat-option>\n                            <mat-option value=\"Basic192\">Basic192</mat-option>\n                            <mat-option value=\"Basic192Rsa15\">Basic192Rsa15</mat-option>\n                            <mat-option value=\"Basic256Rsa15\">Basic256Rsa15</mat-option>\n                            <mat-option value=\"Basic256Sha256\">Basic256Sha256</mat-option>\n                            <mat-option value=\"Aes128_Sha256\">Aes128_Sha256</mat-option>\n                            <mat-option value=\"Aes128_Sha256_RsaOaep\">Aes128_Sha256_RsaOaep</mat-option>\n                            <mat-option value=\"PubSub_Aes128_CTR\">PubSub_Aes128_CTR</mat-option>\n                            <mat-option value=\"PubSub_Aes256_CTR\">PubSub_Aes256_CTR</mat-option>\n                            <mat-option value=\"Basic128Rsa15\">Basic128Rsa15</mat-option>\n                            <mat-option value=\"Basic256\">Basic256</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Security Mode</mat-label>\n                        <mat-select required placeholder=\"Security Mode\" formControlName=\"securityMode\">\n                            <mat-option value=\"None\">None</mat-option>\n                            <mat-option value=\"Sign\">Sign</mat-option>\n                            <mat-option value=\"SignAndEncrypt\">Sign&Encrypt</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div style=\"margin-bottom: '15px'\">\n                    <mat-radio-group aria-label=\"Select an option\" style=\"display:'flex';gap:'20px';margin-left:'15px'\" (change)=\"changeUserState($event)\">\n                        <mat-radio-button [checked]=\"gatewayendpoitform.get('anonymous').value\" value=\"anonymous\">Anonymous</mat-radio-button>\n                        <mat-radio-button [checked]=\"gatewayendpoitform.get('login').value\" value=\"login\">Login</mat-radio-button>\n                        <mat-radio-button [checked]=\"gatewayendpoitform.get('userCertificate').value\" value=\"userCertificate\">User Certificate</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div style=\"width: '100%';display:'flex';justify-content: 'space-between';gap: '4px';\" *ngIf=\"gatewayendpoitform.get('login').value\">\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Username</mat-label>\n                        <input formControlName=\"user\" matInput placeholder=\"Username\">\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Password</mat-label>\n                        <input formControlName=\"password\" matInput placeholder=\"Password\">\n                    </mat-form-field>\n                </div>\n                <div style=\"width: '100%';display:'flex';justify-content: 'space-between';gap: '4px';\" *ngIf=\"gatewayendpoitform.get('userCertificate').value\">\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Certificate</mat-label>\n                        <textarea rows=\"10\" matInput placeholder=\"Certificate\" formControlName=\"certificate\"></textarea>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                        <mat-label>Private key</mat-label>\n                        <textarea rows=\"10\" matInput placeholder=\"Private key\" formControlName=\"privateKey\"></textarea>\n                    </mat-form-field>\n                </div>\n                <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                    <mat-label>Node Ids</mat-label>\n                    <mat-chip-list #chipList aria-label=\"Node Ids\">\n                        <mat-chip *ngFor=\"let nodeId of gatewayendpoitform.get('nodeIds').value; let nodeIndex=index\" (removed)=\"removeNodeIds(nodeIndex)\">\n                            {{nodeId}}\n                            <mat-icon matChipRemove>cancel</mat-icon>\n                        </mat-chip>\n                        <input placeholder=\"New node id...\" [matChipInputFor]=\"chipList\" matInput [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" (matChipInputTokenEnd)=\"addNodeIds($event)\">\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n        </div>\n    </form>\n                `;\n        }else{\n            template=`\n    <form method=\"POST\" *ngIf=\"deviceform\" [formGroup]=\"deviceform\" (submit)=\"saveDevice()\" style=\"padding: '0px'\">\n        <div aria-label=\"Info\" style=\"min-width: 1200px;\">\n            <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                <span fxFlex>\n                    <div style=\"display:flex;justify-content:space-between;\">\n                        <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                            {{isAdd?'ADD':'UPDATE'}} OPC DEVICE\n                        </div>\n                    </div>\n                </span>\n                <button mat-icon-button>\n                    <mat-icon>save</mat-icon>\n                </button>\n                <button mat-icon-button type=\"button\" (click)=\"close()\">\n                    <mat-icon>close</mat-icon>\n                </button>\n            </mat-toolbar>\n            <div mat-dialog-content>\n                <div formArrayName=\"devices\">\n                    <div *ngFor=\"let device of deviceform.get('devices').controls; let deviceIndex=index\">\n                        <div [formGroupName]=\"deviceIndex\">\n                            <cdk-accordion *ngIf=\"isAdd\" class=\"example-accordion\" style=\"display: 'block';min-width: '500px'; cursor:'pointer'\">\n                                <cdk-accordion-item class=\"example-accordion-item\" style=\"border-radius: '5px'; display: 'block'; border: 'solid 1px #ccc'; padding:'10px'; margin-bottom:'5px'\" role=\"button\" tabindex=\"0\" [attr.id]=\"'accordion-header-' + deviceIndex\" [attr.aria-expanded]=\"selectedIndex==deviceIndex?true:false\" [attr.aria-controls]=\"'accordion-body-' + deviceIndex\">\n                                    <div class=\"example-accordion-item-header\" (click)=\"accordionToggle(deviceIndex)\" [style.margin-bottom]=\"selectedIndex==deviceIndex?'15px':'4px'\" style=\"display:'flex'; justify-content:'space-between'\">\n                                        <span>\n                                            {{ device.value.deviceName==''?'Device': device.value.deviceName}}\n                                        </span>\n                                        <span class=\"example-accordion-item-description\" style=\"text-align:'right'\">\n                                            <span *ngIf=\"selectedIndex==deviceIndex\">\n                                                <mat-icon>expand_less</mat-icon>\n                                            </span>\n                                            <span *ngIf=\"!(selectedIndex==deviceIndex)\">\n                                                <mat-icon>expand_more</mat-icon>\n                                            </span>\n                                        </span>\n                                    </div>\n                                    <div class=\"example-accordion-item-body\" role=\"region\" [style.display]=\"selectedIndex==deviceIndex ? '' : 'none'\" [attr.id]=\"'accordion-body-' + deviceIndex\" [attr.aria-labelledby]=\"'accordion-header-' + deviceIndex\">\n                                        <div style=\"width:'100%'; background-color: '#FEFCF3'; padding: '10px';margin-bottom: '5px'\">\n                                            <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                                                <mat-label>Device Name</mat-label>\n                                                <input required matInput placeholder=\"Device Name\" formControlName=\"deviceName\">\n                                            </mat-form-field>\n                                            <div formArrayName=\"dataPoints\" *ngIf=\"!isEditorOpen\">\n                                                <div *ngFor=\"let dataPoint of device.get('dataPoints').controls; let dpIndex=index\">\n                                                    <div [formGroupName]=\"dpIndex\" style=\"width: '100%'; display:'flex'; justify-content: 'space-between'; align-items: 'center'; gap: '4px';\">\n                                                        <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                                                            <mat-label>Key</mat-label>\n                                                            <input required matInput placeholder=\"Key\" formControlName=\"key\">\n                                                        </mat-form-field>\n                                                        <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                                                            <mat-label>Parent Tag Name</mat-label>\n                                                            <input required matInput placeholder=\"Parent Tag Name\" formControlName=\"pdName\">\n                                                        </mat-form-field>\n                                                        <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                                                            <mat-label>Child Tag Name</mat-label>\n                                                            <input required matInput placeholder=\"Child Tag Name\" formControlName=\"cdName\">\n                                                        </mat-form-field>\n                                                        <div style=\"margin-bottom: '20px'\" *ngIf=\"device.get('dataPoints').length>1\">\n                                                            <button mat-icon-button (click)=\"deleteDataPoints(deviceIndex, dpIndex)\">\n                                                                <mat-icon>delete</mat-icon>\n                                                            </button>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div *ngIf=\"isEditorOpen\">\n                                                <mat-form-field appearance=\"outline\" style=\"width:100%\">\n                                                  <mat-label>Data points</mat-label>\n                                                  <textarea [(ngModel)]=\"dataPointsStr\" rows=\"12\" matInput formControlName=\"dataPointsStr\"></textarea>\n                                                </mat-form-field>\n                                            </div>\n                                            \n                                            <div style=\"margin-top:30px;display:flex;justify-content:space-between\">\n                                                <div>\n                                                    <button *ngIf=\"!isEditorOpen\" mat-stroked-button (click)=\"addDataPoints(deviceIndex)\" [disabled]=\"deviceform.get('devices').at(deviceIndex).get('dataPoints').invalid\" style=\"top: -20px\"> + Add new data point</button>\n                                                </div>\n                                                <div style=\"display:flex;gap:5px\">\n                                                    <button type='button' (click)=\"copyDataPoints(device.value, deviceIndex)\" mat-stroked-button style=\"top: -20px\"> <mat-icon>content_copy</mat-icon> Copy\n                                                    </button>\n                                                    <button *ngIf=\"!isEditorOpen\" (click)=\"openEditor(device.value, deviceIndex)\" mat-stroked-button style=\"top: -20px\"> Open editor\n                                                    </button>\n                                                    <button (click)=\"saveAndCloseEditor(device.value, deviceIndex)\" *ngIf=\"isEditorOpen\" mat-stroked-button style=\"top: -20px\">Apply\n                                                    </button>\n                                                </div>\n                                            </div>\n                                            <div style=\"text-align: right;margin-top:20px\" *ngIf=\"deviceform.value.devices.length>1\">\n                                                <button mat-stroked-button (click)=\"removeDevice(deviceIndex)\"> Remove device </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </cdk-accordion-item>\n                            </cdk-accordion>\n                            <div *ngIf=\"!isAdd\" class=\"example-accordion-item-body\" role=\"region\" [style.display]=\"selectedIndex==deviceIndex ? '' : 'none'\" [attr.id]=\"'accordion-body-' + deviceIndex\" [attr.aria-labelledby]=\"'accordion-header-' + deviceIndex\">\n                                <div style=\"width:'100%'; background-color: '#FEFCF3'; padding: '10px';margin-bottom: '5px'\">\n                                    <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                                        <mat-label>Device Name</mat-label>\n                                        <input required matInput placeholder=\"Device Name\" formControlName=\"deviceName\">\n                                    </mat-form-field>\n                                    <div formArrayName=\"dataPoints\" *ngIf=\"!isEditorOpen\">\n                                        <div *ngFor=\"let dataPoint of device.get('dataPoints').controls; let dpIndex=index\">\n                                            <div [formGroupName]=\"dpIndex\" style=\"width: '100%'; display:'flex'; justify-content: 'space-between'; align-items: 'center'; gap: '4px';\">\n                                                <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                                                    <mat-label>Key</mat-label>\n                                                    <input required matInput placeholder=\"Key\" formControlName=\"key\">\n                                                </mat-form-field>\n                                                <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                                                    <mat-label>Parent Tag Name</mat-label>\n                                                    <input required matInput placeholder=\"Parent Tag Name\" formControlName=\"pdName\">\n                                                </mat-form-field>\n                                                <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                                                    <mat-label>Child Tag Name</mat-label>\n                                                    <input required matInput placeholder=\"Child Tag Name\" formControlName=\"cdName\">\n                                                </mat-form-field>\n                                                <div style=\"margin-bottom: '20px'\" *ngIf=\"device.get('dataPoints').length>1\">\n                                                    <button mat-icon-button (click)=\"deleteDataPoints(deviceIndex, dpIndex)\">\n                                                        <mat-icon>delete</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div *ngIf=\"isEditorOpen\">\n                                        <mat-form-field appearance=\"outline\" style=\"width:100%\">\n                                          <mat-label>Data points</mat-label>\n                                          <textarea [(ngModel)]=\"dataPointsStr\" rows=\"12\" matInput formControlName=\"dataPointsStr\"></textarea>\n                                        </mat-form-field>\n                                    </div>\n                                    \n                                    <div style=\"margin-top:30px;display:flex;justify-content:space-between\">\n                                        <div>\n                                            <button *ngIf=\"!isEditorOpen\" mat-stroked-button (click)=\"addDataPoints(deviceIndex)\" [disabled]=\"deviceform.get('devices').at(deviceIndex).get('dataPoints').invalid\" style=\"top: -20px\"> + Add new data point</button>\n                                        </div>\n                                        <div style=\"display:flex;gap:5px\">\n                                            <button type='button' (click)=\"copyDataPoints(device.value, deviceIndex)\" mat-stroked-button style=\"top: -20px\"> <mat-icon>content_copy</mat-icon> Copy\n                                            </button>\n                                            <button *ngIf=\"!isEditorOpen\" (click)=\"openEditor(device.value, deviceIndex)\" mat-stroked-button style=\"top: -20px\"> Open editor\n                                            </button>\n                                            <button (click)=\"saveAndCloseEditor(device.value, deviceIndex)\" *ngIf=\"isEditorOpen\" mat-stroked-button style=\"top: -20px\">Apply\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div (click)=\"addDevices()\" style=\"margin-top: '15px'\" *ngIf=\"isAdd\">\n                    <button [disabled]=\"!deviceform.valid\" style=\"margin-bottom: 15px;border-radius: 5px;padding: 5px;background-color: #ddebf0;cursor: pointer;border:'none'\">+ Add new device</button>\n                </div>\n            </div>\n        </div>\n    </form>`;\n        }\n        \n        customDialog.customDialog(template,\n            InfoDialogController, {data:dt}).subscribe(\n            function(res) {\n                if (res) {}\n            }\n        );\n        $scope.functions = false;\n    }\n\n    function InfoDialogController(instance) {\n        instance.separatorKeysCodes = [13, 188];\n        instance.isEditorOpen=false;\n        self.ctx.editableDeviceName = instance.data.data.deviceName;\n        instance.accordionItem={expanded:false};\n        instance.accordionToggle=(index)=>{\n            instance.accordionItem.expanded=instance.selectedIndex==index?!instance.accordionItem.expanded:true;\n            instance.selectedIndex=instance.accordionItem.expanded?index:-1;\n        }\n         \n        // change login state\n        instance.changeUserState = function(event, name){\n            instance.gatewayendpoitform.get('anonymous').setValue(event.value=='anonymous')\n            instance.gatewayendpoitform.get('login').setValue(event.value=='login')\n            instance.gatewayendpoitform.get('userCertificate').setValue(event.value=='userCertificate')\n            if(event.value=='anonymous'){\n                instance.gatewayendpoitform.get('user').setValue('')\n                instance.gatewayendpoitform.get('password').setValue('')\n                instance.gatewayendpoitform.get('certificate').setValue('')\n                instance.gatewayendpoitform.get('privateKey').setValue('')\n            }\n            if(event.value=='login'){\n                instance.gatewayendpoitform.get('certificate').setValue('')\n                instance.gatewayendpoitform.get('privateKey').setValue('')\n            }\n            if(event.value=='userCertificate'){\n                instance.gatewayendpoitform.get('user').setValue('')\n                instance.gatewayendpoitform.get('password').setValue('')\n            }\n            self.ctx.detectChanges();\n        }\n        \n        // instance.changeType();\n        if($scope.isGateway){\n            instance.isAdd=instance.data.data.gwName==undefined;\n        }else if($scope.isGatewayEndpoint){\n            instance.isAdd=instance.data.data.title==undefined;\n        }else{\n            instance.isAdd=instance.data.data.deviceName==undefined;\n        }\n        \n        instance.gatewayform=instance.fb.group({\n            gwName: [instance.data.data?.gwName?instance.data.data.gwName:''],\n            user: [instance.data.data?.user?instance.data.data.user:''],\n            password: [instance.data.data?.password?instance.data.data.password:''],\n            host: [instance.data.data?.host?instance.data.data.host:''],\n            port: [instance.data.data?.port?instance.data.data.port:''],\n            dataFetchInterval: [instance.data.data?.dataFetchInterval?instance.data.data.dataFetchInterval:''],\n            tsTopic: [instance.data.data?.tsTopic?instance.data.data.tsTopic:''],\n            tsDataPushInterval: [instance.data.data?.tsDataPushInterval?instance.data.data.tsDataPushInterval:300],\n            attrTopic: [instance.data.data?.attrTopic?instance.data.data.attrTopic:''],\n            rpcPubTopic: [instance.data.data?.rpcPubTopic?instance.data.data.rpcPubTopic:''],\n            rpcSubTopic: [instance.data.data?.rpcSubTopic?instance.data.data.rpcSubTopic:''],\n            formaterFunc: [instance.data.data?.formaterFunc?instance.data.data.formaterFunc:'return msg;'],\n            tsFormaterFunc: [instance.data.data?.tsFormaterFunc?instance.data.data.tsFormaterFunc:'return msg;'],\n            gwDevices: [instance.data.data?.gwDevices?instance.data.data.gwDevices:[]]\n        });\n        \n        instance.saveGateway=()=>{\n            if(instance.gatewayform.valid){\n                if(instance.isAdd){\n                    gwData=[...$scope.dataSource];\n                    gwData.push(instance.gatewayform.value);\n                    $scope.modify(gwData);\n                    self.ctx.showToast('success', 'Gateway added successfuly', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                }else{\n                    indx=$scope.dataSource.indexOf(instance.data.data);\n                    let gwData=[...$scope.dataSource];\n                    gwData[indx]=instance.gatewayform.value\n                    $scope.modify(gwData);\n                    self.ctx.showToast('success', 'Gateway updated successfuly', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                }\n                instance.close();\n            }\n        }\n        instance.saveGatewayFunc=()=>{\n            if(instance.gatewayform.valid){\n                indx=$scope.dataSource.indexOf(instance.data.data);\n                let gwData=[...$scope.dataSource];\n                gwData[indx]=instance.gatewayform.value\n                $scope.modify(gwData);\n                self.ctx.showToast('success', 'Function saved successfuly', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                instance.close();\n            }\n            \n        }\n        \n        /////////////////////////////// gateway ENDPOINT\n        instance.gatewayendpoitform=instance.fb.group({\n            title: [instance.data.data?.title?instance.data.data.title:''],\n            ipAddress: [instance.data.data?.ipAddress?instance.data.data.ipAddress:''],\n            portNumber: [instance.data.data?.portNumber?instance.data.data.portNumber:''],\n            securityPolicy: [instance.data.data?.securityPolicy?instance.data.data.securityPolicy:'None'],\n            securityMode: [instance.data.data?.securityMode?instance.data.data.securityMode:'None'],\n            anonymous: [String(instance.data.data?.anonymous)!='undefined'?instance.data.data.anonymous:true],\n            userCertificate: [instance.data.data?.userCertificate?instance.data.data.userCertificate:false],\n            login: [instance.data.data?.login?instance.data.data.login:false],\n            user: [instance.data.data?.user?instance.data.data.user:''],\n            password: [instance.data.data?.password?instance.data.data.password:''],\n            certificate: [instance.data.data?.certificate?instance.data.data.certificate:''],\n            privateKey: [instance.data.data?.privateKey?instance.data.data.privateKey:''],\n            nodeIds: [instance.data.data?.nodeIds?instance.data.data.nodeIds:[]],\n            devices: [instance.data.data?.devices?instance.data.data.devices:[]]\n        });\n        instance.addNodeIds=(e)=>{\n            const input = e.input;\n            const value = e.value;\n            if ((value || '').trim()) {\n              const control = instance.gatewayendpoitform.get('nodeIds');\n              control.value.push(instance.fb.control(value.trim()).value);\n            }\n            input.value = '';\n        }\n        instance.removeNodeIds=(index)=>{\n            instance.gatewayendpoitform.get('nodeIds').value = instance.gatewayendpoitform.get('nodeIds').value.filter((ele,i)=>{\n                return i!=index\n            });\n            instance.gatewayendpoitform.get('nodeIds').setValue(instance.gatewayendpoitform.get('nodeIds').value);\n        }\n        \n        instance.saveGatewayEndpoint=()=>{\n            if(instance.gatewayendpoitform.valid){\n                if(instance.gatewayendpoitform.value.nodeIds.length==0){\n                    self.ctx.showToast('warn', 'Node ID is required', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                    return;\n                }\n                let gatewayendpoitData=[...$scope.dataSource];\n                if(instance.isAdd){\n                    gatewayendpoitData.push(instance.gatewayendpoitform.value);\n                    $scope.dataSource = [...$scope.dataSource, instance.gatewayendpoitform.value];\n                    self.ctx.detectChanges();\n                }else{\n                    let idx = gatewayendpoitData.indexOf(instance.data.data);\n                    gatewayendpoitData[idx] = instance.gatewayendpoitform.value;\n                    $scope.dataSource = [...gatewayendpoitData]\n                    self.ctx.detectChanges();\n                }\n                $scope.globalGatewayData[$scope.currentGatewayIndex].gwDevices = [...gatewayendpoitData]\n                $scope.modify($scope.globalGatewayData, 'endpoint');\n                instance.close();\n            }\n        }\n        \n        //////////////////////////////// gateway device\n        instance.devices = function(){\n            return instance.deviceform.get('devices');\n        }\n        instance.addDevices=()=>{\n            instance.deviceform.get('devices')?.push(newDevice());\n            instance.deviceform.get('devices')?.at(instance.deviceform.get('devices').length-1).get('dataPoints')?.push(newDataPoint());\n            instance.selectedIndex=instance.deviceform.get('devices').length-1;\n        }\n        instance.removeDevice=(index)=>{\n            instance.deviceform.get('devices').removeAt(index);\n        }\n          \n        instance.addDataPoints = (dpIndex)=> {\n            const dataPoint = instance.devices().at(dpIndex)?.get('dataPoints');\n            dataPoint.push(newDataPoint());\n        }\n        \n        if(instance.data.data.deviceName){\n            instance.deviceform = instance.fb.group({\n                devices: instance.fb.array([])\n            })\n            dvcArray=instance.fb.array([]);\n            \n            // insert existing data\n            device = instance.data.data;\n            let dvcObj=instance.fb.group({\n                deviceName:[device.deviceName],\n                dataPoints: instance.fb.array([]),\n                dataPointsStr:['']\n            })\n            dataPointArray=instance.fb.array([]);\n            device.dataPoints.forEach(datapoint=>{\n                dataPointArray.push(instance.fb.group({\n                    key: [datapoint.key],\n                    pdName: [datapoint.pdName],\n                    cdName: [datapoint.cdName]\n                }));\n            });\n            dvcObj.setControl('dataPoints', dataPointArray)\n            dvcArray.push(dvcObj);\n            instance.deviceform.setControl('devices', dvcArray);\n            instance.accordionToggle(instance.deviceform.value.devices.length-1)\n        }else{\n            instance.deviceform = instance.fb.group({\n                devices: instance.fb.array([])\n            })\n            instance.addDevices();\n            instance.accordionToggle(0)\n        }\n        \n        function newDevice(){\n            return instance.fb.group({\n              deviceName: [''],\n              dataPoints: instance.fb.array([]),\n              dataPointsStr:['']\n            })\n          }\n        function newDataPoint(){\n            return instance.fb.group({\n              key: [''],\n              pdName: [''],\n              cdName: ['']\n            })\n          }\n        \n        self.ctx.checkExistKey = function(deviceIndex){\n            let dataPoints = instance.devices().at(deviceIndex)?.get('dataPoints').value;\n            // let key = dataPoint.value.key;\n            \n            for(let i=0;i<dataPoints.length-1;i++){\n                for(let j=i+1;j<dataPoints.length;j++){\n                    if(dataPoints[i].key===dataPoints[j].key){\n                        alert(`row #${i+1} & row #${j+1} keys are duplicate`);\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        \n        instance.deleteDataPoints = (deviceIndex, dpIndex)=> {\n            const dataPoint = instance.devices().at(deviceIndex)?.get('dataPoints');\n            dataPoint.removeAt(dpIndex);\n        }\n        instance.changeType = function() {\n            instance.devices().clear()\n            instance.addDevices()\n        }\n        instance.dataPointsStr='';\n        // instance.dataPointsTextChange=(event)=>{\n        //     instance.dataPointsStr = event.target.value;\n        // }\n        let dataPointFieldToText = (element,deviceIndex) => {\n            instance.dataPointsStr='';\n            element.dataPoints.forEach((ele,index)=>{\n                if(ele['key']&&ele['pdName']&&ele['cdName']){\n                    if(instance.dataPointsStr!=''){\n                        instance.dataPointsStr=instance.dataPointsStr+'\\n'+ele['key']+','+ele['pdName']+','+ele['cdName'];\n                    }else{\n                        instance.dataPointsStr=ele['key']+','+ele['pdName']+','+ele['cdName'];\n                    }\n                    \n                }\n            })\n            instance.devices().at(deviceIndex)?.get('dataPointsStr').setValue(instance.dataPointsStr);\n        }\n        instance.openEditor=(element, deviceIndex)=>{\n            dataPointFieldToText(element,deviceIndex);\n            instance.isEditorOpen=true;\n        }\n        instance.copyDataPoints = (element,deviceIndex) =>{\n            if(instance.isEditorOpen){\n                navigator.clipboard.writeText(instance.dataPointsStr);\n            }else{\n                dataPointFieldToText(element,deviceIndex);\n                let dataPointsStr = instance.deviceform.value.devices[deviceIndex].dataPointsStr;\n                navigator.clipboard.writeText(dataPointsStr);\n            }\n            \n            self.ctx.showToast('success', 'Content Copied!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n            return;\n        }\n        instance.saveAndCloseEditor=(device, deviceIndex)=>{\n            instance.isEditorOpen=false;\n            \n            let splitDataPoints = instance.deviceform.value.devices[deviceIndex].dataPointsStr.split('\\n')\n            dataPointArray=instance.fb.array([]);\n            instance.devices().at(deviceIndex).setControl('dataPoints', dataPointArray)\n            splitDataPoints.forEach(datapoint=>{\n                splitByComma = datapoint.split(',');\n                \n                dataPointArray.push(instance.fb.group({\n                    key: [splitByComma[0].trim()],\n                    pdName: [splitByComma[1].trim()],\n                    cdName: [splitByComma[2].trim()]\n                }));\n            });\n            instance.devices().at(deviceIndex).setControl('dataPoints', dataPointArray)\n            \n        }\n        \n        instance.saveDevice=()=>{\n            if(instance.deviceform.valid){\n                // check device exist\n                let isDeviceExist;\n                let isKeyExist;\n                instance.deviceform.value.devices.forEach((ele,index)=>{\n                    isKeyExist = self.ctx.checkExistKey(index);\n                    isDeviceExist = self.ctx.checkDeviceNameExist(ele, instance.isAdd);\n                })\n                if(isDeviceExist || isKeyExist){\n                    return;\n                } // end check device exist\n                \n                if(instance.isAdd){\n                    let devices = instance.deviceform.value.devices;\n                    for(let i=0;i<devices.length-1;i++){\n                        for(let j=i+1;j<devices.length;j++){\n                            if(devices[i].deviceName===devices[j].deviceName){\n                                alert(\"This device already exist\");\n                                return;\n                            }\n                        }\n                    }\n                    devices.forEach((ele,index)=>{\n                        $scope.dataSource.push(ele);\n                    })\n                    $scope.dataSource = [...$scope.dataSource];\n                    self.ctx.detectChanges();\n                }else{\n                    gatewaydeviceData=[...$scope.dataSource];\n                    instance.deviceform.value.devices.forEach((ele,index)=>{\n                        $scope.dataSource.push(ele);\n                    });\n                    let idx = gatewaydeviceData.indexOf(instance.data.data);\n                    gatewaydeviceData[idx] = instance.deviceform.value.devices[0];\n                    $scope.dataSource = [...gatewaydeviceData]\n                    self.ctx.detectChanges();\n                }\n                \n                $scope.globalGatewayData[$scope.currentGatewayIndex].gwDevices[$scope.currentEndpointIndex].devices = [...$scope.dataSource]\n                $scope.modify($scope.globalGatewayData, 'device');\n                instance.close();\n            }\n        }\n        instance.close=()=>{\n            instance.dialogRef.close(null);\n        }\n    }\n    $scope.exportJSON = function(dt={}){\n        console.log('element', dt);\n        // if(dt!={}){\n            \n        // }\n        if(Object.keys(dt).length){\n            y=dt\n        }else{\n            y=JSON.parse(JSON.stringify($scope.globalGatewayData))\n        }\n        (Object.keys(dt).length?[dt]:y).forEach(ep=>{\n            delete ep.endpoints;\n            ep.gwDevices.forEach(epdv=>{\n                delete epdv.device;\n                epdv.devices.forEach(sdvc=>{\n                    delete sdvc.totalDataPoints;\n                    delete sdvc.dataPointsStr;\n                });\n            });\n        });\n        let dataStr = JSON.stringify(y);\n        let dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    \n        let linkElement = document.createElement('a');\n        linkElement.setAttribute('href', dataUri);\n        linkElement.setAttribute('download', 'modbus_opc'+moment().format('YYYYMMDDHHmmss')+'.json');\n        linkElement.click();\n    }\n    \n    $scope.openImportDialog = function(){\n        template=`\n            <div aria-label=\"Info\" style=\"min-width: 500px;\">\n                <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                    <span fxFlex>\n                        <div style=\"display:flex;justify-content:space-between;\">\n                            <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                IMPORT JSON\n                            </div>\n                        </div>\n                    </span>\n                    <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                </mat-toolbar>\n                <div mat-dialog-content>\n                    <input [(ngModel)]=\"importFile\" type=\"file\" id=\"file\" accept=\".json\">\n                </div>\n                <div mat-dialog-actions align=\"end\">\n                    <button mat-button color=\"primary\" (click)=\"close()\">Cancel</button>\n                    <button mat-button color=\"primary\" (click)=\"importJSON()\">Import</button>\n                </div>\n            </div>\n        `\n        customDialog.customDialog(template,\n            importDialogController, {data:{}}).subscribe(\n            function(res) {\n                if (res) {}\n            }\n        );\n    }\n    function importDialogController(instance){\n        instance.importFile;\n        \n        function checkImportValidation(json){\n            let gateway = ['attrTopic','dataFetchInterval','formaterFunc','gwDevices','gwName','host','port','tsDataPushInterval','tsFormaterFunc','tsTopic'];\n            let endpoints = ['anonymous','certificate','devices','ipAddress','login','nodeIds','portNumber','securityMode','securityPolicy','title'];\n            let devices = ['deviceName','dataPoints'];\n            let dataPoints = ['cdName','key','pdName'];\n            \n            \n            for(let i=0;i<json.length;i++){\n                let gateway = ['attrTopic','dataFetchInterval','formaterFunc','gwDevices','gwName','host','port','tsDataPushInterval','tsFormaterFunc','tsTopic'];\n                for(let ele in json[i]){\n                    if(gateway.indexOf(ele)!=-1){\n                        gateway = gateway.filter(el=>el!=ele)\n                    }\n                    \n                }\n                if(gateway.length)return false;\n                \n                for(let j=0;j<json[i].gwDevices.length;j++){\n                    let endpoints = ['anonymous','certificate','devices','ipAddress','login','nodeIds','portNumber','securityMode','securityPolicy','title'];\n                    for(let ele in json[i].gwDevices[j]){\n                        if(endpoints.indexOf(ele)!=-1){\n                            endpoints = endpoints.filter(el=>el!=ele)\n                        }\n                        \n                    }\n                    if(endpoints.length)return false;\n                    \n                    for(let k=0;k<json[i].gwDevices[j].devices.length;k++){\n                        let devices = ['deviceName','dataPoints'];\n                        for(let ele in json[i].gwDevices[j].devices[k]){\n                            if(devices.indexOf(ele)!=-1){\n                                devices = devices.filter(el=>el!=ele)\n                            }\n                        }\n                        if(devices.length)return false;\n                        for(let l=0;l<json[i].gwDevices[j].devices[k].dataPoints.length;l++){\n                            let dataPoints = ['cdName','key','pdName'];\n                            for(let ele in json[i].gwDevices[j].devices[k].dataPoints[l]){\n                                if(dataPoints.indexOf(ele)!=-1){\n                                    dataPoints = dataPoints.filter(el=>el!=ele)\n                                }\n                            }\n                            if(dataPoints.length)return false;\n                        }\n                    }\n                }\n            }\n            \n            return true;\n        }\n        function logFile (event) {\n        \tlet str = event.target.result;\n        \tlet json = JSON.parse(str);\n        \tif(!Array.isArray(json)){\n        \t    json = [json]\n        \t    $scope.globalGatewayData = [...$scope.globalGatewayData, ...json]\n        \t}else{\n        \t    $scope.globalGatewayData = [...json]\n        \t}\n        \t\n        \tif(!checkImportValidation(json)){\n        \t    self.ctx.showToast('error', 'Invalid gateway data!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n        \t    return;\n        \t}\n        \t\n        \t$scope.modify($scope.globalGatewayData);\n        \tself.ctx.detectChanges();\n        }\n        instance.importJSON = function(event){\n            \n            if (!file.value.length) return;\n            let reader = new FileReader();\n            reader.onload = logFile;\n            reader.readAsText(file.files[0])\n            self.ctx.showToast('success', 'Modbus OPC imported successfully!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n            instance.close();\n        }\n        instance.close=()=>{\n            instance.dialogRef.close(null);\n        }\n    }\n    self.ctx.detectChanges()\n    self.onResize();    \n};\n\n\nself.onResize=function(){\n    $scope=self.ctx.$scope;\n    $scope.settings=self.ctx.settings;\n    $scope.height=self.ctx.isMobile?self.ctx.height/2:self.ctx.height-120;\n    $scope.formHeight=self.ctx.isMobile?self.ctx.height/2:self.ctx.height;\n    function dsts(){\n        $('mat-form-field.textarea_field .mat-form-field-outline.mat-form-field-outline-thick').css('background-color', 'black')\n        $('mat-paginator.report-form-paginator .mat-select-value-text').css('color', self.ctx.widgetConfig.color);\n        $('mat-paginator.report-form-paginator .mat-select-arrow').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default .report-form-paginator .mat-select-value').css('color',self.ctx.widgetConfig.color+'!important');\n        $('.tb-default .report-form-paginator .mat-form-field-appearance-legacy .mat-form-field-underline').css({'background-color': self.ctx.widgetConfig.color});\n        $('.tb-default .mat-icon-button.mat-button-disabled.mat-button-disabled').css('color', self.ctx.settings.disabledPaginationColor);\n        $('.tb-default .mat-icon-button.mat-button-enabled.mat-button-enabled').css('color', self.ctx.settings.enabledPaginationColor);\n    }\n    dsts();\n    $(document).ready(function() {\n        dsts();\n    });\n    self.ctx.detectChanges();\n };\n\nself.onDestroy = function() {\n};\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\n            \"dbName\",\n            \"url\"\n        ],\n        \"properties\": {\n            \"dbName\":{\n                \"title\":\"indexedDB Name\",\n                \"type\":\"string\",\n                \"default\": \"modbusgwopc\"\n            },\n            \"url\":{\n                \"title\":\"API URL\",\n                \"type\":\"string\",\n                \"default\": \"http://150.150.50.241:3000/api\"\n            },\n            \"addBtnBgColor\":{\n                \"title\":\"Add Button Background Color\",\n                \"type\":\"string\",\n                \"default\": \"#0069d9\"\n            },\n            \"addBtnTxtColor\":{\n                \"title\":\"Add Button Text Color\",\n                \"type\":\"string\",\n                \"default\": \"#ffffff\"\n            },\n            \"deployBtnBgColor\":{\n                \"title\":\"Deploy Button Background Color\",\n                \"type\":\"string\",\n                \"default\": \"#cc0000\"\n            },\n            \"deployBtnTxtColor\":{\n                \"title\":\"deploy Button Text Color\",\n                \"type\":\"string\",\n                \"default\": \"#ffffff\"\n            },\n            \n            \"tableHeaderBgColor\":{\n                \"title\":\"Table header background color\",\n                \"type\":\"string\",\n                \"default\": \"#4c4c4c\"\n            },\n            \"tableHeaderTxtColor\":{\n                \"title\":\"Table header text color\",\n                \"type\":\"string\",\n                \"default\": \"#ffffff\"\n            },\n            \"tableRowLineColor\":{\n                \"title\":\"Table row line color\",\n                \"type\":\"string\",\n                \"default\": \"#777777\"\n            },\n            \"disabledPaginationColor\":{\n                \"title\":\"Disabled pagination color\",\n                \"type\":\"string\",\n                \"default\": \"#000000\"\n            },\n            \"enabledPaginationColor\":{\n                \"title\":\"Enabled pagination color\",\n                \"type\":\"string\",\n                \"default\": \"#000000\"\n            }\n        }\n    },\n    \"form\": [\n        \"url\",\n        \"dbName\",\n    {\n        \"key\":\"addBtnBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"addBtnTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"deployBtnBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"deployBtnTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\": \"tableRowLineColor\",\n        \"type\": \"color\"\n    },\n    {\n        \"key\":\"disabledPaginationColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\": \"enabledPaginationColor\",\n        \"type\": \"color\"\n    }\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"url\":\"http://150.150.50.241:3000/api\",\"dbName\":\"modbusgwopc\",\"addBtnBgColor\":\"#0069d9\",\"addBtnTxtColor\":\"#ffffff\",\"deployBtnBgColor\":\"#cc0000\",\"deployBtnTxtColor\":\"#ffffff\",\"tableHeaderBgColor\":\"#4c4c4c\",\"tableHeaderTxtColor\":\"#ffffff\",\"tableRowLineColor\":\"#777777\",\"disabledPaginationColor\":\"#000000\",\"enabledPaginationColor\":\"#000000\"},\"title\":\"(OPC) static widget\",\"dropShadow\":true}"
      }
    }
  ]
}