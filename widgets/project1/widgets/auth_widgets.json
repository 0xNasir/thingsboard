{
  "widgetsBundle": {
    "alias": "auth_widgets",
    "title": "Auth Widgets",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "assign_customer_user",
      "name": "Assign customer user",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 10,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "<mat-spinner *ngIf=\"isAssignUserLoading\" style=\"z-index: 1;position: absolute;top:40%;left:40%;\" color=\"warn\"></mat-spinner>\n<section id=\"formSection\" class=\"form satl-customer-assign-to-device\" [style.color]=\"settings?.assignCustomerWidgetDarkMode?'#ffffff':'#000000'\" [style.padding]=\"settings?.assignCustomerWidgetDarkMode?'10px':'0'\" style=\"background-color:inherit;color:inherit;width:100%;height:100%;overflow:auto;\" [style.opacity]=\"isAssignUserLoading?'0.2':'1'\">\n<form action=\"\" method=\"POST\" *ngIf=\"form\" [formGroup]=\"form\" (submit)=\"SubmitForm()\">\n    <div>\n        <div style=\"display:flex;justify-content:space-between;\">\n            <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;color:inherit;\">\n            User Info\n        </div>\n        <button mat-icon-button color=\"primary\" [style.color]=\"settings?.buttonColor\" [class]=\"isUserSaving?'satl-spinner':''\" [disabled]=\"isUserSaving\"><mat-icon>save</mat-icon></button>\n        </div>\n        <div class=\"section-content\" style=\"margin: 10px 0 0 10px;\">\n            <mat-card [style.border]=\"settings?.assignCustomerWidgetDarkMode?'1px solid gray':'none'\" style=\"padding:0;color:inherit;background-color:inherit;\">\n                <!--<mat-card-header style=\"margin-bottom:5px;\" [style.background]=\"settings?.sectionBgColor?settings.sectionBgColor:'white'\" [style.color]=\"settings?.sectionTxtColor\">-->\n                <!--    <mat-card-title style=\"margin:0;\"><div style=\"font-weight:400;\">Assign User</div></mat-card-title>-->\n                <!--  </mat-card-header>-->\n                  <mat-card-body>\n                      \n                      <div formArrayName=\"userInfo\"\n                       *ngFor=\"let userInfo of form.get('userInfo')['controls']; let i=index\" id=\"singleUser\">\n                        <div [formGroupName]=\"i\" style=\"margin-top:20px; display:flex;\">\n                      <div style=\"padding: 0 15px;width:100%\">\n                        <mat-form-field appearance=\"outline\" style=\"width:100%;margin-right:5px;\">\n                            <mat-label>User</mat-label>\n                            <input matInput [value]=\"form.get('userInfo').value[i].name\" disabled=\"true\">\n                            <mat-error>Field is required</mat-error>\n                        </mat-form-field>\n                        </div>\n                        \n                        <div style=\"padding: 0 15px;width:100%\">\n                        <mat-form-field appearance=\"outline\" style=\"width:100%;margin-right:5px;\">\n                            <mat-label>User role</mat-label>\n                            <mat-select formControlName=\"roleInfo\">\n                                <mat-option *ngFor=\"let role of roleInfoKeys\" [value]=\"role\">\n                                  {{role}}\n                                </mat-option>\n                              </mat-select>\n                            <mat-error>Field is required</mat-error>\n                        </mat-form-field>\n                        </div>\n                    </div>\n                    </div>\n                  </mat-card-body>\n            </mat-card>\n        </div>\n    </div>\n</form>\n</section>",
        "templateCss": ".clrWhite{\n    color: #ffffff!important;\n}\n.clrDisabled{\n    color: #9f9f9f!important;\n}\n.satl-customer-assign-to-device::-webkit-scrollbar {\n  width: 11px;\n}\n.satl-customer-assign-to-device {\n  scrollbar-width: thin;\n  scrollbar-color: #90A4AE #CFD8DC;\n}\n.satl-customer-assign-to-device::-webkit-scrollbar-track {\n  background: #CFD8DC;\n}\n.satl-customer-assign-to-device::-webkit-scrollbar-thumb {\n  background-color: #90A4AE ;\n  border-radius: 6px;\n  border: 3px solid #CFD8DC;\n}\n/*Animation for spinner on button*/\n@keyframes spinner {\n  to {transform: rotate(360deg);}\n}\n\n.satl-spinner:before {\n  content: '';\n  box-sizing: border-box;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 20px;\n  height: 20px;\n  margin-top: -10px;\n  margin-left: -10px;\n  border-radius: 50%;\n  border: 2px solid #ffffff;\n  border-top-color: #000000;\n  animation: spinner .8s linear infinite;\n}\nbutton.mat-button-disabled mat-icon {\n    opacity: 0;\n}",
        "controllerScript": "self.onInit = function() {\n      self.ctx.assignUserDarkModeDesign = ()=>{\n        self.ctx.detectChanges();\n        if(self.ctx.settings?.assignCustomerWidgetDarkMode){\n            $('.tb-default .satl-customer-assign-to-device .mat-form-field-appearance-outline .mat-form-field-outline').addClass('clrWhite');\n            $('.tb-default .satl-customer-assign-to-device .mat-form-field-label, .tb-default .mat-hint').addClass('clrWhite');\n            $('.tb-default .satl-customer-assign-to-device .mat-select-arrow').addClass('clrWhite');\n            $('.tb-default .satl-customer-assign-to-device .mat-select-value').addClass('clrWhite');\n            $('input[type=\"time\"]').addClass('time-input-field');\n            $('.tb-default .satl-customer-assign-to-device .mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix:after, .tb-default .mat-input-element:disabled').addClass('clrDisabled');\n        }\n    }\n    \n    customerUsers=[];\n    let $scope=self.ctx.$scope;\n    $scope.isUserSaving=false;\n    $scope.isAssignUserLoading=true;\n    $scope.settings=self.ctx.settings;\n    $scope.form = $scope.fb.group({\n        userInfo:$scope.fb.array([])\n    });\n    AddUserInfoToForm();\n    self.ctx.assignUserDarkModeDesign();\n    \n    customer=self.ctx.data;\n    roleInfoKeys=[];\n    if(customer[0].data.length>0&&customer[0].data[0][1]!=\"\"){\n        try {\n            data=JSON.parse(self.ctx.data[0].data[0][1])\n            $scope.roleInfoKeys=Object.keys(data.roleInfo);\n        } catch (e) {}\n    }\n    self.ctx.getWidgetPositions = function(){\n        let pathNames = window.location.pathname.split(\"/\");\n        return {\n            isInWidgetEditor: pathNames.includes(\"widget-editor\"),\n            isInWidgetBundle: pathNames.includes(\"widgets-bundles\"),\n            isInDashboard: pathNames.includes(\"dashboards\"),\n            isInDashboardEditor: self.ctx.isEdit\n        }\n    }\n    let gwp=self.ctx.getWidgetPositions();\n    if(!gwp.isInWidgetBundle){\n        self.ctx.userService.getCustomerUsers(customer[0].datasource.entity.id.id, {toQuery:function(){return \"?pageSize=50&page=0&\";}}).subscribe(response=>{\n        $scope.form.patchValue({});\n        $scope.userData=response.data;\n        userInfoArray=$scope.fb.array([]);\n        $scope.userData.forEach(user=>{\n            userInfoArray.push($scope.fb.group({\n                key:[user.id.id, $scope.validators.required],\n                roleInfo:[data.userInfo?data.userInfo[user.id.id]:'', $scope.validators.required],\n                name:[user.email+'('+user.firstName+' '+user.lastName+')']\n            }));\n        })\n        $scope.form.setControl('userInfo', userInfoArray);\n        $scope.isAssignUserLoading=false;\n        self.ctx.assignUserDarkModeDesign();\n    }, error=>{\n        $scope.isAssignUserLoading=false;\n        self.ctx.assignUserDarkModeDesign();\n    });\n    }else{\n        $scope.isAssignUserLoading=false;\n        self.ctx.assignUserDarkModeDesign();\n    }\n    \n    \n    \n    function makeUserInfo(){\n        return $scope.fb.group({\n            key:['', $scope.validators.required],\n            roleInfo:['', $scope.validators.required]\n        });\n    }\n    function AddUserInfoToForm(){\n        ($scope.form.get('userInfo')).push(makeUserInfo());\n    }\n    $scope.AddNewUserInfo=function(){\n        AddUserInfoToForm();\n        self.ctx.assignUserDarkModeDesign();\n    }\n    $scope.RemoveUserInfoFromForm=function(index){\n        ($scope.form.get('userInfo')).removeAt(index);\n    }\n    $scope.SubmitForm=()=>{\n        if($scope.form.valid){\n            $scope.isUserSaving=true;\n            userInfo={};\n            formData=$scope.form.value;\n            formData.userInfo.forEach(fData=>{\n                userInfo[fData['key']]=fData['roleInfo'];\n            });\n            data.userInfo=userInfo;\n            self.ctx.attributeService.saveEntityAttributes({entityType:'CUSTOMER', id:customer[0].datasource.entity.id.id}, 'SERVER_SCOPE', [{key:'authdata', value:data}]).subscribe(resp=>{\n                    $scope.isUserSaving=false;\n                    self.ctx.detectChanges();\n                    self.ctx.showToast('success', 'Auth setting saved successfully', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                }, error=>{\n                    $scope.isUserSaving=false;\n                    self.ctx.detectChanges();\n                    self.ctx.showToast('error', 'Auth setting is not saved!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                });\n        }else{\n            self.ctx.showToast('error', 'Form is invalid, some fields may be required', 2000, 'top', 'start', self.ctx.$scope.toastTargetId);\n        }\n    }\n}\nself.onDataUpdated=function(){\n    self.ctx.assignUserDarkModeDesign();\n}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\n        ],\n        \"properties\": {\n            \"assignCustomerWidgetDarkMode\":{\n                \"title\":\"Enable dark mode\",\n                \"type\":\"boolean\"\n            },\n            \"bgColor\":{\n                \"title\":\"background color\",\n                \"type\":\"string\"\n            },\n            \"titleColor\":{\n                \"title\":\"Text color\",\n                \"type\":\"string\"\n            },\n            \"buttonColor\":{\n                \"title\":\"Button color\",\n                \"type\":\"string\"\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\":\"assignCustomerWidgetDarkMode\",\n            \"type\":\"checkbox\"\n        },\n        {\n            \"key\":\"buttonColor\",\n            \"type\":\"color\"\n        }]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#000000\",\"color\":\"rgba(255,255,255,0.87)\",\"padding\":\"8px\",\"settings\":{\"buttonColor\":\"#000000\",\"bgColor\":\"#060606\",\"titleColor\":\"#ffffff\",\"assignCustomerWidgetDarkMode\":true},\"title\":\"Assign customer user\",\"showTitleIcon\":false,\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"showLegend\":false}"
      }
    },
    {
      "alias": "manage_users",
      "name": "Manage Users",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 8,
        "resources": [],
        "templateHtml": "<mat-spinner *ngIf=\"!loaded\"\n    style=\"z-index: 1;position: absolute;top:40%;left:40%;\"\n    color=\"warn\"></mat-spinner>\n    <div class=\"add_btn_con\" *ngIf=\"loaded && selectedUser?.length==0\">\n        <button\n            *ngIf=\"!filterOpen\"\n            class=\"add_btn\"\n            mat-icon-button\n            (click)=\"manageUser()\"\n        >\n            <mat-icon>add</mat-icon>\n        </button>\n        <button\n            *ngIf=\"!filterOpen\"\n            class=\"add_btn\"\n            mat-icon-button\n            (click)=\"refreshPage()\"\n        >\n            <mat-icon>refresh</mat-icon>\n        </button>\n        <mat-icon *ngIf=\"filterOpen\" class=\"spicon\">search</mat-icon>\n        <mat-form-field *ngIf=\"filterOpen\" class=\"search_con\" floatLabel=\"never\">\n          <mat-label>Filter</mat-label>\n          <input matInput (keyup)=\"applyFilter($event)\" #input>\n        </mat-form-field>\n        <button *ngIf=\"!filterOpen && actionDescriptors.length\" mat-icon-button (click)=\"handleAction($event, actionDescriptors[0])\"><mat-icon>{{actionDescriptors[0].icon}}</mat-icon></button>\n        <button\n            *ngIf=\"!filterOpen\"\n            class=\"add_btn\"\n            mat-icon-button\n            (click)=\"filterOpen=!filterOpen;updateSearchBoxUI()\"\n        >\n            <mat-icon>search</mat-icon>\n        </button>\n        <button\n            *ngIf=\"filterOpen\"\n            class=\"add_btn\"\n            mat-icon-button\n            (click)=\"filterOpen=!filterOpen; closeSearch($event)\"\n            matTooltip=\"press ESC to close\"\n        >\n            <mat-icon>close</mat-icon>\n        </button>\n    </div>\n    <mat-toolbar *ngIf=\"selectedUser?.length\" color=\"primary\" style=\"display: flex; justify-content: space-between; height: 65px;\">\n        <p style=\"margin: 0;\">{{selectedUser.length}} user{{selectedUser.length==1?'':'s'}} {{selectedUser.length==1?'is':'are'}} selected</p>\n        <button\n            mat-icon-button\n            (click)=\"deleteAllUser()\" [disabled]=\"!loaded\"\n        >\n            <mat-icon>delete</mat-icon>\n        </button>\n    </mat-toolbar>\n<div *ngIf=\"loaded && filteredData && tablePagination\">\n    <div class=\"satl-table-container\" [style.height]=\"tableHeight+'px'\">\n        <mat-table\n            [dataSource]=\"filteredData.slice(tablePagination.getFrom(), tablePagination.getTo())\"\n            class=\"satl-table\">\n            <ng-container matColumnDef=\"select\">\n                <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\">\n                    <mat-checkbox (change)=\"selectUser($event, {}, true)\" [checked]=\"allChecked\" [indeterminate]=\"selectedUser.length>0 && selectedUser.length!=allData.length\"> Select all </mat-checkbox>\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" [style.background-color]=\"bgColor\" [style.color]=\"color\">\n                    <mat-checkbox class=\"example-margin\" (change)=\"selectUser($event, row)\" [checked]=\"updateCheckboxStyle(row)\">\n                    </mat-checkbox>\n                </mat-cell>\n            </ng-container>\n            <ng-container *ngFor=\"let columnDescriptor of columnDescriptors\" [matColumnDef]=\"columnDescriptor.key\">\n                <mat-header-cell *matHeaderCellDef [style.color]=\"settings?.tableHeaderTxtColor\">\n                    {{columnDescriptor.name}}\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\"\n                    [style.background-color]=\"bgColor\"\n                    [style.color]=\"color\"\n                    >\n                    {{row[columnDescriptor.key]}}\n                </mat-cell>\n            </ng-container>\n            <ng-container matColumnDef=\"options\">\n                <mat-header-cell *matHeaderCellDef [style.color]=\"settings?.tableHeaderTxtColor\">\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\"\n                    [style.background-color]=\"bgColor\"\n                    [style.color]=\"color\"\n                    >\n                    <button mat-icon-button (click)=\"manageUser(row)\">\n                        <mat-icon [style.color]=\"color\">edit</mat-icon>\n                    </button>\n                    <button mat-icon-button (click)=\"deleteUser(row)\">\n                        <mat-icon [style.color]=\"color\">delete</mat-icon>\n                    </button>\n                    <button *ngIf=\"row.activationLink!='' && settings?.showActivationLink\" mat-icon-button (click)=\"copyLink(row.activationLink)\">\n                        <mat-icon [style.color]=\"color\">content_copy</mat-icon>\n                    </button>\n                    <button  mat-icon-button (click)=\"generatePasswordResetLink(row)\">\n                        <mat-icon [style.color]=\"color\">settings</mat-icon>\n                    </button>\n                </mat-cell>\n            </ng-container>\n            \n            <mat-header-row mat-header-row\n                *matHeaderRowDef=\"displayedColumns; sticky: true\" [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\">\n            </mat-header-row>\n            <mat-row mat-row\n                *matRowDef=\"let row; columns: displayedColumns;\" \n                [style.background-color]=\"backgroundColor\">\n            </mat-row>\n        </mat-table>\n        <p\n            style=\"text-align:center\"\n            *ngIf=\"allData.length<=0\"\n        >\n            No user found!\n        </p>\n    </div>\n    <mat-paginator [style.background-color]=\"bgColor\"\n        [style.color]=\"color\" \n        [length]=\"filteredData.length\"\n        [pageSize]=\"tablePagination.pageSize\"\n        [pageSizeOptions]=\"tablePagination.pageSizeOptions\"\n        (page)=\"tablePagination.handler($event)\"\n        aria-label=\"Select page\"\n        showFirstLastButtons=\"true\">\n    </mat-paginator>\n    \n</div>\n",
        "templateCss": ".add_btn_con{\n    width: 100%;\n    height: 65px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n}\n.search_con{\n    width: 100%;\n}\n.satl-table-container::-webkit-scrollbar{\n  width: 10px;\n}\n.satl-table-container{\n    overflow: auto;\n  scrollbar-width: thin;\n  scrollbar-color: #90A4AE #CFD8DC;\n}\n.satl-table-container::-webkit-scrollbar-track{\n  background: #CFD8DC;\n}\n.satl-table-container::-webkit-scrollbar-thumb{\n  background-color: #90A4AE ;\n  border-radius: 6px;\n  border: 3px solid #CFD8DC;\n}\n.spicon{\n    position: absolute;\n    left: 0;\n    top: 19px;\n}",
        "controllerScript": "self.onInit = function() {\n    let $scope=self.ctx.$scope;\n    const customDialog = $scope.$injector.get(self.ctx.servicesMap.get('customDialog'));\n    $scope.loaded=false;\n    $scope.router=self.ctx.router;\n    $scope.columnDescriptors=[{name: \"First name\", key: \"firstName\"},{name: \"Last name\", key: \"lastName\"},{name: \"Email\", key: \"email\"},{name: \"Role\", key: \"role\"}]\n    $scope.displayedColumns=[ \"select\", \"firstName\",\"lastName\", \"email\", \"role\", \"options\"]; \n    $scope.selectedUser=[];\n    $scope.allChecked=false;\n    const tablePagination = {\n        pageIndex: 0,\n        pageSize: 20,\n        pageSizeOptions: [20, 50, 100],\n        handler: (pagination) => {\n            const { pageIndex, pageSize } = pagination;\n            if (pageSize !== undefined) {\n                tablePagination.pageSize = pageSize;\n            }\n            if (pageIndex !== undefined) {\n                tablePagination.pageIndex = pageIndex;\n            }\n        },\n        getFrom: () => {\n            const { pageIndex, pageSize } = tablePagination;\n            return pageIndex * pageSize;\n        },\n        getTo: () => {\n            const { pageIndex, pageSize } = tablePagination;\n            return pageIndex * pageSize + pageSize;\n        }\n    };\n    \n    let authData=[];\n    $scope.actionDescriptors = self.ctx.actionsApi.getActionDescriptors('topConfigButton');\n    let token = localStorage.getItem('jwt_token');\n    const cuid=JSON.parse(atob(token.split('.')[1]))    //Current logged in user details\n    $scope.settings=self.ctx.settings;\n    $scope.bgColor=self.ctx.widgetConfig.backgroundColor;\n    $scope.color=self.ctx.widgetConfig.color;\n    self.ctx.roleList=[];\n    let customer=self.ctx.data;\n    let customerID=null;\n    self.ctx.updateUi=function(){\n        $(document).ready(function() {\n        $('.mat-select-value-text').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default .mat-select-arrow').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default .mat-form-field-appearance-legacy .mat-form-field-underline').css('background-color', self.ctx.widgetConfig.color);\n        $('button.mat-focus-indicator').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default mat-cell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.widgetConfig.color);\n        $('.tb-default mat-header-cell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.settings.tableHeaderTxtColor);\n    });\n    }\n    $scope.updateSearchBoxUI=function(){\n        $(document).ready(function() {\n            $('.tb-default .mat-form-field-appearance-legacy .mat-form-field-underline').css('background-color', self.ctx.widgetConfig.color);\n            $('mat-label').css('padding-left', '30px');\n            $('input.mat-input-element').css('margin-left', '30px');\n            $('input.mat-input-element').focus();\n        });\n    }\n    $scope.updateCheckboxStyle=function(row){\n        $('.tb-default mat-cell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.widgetConfig.color);\n        return $scope.selectedUser.indexOf(row)>-1;\n    }\n    if(customer.length){\n        if(customer[0].datasource){\n            customerID=customer[0].datasource.entityId;\n        }\n        if(customer[0].data[0]!=undefined){\n            if(customer[0].data[0][1] === \"\"){\n                customer[0].data[0][1] = JSON.stringify(\n                    {\n                      \"roleInfo\": {\"default\":{}},\n                      \"userInfo\": {}\n                    }\n                )\n            }\n        }\n        if(customer[0].data.length>0&&customer[0].data[0][1]!=\"\"){\n            try {\n                data=JSON.parse(self.ctx.data[0].data[0][1])\n                if(!data?.userInfo){\n                    data['userInfo']={}\n                }\n                if(data?.roleInfo){\n                    if(data?.roleInfo['default']){\n                        tempRoleInfo = {...data?.roleInfo}\n                        delete tempRoleInfo['default']\n                        self.ctx.roleList=Object.keys(tempRoleInfo);\n                    }\n                    else{\n                        self.ctx.roleList=Object.keys(data?.roleInfo);\n                    }\n                    $scope.roleInfoKeys=Object.keys(data?.roleInfo);\n                }\n                else{\n                    self.ctx.roleList = [];\n                }\n                authData=data;\n            } catch (e) {}\n        }\n    }\n    self.ctx.getWidgetPositions = function(){\n        let pathNames = window.location.pathname.split(\"/\");\n        return {\n            isInWidgetEditor: pathNames.includes(\"widget-editor\"),\n            isInWidgetBundle: pathNames.includes(\"widgets-bundles\"),\n            isInDashboard: pathNames.includes(\"dashboards\"),\n            isInDashboardEditor: self.ctx.isEdit\n        }\n    }\n    let gwp=self.ctx.getWidgetPositions();\n    if(!gwp.isInWidgetBundle){\n        init();\n    }else{\n        self.ctx.$scope.loaded=true;\n        self.ctx.$scope.allData=[];\n        $scope.filteredData=[]\n        self.ctx.detectChanges();\n    }\n    function init(){\n        $scope.loaded=false;\n        self.ctx.detectChanges();\n        self.ctx.userService.getCustomerUsers(customerID, {toQuery:function(){return \"?pageSize=50&page=0&\";}}).subscribe(response=>{\n            resData=response.data;\n            if(Object.keys(authData).length>0 && Object.keys(authData?.roleInfo).length>0){\n                resData.forEach(rsdt=>{\n                    rsdt['role']=authData.userInfo[rsdt.id.id]!=undefined?authData.userInfo[rsdt.id.id]:'';\n                    if(Object.keys(rsdt.additionalInfo).length==0 && $scope.settings?.showActivationLink){\n                      self.ctx.userService.getActivationLink(rsdt.id.id, {}).subscribe(activationLinkRes=>{\n                            rsdt['activationLink']=activationLinkRes;\n                        }, error=>{\n                            rsdt['activationLink']='';\n                        }); \n                    }else{\n                        rsdt['activationLink']='';\n                    }\n                    \n                });\n            }\n            $scope.tablePagination=tablePagination;\n            $scope.loaded=true;\n            $scope.allData=resData;\n            $scope.filteredData=resData;\n            self.ctx.detectChanges();\n            self.ctx.updateUi();\n        }, error=>{\n            $scope.loaded=true;\n            $scope.tablePagination=tablePagination;\n            $scope.allData=[];\n            $scope.filteredData=[];\n            self.ctx.detectChanges();\n            self.ctx.updateUi();\n        });\n    }\n    $scope.applyFilter = (event) => {\n        const filterValue = event.target.value.toLowerCase();\n        $scope.filteredData = $scope.allData;\n        $scope.filteredData = $scope.filteredData.filter(ele=>{\n            if(ele.firstName.toLowerCase().search(filterValue)!=-1){\n                return ele;\n            }else if(ele.lastName.toLowerCase().search(filterValue)!=-1){\n                return ele;\n            }else if(ele.email.toLowerCase().search(filterValue)!=-1){\n                return ele;\n            }\n        });\n    }\n    $scope.closeSearch=function($event){\n        $scope.filteredData=$scope.allData;\n        self.ctx.detectChanges();\n    }\n    $(document).on('keydown', function(event) {\n       if (event.key == \"Escape\") {\n           if($scope.filterOpen){\n               $scope.filterOpen=false;\n               $scope.closeSearch();\n                self.ctx.detectChanges();\n           }\n       }\n   });\n    $scope.deleteAllUser=function(){\n        if(confirm('Do you want to delete selected user?')){\n            $scope.loaded=false;\n            self.ctx.detectChanges();\n            $scope.deleteUser({}, true);\n        }\n    }\n    $scope.deleteUser=function(user, selected=false){\n        if(selected){\n            const x=[...$scope.selectedUser];\n            if(x[x.length-1]?.id?.id!=undefined){\n                self.ctx.userService.deleteUser($scope.selectedUser[$scope.selectedUser.length-1].id.id).subscribe(res=>{\n                    delete authData.userInfo[$scope.selectedUser[$scope.selectedUser.length-1].id.id];\n                    self.ctx.attributeService.saveEntityAttributes({entityType:'CUSTOMER', id:customerID}, 'SERVER_SCOPE', [{key:customer[0].dataKey.name, value:authData}]).subscribe(authRes=>{\n                        $scope.selectedUser.pop();\n                        $scope.deleteUser({},true);\n                    },err=>{\n                        $scope.selectedUser.pop();\n                        $scope.deleteUser({},true);\n                    });\n                }, error=>{\n                    $scope.selectedUser.pop();\n                    $scope.deleteUser({},true);\n                });\n            }else{\n                $scope.allChecked=false;\n                self.ctx.detectChanges();\n                init();\n                self.ctx.showToast('success', 'User is deleted', 2000, 'top', 'start', self.ctx.$scope.toastTargetId);\n            }\n        }else{\n            if(confirm('Do you really want to delete the user?')){\n                self.ctx.userService.deleteUser(user.id.id).subscribe(res=>{\n                    delete authData.userInfo[user.id.id];\n                    self.ctx.attributeService.saveEntityAttributes({entityType:'CUSTOMER', id:customerID}, 'SERVER_SCOPE', [{key:customer[0].dataKey.name, value:authData}]).subscribe(authRes=>{\n                        });\n                    init();\n                    self.ctx.showToast('success', 'User is deleted', 2000, 'top', 'start', self.ctx.$scope.toastTargetId);\n                });\n            }\n        }\n    }\n    $scope.selectUser=function($event, user, allSelect=false){\n        if($event.checked){\n            $scope.selectedUser.push(user);\n            $scope.selectedUser=allSelect?[...$scope.filteredData]:[...$scope.selectedUser];\n        }else{\n            $scope.selectedUser=allSelect?[]:$scope.selectedUser.filter(rd=>rd!=user);\n        }\n        $scope.allChecked=$scope.filteredData.length==$scope.selectedUser.length\n        self.ctx.detectChanges();\n        $scope.updateSearchBoxUI();\n    }\n    \n    template=`\n        <div aria-label=\"Info\" style=\"width: 500px\">\n            <mat-toolbar fxLayout=\"row\" color=\"primary\">\n            <div *ngIf=\"data.id!=undefined\">Update user</div>\n            <div *ngIf=\"data.id==undefined\">Add user</div>\n            <span fxFlex></span>\n                <button mat-icon-button (click)=\"close()\"><mat-icon>close</mat-icon></button>\n            </mat-toolbar>\n            <div mat-dialog-content>\n            <mat-spinner style=\"position: absolute; left: 45%;text-align: center;\" *ngIf=\"btnDisable\"></mat-spinner>\n            <form method=\"POST\" [formGroup]=\"userForm\" (submit)=\"saveUser()\">\n            <mat-form-field appearance=\"fill\">\n                <mat-label>First name</mat-label>\n                <input matInput type=\"text\" formControlName=\"firstName\">\n            </mat-form-field>\n            <mat-form-field appearance=\"fill\">\n                <mat-label>Last name</mat-label>\n                <input matInput type=\"text\" formControlName=\"lastName\">\n            </mat-form-field>\n            <mat-form-field appearance=\"fill\">\n                <mat-label>Email</mat-label>\n                <input matInput type=\"email\" formControlName=\"email\" [readonly]=\"data.id!=undefined\">\n            </mat-form-field>\n            <mat-form-field appearance=\"fill\">\n                <mat-label>Role</mat-label>\n                <mat-select formControlName=\"role\">\n                    <mat-option *ngFor=\"let role of data.roleList\" value=\"{{role}}\">{{role}}</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button [disabled]=\"btnDisable\" mat-flat-button color=\"accent\">Save</button>\n            </form>\n            </div>\n            </div>\n            `;\n    $scope.manageUser=function(data={}){\n        data['roleList']=self.ctx.roleList;\n        if(data.id!=undefined){\n            cuRole=authData.userInfo[data.id.id]\n            data['cuRole']=cuRole?cuRole: '';\n        }\n        customDialog.customDialog(template, InfoDialogController, data).subscribe(\n            function(res) {\n                if (res) {\n                }\n            }\n        );\n    }\n    function InfoDialogController(instance) {\n        vm=instance;\n        vm.userForm=vm.fb.group({\n            firstName:[vm.data.firstName],\n            lastName:[vm.data.lastName],\n            role: [vm.data.cuRole],\n            email:[vm.data.email, [vm.validators.email, vm.validators.required]],\n            customerId: vm.fb.group({\n                entityType: 'CUSTOMER',\n                id: customerID\n            }),\n            tenantId: vm.fb.group({\n                entityType: 'TENANT',\n                id: cuid.tenantId\n            }),\n            authority: ['CUSTOMER_USER'],\n            additionalInfo: [{}]\n        });\n        vm.saveUser=function(){\n            if(vm.userForm.valid){\n                vm.userForm.disable();\n                vm.btnDisable=true;\n                if(vm.data.id){\n                    vm.userForm.value.id=vm.data.id;\n                    vm.userForm.value.additionalInfo=vm.data.additionalInfo;\n                }\n                self.ctx.userService.saveUser(vm.userForm.value, $scope.settings?.sendMail).subscribe(res=>{\n                    vm.userForm.enable();\n                    vm.btnDisable=false;\n                    init();\n                    vm.dialogRef.close(null);\n                    if(vm.userForm.value.role!==null){\n                        authData.userInfo[res.id.id]=vm.userForm.value.role;\n                    }\n                    self.ctx.attributeService.saveEntityAttributes({entityType:'CUSTOMER', id:customerID}, 'SERVER_SCOPE', [{key:customer[0].dataKey.name, value:authData}]).subscribe(authRes=>{\n                        self.ctx.showToast('success', vm.data.id?'User is updated successfully':'User is added successfully', 2000, 'top', 'start', self.ctx.$scope.toastTargetId);\n                    }, error=>{\n                        self.ctx.showToast('warn', vm.data.id?'User is updated successfully. Role is not added':'User is added successfully. Role is not added', 2000, 'top', 'start', self.ctx.$scope.toastTargetId);\n                    });\n                }, error=>{\n                    vm.userForm.enable();\n                    vm.btnDisable=false;\n                    self.ctx.showToast('error', 'Something went wrong. Try again', 2000, 'top', 'start', self.ctx.$scope.toastTargetId);\n                });\n            }else{\n                self.ctx.showToast('error', 'Invalid form input', 2000, 'top', 'start', self.ctx.$scope.toastTargetId);\n            }\n        }\n        vm.getResetLink=function(email){\n            vm.btnDisable=true;\n            let http=self.ctx.http.get('/nrdapi/resetpwd/'+email, {headers:{\"Content-Type\":\"application/json\",\"X-Authorization\":\"Bearer \"+token}});\n            http.subscribe(res=>{\n                vm.btnDisable=false;\n                vm.hostname=window.location.protocol+'//'+window.location.hostname;\n                vm.resetToken=res.token;\n            }, error=>{\n                vm.btnDisable=false;\n                self.ctx.showToast('error', 'Something went wrong! Please try again.', 2000, 'top', 'start', self.ctx.$scope.toastTargetId);\n            })\n        }\n        vm.copyLink=(hostname, resetToken)=>{\n            const selBox = document.createElement('textarea');\n            selBox.value = hostname+'/api/noauth/activate?activateToken='+resetToken;\n            document.body.appendChild(selBox);\n            selBox.focus();\n            selBox.select();\n            document.execCommand('copy');\n            document.body.removeChild(selBox);\n            self.ctx.showToast('success', 'Activation link is copied', 2000, 'top', 'start', self.ctx.$scope.toastTargetId);\n        }\n        vm.close = function (){\n            vm.dialogRef.close(null);\n        };\n    }\n    passwordResetTemplate=`\n        <div aria-label=\"Info\" style=\"min-width: 800px; min-height: 250px;\">\n            <mat-toolbar fxLayout=\"row\" color=\"primary\">\n            <div>Reset password</div>\n            <span fxFlex></span>\n                <button mat-icon-button (click)=\"close()\"><mat-icon>close</mat-icon></button>\n            </mat-toolbar>\n            <div mat-dialog-content>\n            <mat-spinner style=\"position: absolute; left: 45%;text-align: center;\" *ngIf=\"btnDisable\"></mat-spinner>\n            <table class=\"ctn\" [style.color]=\"btnDisable?'#979797':'#000000'\" style=\"width:100%;border-collapse: collapse;\">\n                <thead>\n                    <tr style=\"background-color:#e4e4e4\">\n                    <th style=\"border: 0.5px solid;padding: 5px;\">Name</th>\n                    <th style=\"border: 0.5px solid;padding: 5px;\">Email</th>\n                    <th style=\"border: 0.5px solid;padding: 5px;\">Role</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td style=\"text-align: center; border: 0.5px solid;padding:10px\">{{data.firstName}} {{data.lastName}}</td>\n                        <td style=\"text-align: center; border: 0.5px solid;padding:10px\">{{data.email}}</td>\n                        <td style=\"text-align: center; border: 0.5px solid;padding:10px\">{{data.role}}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <button mat-flat-button [disabled]=\"btnDisable\" color=\"primary\" (click)=\"getResetLink(data.email)\" style=\"margin:20px 0;\">Generate password reset link</button>\n            <div *ngIf=\"resetToken\" [style.color]=\"btnDisable?'#979797':'#000000'\" style=\"font-size: 14px\">{{hostname}}/api/noauth/activate?activateToken={{resetToken}} <button mat-icon-button [disabled]=\"btnDisable\" color=\"accent\" (click)=\"copyLink(hostname, resetToken)\"><mat-icon>content_copy</mat-icon></button></div>\n            \n            </div>\n        </div>\n    `;\n    $scope.generatePasswordResetLink=function(user){\n        customDialog.customDialog(passwordResetTemplate, InfoDialogController, user).subscribe(\n            function(res) {\n                if (res) {\n                }\n            }\n        );\n    }\n    $scope.copyLink=function(link){\n        const selBox = document.createElement('textarea');\n        selBox.value = link;\n        document.body.appendChild(selBox);\n        selBox.focus();\n        selBox.select();\n        document.execCommand('copy');\n        document.body.removeChild(selBox);\n        self.ctx.showToast('success', 'Activation link is copied', 2000, 'top', 'start', self.ctx.$scope.toastTargetId);\n    }\n    $scope.handleAction=function(e, action){\n        self.ctx.actionsApi.handleWidgetAction(e, action, self.ctx.data[0].datasource.entity.id);\n    }\n    $scope.refreshPage=()=>{\n        self.ctx.detectChanges();\n        self.onInit();\n    }\n}\nself.onDataUpdated=function(){\n    self.onResize();\n}\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        singleEntity: true\n    };\n};\nself.onDestroy=function(){\n    \n}\nself.actionSources = function() {\n    return {\n        'topConfigButton': {\n            name: 'Top config button',\n            multiple: false\n        }\n    };\n}\nself.onResize=function(){\n    const { $scope }=self.ctx;\n    $scope.tableHeight=self.ctx.height-118;\n    self.ctx.detectChanges();\n    self.ctx.updateUi()\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\n        ],\n        \"properties\": {\n            \"tableHeaderBgColor\":{\n                \"title\":\"Table header background color\",\n                \"type\":\"string\",\n                \"default\": \"#cccc00\"\n            },\n            \"tableHeaderTxtColor\":{\n                \"title\":\"Table header text color\",\n                \"type\":\"string\",\n                \"default\": \"#ffffff\"\n            },\n            \"sendMail\":{\n                \"title\":\"Send activation link to email\",\n                \"type\":\"boolean\",\n                \"default\": false\n            },\n            \"showActivationLink\":{\n                \"title\":\"Show activation link\",\n                \"type\":\"boolean\",\n                \"default\": false\n            }\n        }\n    },\n    \"form\": [\n    {\n        \"key\":\"tableHeaderBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\": \"sendMail\",\n        \"type\": \"checkbox\"\n    },\n    {\n        \"key\": \"showActivationLink\",\n        \"type\": \"checkbox\"\n    }\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#000000\",\"color\":\"rgba(255,255,255,0.87)\",\"padding\":\"8px\",\"settings\":{\"tableHeaderBgColor\":\"#434341\",\"tableHeaderTxtColor\":\"#ffffff\",\"showActivationLink\":true},\"title\":\"Manage Users\",\"showTitleIcon\":false,\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"showLegend\":false}"
      }
    },
    {
      "alias": "auth_setting2",
      "name": "Auth Setting",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9,
        "sizeY": 9,
        "resources": [],
        "templateHtml": "<mat-spinner *ngIf=\"isAuthSettngLoading\"\n    style=\"z-index: 1;position: absolute;top:40%;left:40%;\"\n    color=\"warn\"></mat-spinner>\n    <div class=\"add_btn_con\" *ngIf=\"selectedAuth?.length==0\">\n        <button\n            *ngIf=\"!filterOpen\"\n            class=\"add_btn\"\n            mat-icon-button\n            (click)=\"manageAuthSetting({})\"\n        >\n            <mat-icon>add</mat-icon>\n        </button>\n        <button\n            *ngIf=\"!filterOpen\"\n            class=\"add_btn\"\n            mat-icon-button\n            (click)='refresh_table()'\n        >\n            <mat-icon>refresh</mat-icon>\n        </button>\n        <mat-icon *ngIf=\"filterOpen\" class=\"spicon\">search</mat-icon>\n        <mat-form-field *ngIf=\"filterOpen\" class=\"search_con\" floatLabel=\"never\">\n          <mat-label>Filter</mat-label>\n          <input matInput (keyup)=\"applyFilter($event)\" #input>\n        </mat-form-field>\n        <button\n            *ngIf=\"!filterOpen\"\n            class=\"add_btn\"\n            mat-icon-button\n            (click)=\"filterOpen=!filterOpen;updateSearchBoxUI()\"\n        >\n            <mat-icon>search</mat-icon>\n        </button>\n        <button\n            *ngIf=\"filterOpen\"\n            class=\"add_btn\"\n            mat-icon-button\n            (click)=\"filterOpen=!filterOpen;closeFilter()\"\n            matTooltip=\"press ESC to close\"\n        >\n            <mat-icon>close</mat-icon>\n        </button>\n    </div>\n    <mat-toolbar *ngIf=\"selectedAuth?.length\" color=\"primary\" style=\"display: flex; justify-content: space-between; height: 65px;\">\n        <p style=\"margin: 0;\">{{selectedAuth.length}} item{{selectedAuth.length==1?'':'s'}} {{selectedAuth.length==1?'is':'are'}} selected</p>\n        <button mat-icon-button (click)=\"deleteSelectedAuth()\">\n            <mat-icon>delete</mat-icon>\n        </button>\n    </mat-toolbar>\n<div *ngIf=\"allData && tablePagination\">\n    <div class=\"satl-table-container\" [style.height]=\"tableHeight+'px'\">\n        <mat-table\n            [dataSource]=\"filteredData.slice(tablePagination.getFrom(), tablePagination.getTo())\"\n            class=\"satl-table\">\n            <ng-container matColumnDef=\"select\">\n                <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\">\n                    <mat-checkbox (change)=\"selectAuth($event, {}, true)\" [checked]=\"allChecked\" [indeterminate]=\"selectedAuth.length>0 && selectedAuth.length!=allData.length\"> Select all </mat-checkbox>\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" [style.background-color]=\"bgColor\" [style.color]=\"color\">\n                    <mat-checkbox class=\"example-margin\" (change)=\"selectAuth($event, row)\" [checked]=\"updateCheckboxStyle(row)\">\n                    </mat-checkbox>\n                </mat-cell>\n            </ng-container>\n            <ng-container matColumnDef=\"name\">\n                <mat-header-cell *matHeaderCellDef [style.color]=\"settings?.tableHeaderTxtColor\">\n                    Name\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\"\n                    [style.background-color]=\"bgColor\"\n                    [style.color]=\"color\"\n                    >\n                    {{row['name']}}\n                </mat-cell>\n            </ng-container>\n            <ng-container matColumnDef=\"dashboards\">\n                <mat-header-cell *matHeaderCellDef [style.color]=\"settings?.tableHeaderTxtColor\">\n                    Dashboards\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\">\n                    <!--<mat-chip-list aria-label=\"Fish selection\">-->\n                    <!--  <mat-chip [style.background-color]=\"settings?.dashboardChipsBgColor\" [style.color]=\"settings?.dashboardChipsTxtColor\" selected *ngFor=\"let dashboard of row['dashboards']\">{{dboardWithID[dashboard]}}</mat-chip>-->\n                    <!--</mat-chip-list>-->\n                    \n                    <ul [style.background-color]=\"settings?.dashboardChipsBgColor\" [style.color]=\"settings?.dashboardChipsTxtColor\" style=\"margin: 5px 0;padding: 5px 20px;\">\n                      <li [style.background-color]=\"settings?.dashboardChipsBgColor\" [style.color]=\"settings?.dashboardChipsTxtColor\" *ngFor=\"let dashboard of row['dashboards']\">{{dboardWithID[dashboard]}}</li>\n                    </ul>\n                </mat-cell>\n            </ng-container>\n            <ng-container matColumnDef=\"widgets\">\n                <mat-header-cell *matHeaderCellDef [style.color]=\"settings?.tableHeaderTxtColor\">\n                    Widgets\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\">\n                    <mat-chip-list *ngIf=\"row['widgets'][0]!=undefined\" aria-label=\"Fish selection\">\n                      <mat-chip [style.background-color]=\"settings?.dashboardWidgetBgColor\" [style.color]=\"settings?.dashboardWidgetTxtColor\" selected *ngFor=\"let widget of row['widgets']\"\n                        matTooltip=\"{{widget.value.join(', ')}}\"\n                      >{{widget.name}}</mat-chip>\n                    </mat-chip-list>\n                </mat-cell>\n            </ng-container>\n            <ng-container matColumnDef=\"option\">\n                <mat-header-cell *matHeaderCellDef>\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\">\n                    <button mat-icon-button\n                        (click)=\"manageAuthSetting(row)\">\n                        <mat-icon [style.color]=\"color\">edit</mat-icon>\n                    </button>\n                    <button mat-icon-button\n                        (click)=\"deleteAuthSetting(row)\">\n                        <mat-icon [style.color]=\"color\">delete</mat-icon>\n                    </button>\n                </mat-cell>\n            </ng-container>\n            <mat-header-row mat-header-row\n                *matHeaderRowDef=\"displayedColumns; sticky: true\" [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\">\n            </mat-header-row>\n            <mat-row mat-row\n                *matRowDef=\"let row; columns: displayedColumns;\" \n                [style.background-color]=\"backgroundColor\">\n            </mat-row>\n        </mat-table>\n        <p\n            style=\"text-align:center\"\n            *ngIf=\"filteredData.length<=0\"\n        >\n            Data not found!\n        </p>\n    </div>\n    <mat-paginator [style.background-color]=\"backgroundColor\"\n        [style.color]=\"color\" \n        [length]=\"allData.length\"\n        [pageSize]=\"tablePagination.pageSize\"\n        [pageSizeOptions]=\"tablePagination.pageSizeOptions\"\n        (page)=\"tablePagination.handler($event)\"\n        aria-label=\"Select page\"\n        showFirstLastButtons=\"true\">\n    </mat-paginator>\n</div>\n",
        "templateCss": ".add_btn_con{\n    width: 100%;\n    height: 65px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n}\n.search_con{\n    width: 100%;\n}\n.clrWhite{\n    color: white!important;\n}\n\n.satl-table-container{\n    height: 100%;\n    width: 100%;\n    overflow: auto;\n}\n.satl-table-container::-webkit-scrollbar {\n  width: 11px;\n}\n.satl-table-container {\n  scrollbar-width: thin;\n  scrollbar-color: #90A4AE #CFD8DC;\n}\n.satl-table-container::-webkit-scrollbar-track {\n  background: #CFD8DC;\n}\n.satl-table-container::-webkit-scrollbar-thumb {\n  background-color: #90A4AE ;\n  border-radius: 6px;\n  border: 3px solid #CFD8DC;\n}\n/*Animation for spinner on button*/\n@keyframes spinner {\n  to {transform: rotate(360deg);}\n}\n\n.satl-spinner:before {\n  content: '';\n  box-sizing: border-box;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 20px;\n  height: 20px;\n  margin-top: -10px;\n  margin-left: -10px;\n  border-radius: 50%;\n  border: 2px solid #ffffff;\n  border-top-color: #000000;\n  animation: spinner .8s linear infinite;\n}\nbutton.mat-button-disabled mat-icon {\n    opacity: 0;\n}\n.spicon{\n    position: absolute;\n    left: 0;\n    top: 19px;\n}",
        "controllerScript": "\nself.onInit = function() {\n    let $scope=self.ctx.$scope;\n    $scope.backgroundColor=self.ctx.widgetConfig.backgroundColor;\n    $scope.color=self.ctx.widgetConfig.color;\n    $scope.iconColor=self.ctx.widgetConfig.iconColor;\n    $scope.filterOpen=false;\n   $scope.selectedAuth=[];\n   $scope.allChecked=false;\n    self.ctx.getWidgetPositions = function(){\n        let pathNames = window.location.pathname.split(\"/\");\n        return {\n            isInWidgetEditor: pathNames.includes(\"widget-editor\"),\n            isInWidgetBundle: pathNames.includes(\"widgets-bundles\"),\n            isInDashboard: pathNames.includes(\"dashboards\"),\n            isInDashboardEditor: self.ctx.isEdit\n        }\n    }\n    self.ctx.updateUi=function(){\n        $(document).ready(function() {\n        $('.mat-select-value-text').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default .mat-select-arrow').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default .mat-form-field-appearance-legacy .mat-form-field-underline').css('background-color', self.ctx.widgetConfig.color);\n        $('button.mat-focus-indicator').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default mat-header-cell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.settings.tableHeaderTxtColor);\n    });\n    }\n    const tablePagination = {\n        pageIndex: 0,\n        pageSize: 20,\n        pageSizeOptions: [20, 50, 100],\n        handler: (pagination) => {\n            const { pageIndex, pageSize } = pagination;\n            if (pageSize !== undefined) {\n                tablePagination.pageSize = pageSize;\n            }\n            if (pageIndex !== undefined) {\n                tablePagination.pageIndex = pageIndex;\n            }\n        },\n        getFrom: () => {\n            const { pageIndex, pageSize } = tablePagination;\n            return pageIndex * pageSize;\n        },\n        getTo: () => {\n            const { pageIndex, pageSize } = tablePagination;\n            return pageIndex * pageSize + pageSize;\n        }\n    };\n    $scope.tablePagination=tablePagination;\n    $scope.displayedColumns=['select','name','dashboards','widgets', 'option'];\n    $scope.isAuthSettngLoading=true;\n    $scope.isSaving=false;\n    $scope.settings=self.ctx.settings;\n    var $injector = self.ctx.$scope.$injector;\n    customDialog = $injector.get(self.ctx.servicesMap.get('customDialog'));\n    device=self.ctx.data;\n    data={};\n    dboardWithID={};\n    let gwp=self.ctx.getWidgetPositions();\n    if(!gwp.isInWidgetBundle){\n        self.ctx.dashboardService.getTenantDashboards({toQuery:function(){return \"?pageSize=50&page=0&\";}}).subscribe(response=>{\n        $scope.dashboards=response.data;\n        $scope.isAuthSettngLoading=false;\n        if(device[0].data.length>0&&device[0].data[0][1]!=\"\"){\n        try{\n            data=JSON.parse(self.ctx.data[0].data[0][1]);\n        }catch(e){\n            console.log('asdf')\n        }\n        arr=[];\n        Object.keys(data.roleInfo).forEach(key=>{\n            obj={};\n            obj['name']=key;\n            obj['dashboards']=[];\n            obj['widgets']=[];\n            data.roleInfo[key].dashboards.forEach(dboard=>{\n                obj['dashboards'].push(dboard);\n                dboardWithID[dboard]=showDashboardNameFromID(dboard)\n            });\n            Object.keys(data.roleInfo[key].widgets).forEach(wKey=>{\n                t={};\n                t['name']=wKey;\n                t['value']=[];\n                t['value']=data.roleInfo[key].widgets[wKey];\n                obj['widgets'].push(t);\n            });\n            arr.push(obj);\n        });\n        $scope.allData=arr;\n        $scope.filteredData=arr;\n        $scope.dboardWithID=dboardWithID;\n        self.ctx.detectChanges();\n        self.ctx.updateUi()\n    }else{\n        data['roleInfo']={};\n        $scope.allData=[];\n        $scope.filteredData=[];\n        self.ctx.detectChanges();\n        self.ctx.updateUi()\n    }\n    })\n    }else{\n        data['roleInfo']={};\n        $scope.allData=[];\n        $scope.isAuthSettngLoading=false;\n        self.ctx.detectChanges();\n        self.ctx.updateUi()\n    }\n    \n    $scope.updateSearchBoxUI=function(){\n        $(document).ready(function() {\n            $('.tb-default .mat-form-field-appearance-legacy .mat-form-field-underline').css('background-color', self.ctx.widgetConfig.color);\n            $('mat-label').css('padding-left', '30px');\n            $('input.mat-input-element').css('margin-left', '30px');\n            $('input.mat-input-element').focus();\n        });\n    }\n    $scope.closeFilter=function(){\n        $scope.filteredData=$scope.allData;\n        self.ctx.detectChanges();\n    }\n    $scope.selectAuth=function($event, user, allSelect=false){\n        $scope.updateSearchBoxUI();\n        if($event.checked){\n            $scope.selectedAuth.push(user);\n            $scope.selectedAuth=allSelect?[...$scope.filteredData]:[...$scope.selectedAuth];\n        }else{\n            $scope.selectedAuth=allSelect?[]:$scope.selectedAuth.filter(rd=>rd!=user);\n        }\n        $scope.allChecked=$scope.filteredData.length==$scope.selectedAuth.length;\n        self.ctx.detectChanges();\n    }\n     $scope.deleteSelectedAuth=function(){\n        if(confirm('Do you want to delete selected user?')){\n            $scope.loaded=false;\n            self.ctx.detectChanges();\n            $scope.deleteAuthSetting({}, true);\n        }\n    }\n    $scope.updateCheckboxStyle=function(row){\n        $('.tb-default mat-cell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.widgetConfig.color);\n        return $scope.selectedAuth.indexOf(row)>-1;\n    }\n    $(document).on('keydown', function(event) {\n       if (event.key == \"Escape\") {\n           if($scope.filterOpen){\n               $scope.filterOpen=false;\n               $scope.closeFilter();\n           }\n       }\n   });\n    \n    function showDashboardNameFromID(dashboardId){\n        if($scope.dashboards){\n            let dashboard=$scope.dashboards.filter(dboard=>dboard.id.id==dashboardId);\n            if(dashboard.length){\n                title = dashboard[0].title;\n                const regexPattern =\n                    /([0-9]+:[0-9a-zA-Z_-]+:[0-9()+.,a-zA-Z_-]+)/;\n                const regList = title.match(\n                    regexPattern);\n                if (regList == null) {\n                    return title;\n                } else {\n                    const lst = title.split(':');\n                    return lst[lst.length - 1].slice(0,-1);\n                }\n            }\n        }\n        return dashboardId;\n    }\n    template = `\n    <form action=\"\" method=\"POST\" *ngIf=\"form\"\n        [formGroup]=\"form\" (submit)=\"saveAuthSetting()\">\n            <div aria-label=\"Info\" style=\"min-width: 700px;\">\n                <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                <span fxFlex>\n                    <div style=\"display:flex;justify-content:space-between;\">\n                        <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                            {{isAdd?'Add':'Update'}} Role info\n                        </div>\n                    </div>\n                </span>\n                    <button mat-icon-button (click)=\"saveAuthSetting()\"><mat-icon>save</mat-icon></button>\n                    <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                </mat-toolbar>\n                <div mat-dialog-content>\n    \n        <mat-form-field\n            appearance=\"outline\"\n            style=\"width:100%;margin-right:5px;\">\n            <mat-label>Role Name\n            </mat-label>\n            <input matInput\n                formControlName=\"name\"\n                placeholder=\"Enter Role Name\"\n                required>\n            <mat-error>Field is\n                required\n            </mat-error>\n        </mat-form-field>\n        <mat-form-field\n            appearance=\"outline\"\n            style=\"width:100%;margin-right:5px;\">\n\n            <mat-label>\n                Dashboards\n            </mat-label>\n            <mat-select\n                formControlName=\"dashboards\"\n                multiple (ngModelChange)=\"onDashboardChange($event)\">\n                <mat-select-trigger>\n                  <mat-chip-list>\n                    <mat-chip \n                        *ngFor=\"let dashboard of selectedDashboard\"\n                        [removable]=\"true\"\n                        (removed)=\"onCatRemoved(dashboard)\" \n                        selected\n                    >\n                      {{ splittedDashboardFromId(dashboard) }}\n                      <mat-icon matChipRemove>cancel</mat-icon>\n                    </mat-chip>\n                  </mat-chip-list>\n                </mat-select-trigger>\n\n\n                <mat-option\n                    *ngFor=\"let dashboard of dashboards\"\n                    [value]=\"dashboard.id.id\">\n                    {{splittedDashboardFromId(dashboard)}}\n                </mat-option>\n            </mat-select>\n            <mat-error>Field is\n                required\n            </mat-error>\n        </mat-form-field>\n        <div formArrayName=\"widgets\" *ngFor=\"let widget of form.get('widgets').controls; let i=index\">\n        <div [formGroupName]=\"i\" style=\"display: flex;\">\n            <mat-form-field appearance=\"outline\">\n            <mat-label>\n                    Widget key\n                </mat-label>\n                <input type=\"text\"\n                   placeholder=\"Widget key\"\n                   aria-label=\"Number\"\n                   matInput\n                   formControlName=\"key\"\n                   (input)=\"filterWidgetKey($event)\"\n                   [matAutocomplete]=\"auto\">\n                   \n                <mat-autocomplete #auto=\"matAutocomplete\">\n                  <mat-option *ngFor=\"let widget of widgets\" [value]=\"widget.widgetKey\">\n                    {{widget.widgetKey}}\n                  </mat-option>\n                </mat-autocomplete>\n            </mat-form-field>\n            <mat-form-field\n                appearance=\"outline\"\n                style=\"width:100%;margin-right:5px;\">\n                <mat-label>\n                    Widget permissions\n                </mat-label>\n    \n    \n                <mat-chip-list\n                    #permissionInput\n                    aria-label=\"widget_value\">\n                    <mat-chip\n                        *ngFor=\"let permission of widget.get('value').value\"\n                        [selectable]=\"selectable\"\n                        [removable]=\"true\"\n                        (removed)=\"removePermission(i,permission)\">\n                        {{permission}}\n                        <mat-icon\n                            matChipRemove>\n                            cancel\n                        </mat-icon>\n                    </mat-chip>\n    \n                    <input\n                        id=\"permissionInput\"\n                        placeholder=\"Permissions\"\n                        [matChipInputFor]=\"permissionInput\"\n                        [matChipInputAddOnBlur]=\"false\"\n                        (matChipInputTokenEnd)=\"addPermissionOnBlur(i, $event)\"\n                        (input)=\"AddPermission(i, $event)\"\n                        (focus)=\"focusInPermission(i, widgets)\"\n                        [matAutocomplete]=\"auton\"\n                        required>\n                </mat-chip-list>\n                <mat-autocomplete #auton=\"matAutocomplete\" (optionSelected)=\"widgetValueSelected(i,$event)\">\n                  <mat-option *ngFor=\"let value of permLists\" [value]=\"value\">\n                    {{value}}\n                  </mat-option>\n                </mat-autocomplete>\n                <mat-error>Field\n                    is required\n                </mat-error>\n            </mat-form-field>\n        <button \n            type=\"button\" \n            mat-icon-button \n            (click)=\"removeObjectFromWidgets(i)\"\n        >\n            <mat-icon>delete</mat-icon>\n        </button>\n        \n        </div>\n        </div>\n        <div style=\"margin-bottom:10px\">\n            <button \n                mat-stroked-button \n                color=\"primary\" \n                (click)=\"addNewWidget()\"\n                type=\"button\"\n                style=\"text-align: left; width: 100%;\"\n                >\n                    [+] Add new\n            </button>\n        </div>\n            </div>\n            </div>\n            </form>\n        `;\n    $scope.manageAuthSetting=function(dt={}){\n        customDialog.customDialog(template,\n            InfoDialogController, dt).subscribe(\n            function(res) {\n                if (res) {}\n            }\n        );\n    }\n    $scope.refresh_table = () => {\n        $scope.allData=undefined;\n        $scope.filteredData=undefined;\n        self.ctx.detectChanges();\n        self.onInit();\n    }\n    $scope.applyFilter = (event) => {\n        const filterValue = event.target.value.toLowerCase();\n        $scope.filteredData = $scope.allData;\n        \n        $scope.filteredData = $scope.filteredData.filter(ele=>{\n            if(ele.name.toLowerCase().search(filterValue)!=-1){\n                return ele;\n            }\n        })\n        \n    }\n    function InfoDialogController(instance) {\n        instance.widgets=getWidgetData();\n        instance.selectedDashboard = []\n        \n        instance.dashboards=$scope.dashboards;\n          instance.form=instance.fb.group({\n              name:['', instance.validators.required],\n              dashboards:['', instance.validators.required],\n              widgets: $scope.fb.array([]),\n          });\n          instance.isAdd = true;\n          if(instance.data.name){\n              instance.isAdd = false;\n          }\n          if(Object.keys(instance.data).length>1){\n              instance.form.get('name').setValue(instance.data.name);\n              instance.form.get('dashboards').setValue(instance.data.dashboards);\n              if(instance.data.widgets.length){\n                  farr=instance.fb.array([]);\n                  instance.data.widgets.forEach(widget=>{\n                      a=instance.fb.group({\n                          key: widget?.name,\n                          value: ['']\n                      });\n                      a.get('value').setValue(widget?.value);\n                      farr.push(a);\n                  });\n                  instance.form.setControl('widgets', farr)\n              }\n          }else{\n              AddWidgetToForm();\n          }\n          instance.close=()=>{\n              instance.dialogRef.close(null);\n          }\n          function makeWidget(){\n            return instance.fb.group({\n                key:['', instance.validators.required],\n                value: ['', instance.validators.required]\n            });\n        }\n        // process dashboard from id to Object\n        \n        if(instance.form.value?.dashboards){\n            instance.form.value.dashboards.map(e=>{\n                instance.dashboards.map(i=>{\n                    if(i.id.id==e){\n                        instance.selectedDashboard.push(i)\n                        return\n                    }\n                })\n            })\n        } //\n        function AddWidgetToForm(){\n            (instance.form.get('widgets')).push(makeWidget());\n        }\n        \n        instance.removePermission=(i, permission)=>{\n            ind=instance.form.get('widgets').at(i).value.value.indexOf(permission);\n            val=instance.form.get('widgets').at(i).value.value;\n            val.splice(ind, 1);\n            instance.form.get('widgets').at(i).get('value').setValue(val);\n        }\n        instance.addPermissionOnBlur=(i, $event)=>{\n            const value = ($event.value || '').trim();\n            if(value){\n                val=instance.form.get('widgets').at(i).value.value?instance.form.get('widgets').at(i).value.value:[];\n                val.push(value)\n                instance.form.get('widgets').at(i).get('value').setValue(val);\n            }\n            $('#permissionInput').val(\"\");\n            \n        }\n        instance.AddPermission=(i, $event)=>{\n            value=$event.target.value;\n            \n              let x=instance.permListBackup.filter(permList => permList.includes(value));\n              instance.permLists=[...x];\n            \n              if(value.charAt(value.length-1)==\",\"){\n                val=instance.form.get('widgets').at(i).value.value?instance.form.get('widgets').at(i).value.value:[];\n                val.push(value.substr(0, value.length-1))\n                instance.form.get('widgets').at(i).get('value').setValue(val);\n                $event.target.value=\"\";\n              }\n              self.ctx.detectChanges();\n        }\n        \n        instance.splittedDashboardFromId = (dashboard)=> {\n            title = dashboard.title;\n            const regexPattern =\n                /([0-9]+:[0-9a-zA-Z_-]+:[0-9()+.,a-zA-Z_-]+)/;\n            const regList = title.match(\n                regexPattern);\n            if (regList == null) {\n                return title;\n            } else {\n                const lst = title.split(':');\n                return lst[lst.length - 1].slice(0,-1);\n            }\n        }\n        instance.saveAuthSetting=()=>{\n            if(instance.form.valid){\n                let roleInfo=data.roleInfo;\n                let x=Object.entries(roleInfo);\n                index=-1;\n                for(let i=0; i<x.length; i++){\n                    if(x[i][0]==instance.data.name){\n                        index=i;\n                    }\n                }\n                if(index>-1){\n                    x.splice(index,1,[instance.form.value.name, {}]);\n                }\n                roleInfo=Object.fromEntries(x);\n                roleInfo[instance.form.value.name]={\n                    dashboards: instance.form.value.dashboards,\n                    widgets: {}\n                };\n                instance.form.value.widgets.forEach(widget=>{\n                    roleInfo[instance.form.value.name].widgets[widget.key]=widget.value;\n                })\n                data.roleInfo=roleInfo;\n                self.ctx.attributeService.saveEntityAttributes({entityType:'CUSTOMER', id:device[0].datasource.entity.id.id}, 'SERVER_SCOPE', [{key:device[0].dataKey.name, value:data}]).subscribe(resp=>{\n                    self.ctx.detectChanges();\n                    self.ctx.showToast('success', 'Auth setting saved successfully', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                    self.onInit();\n                    instance.dialogRef.close(null);\n                }, error=>{\n                    self.ctx.detectChanges();\n                    self.ctx.showToast('error', 'Auth setting is not saved!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                });\n            }else{\n                self.ctx.showToast('error', 'Invalid input fields', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n            }\n        }\n        // change dashboard \n        instance.onDashboardChange = (e) => {\n            instance.selectedDashboard = []\n            e.forEach(ele=>{\n                instance.dashboards.forEach(i=>{\n                    if(ele==i.id.id){\n                        instance.selectedDashboard = [...instance.selectedDashboard, i]\n                        return\n                    }\n                })\n            });\n            \n            \n            self.ctx.detectChanges();\n        }\n        // remove selected chip\n        instance.onCatRemoved = (dashboard) => {\n            \n            const index = instance.form.value.dashboards.indexOf(dashboard.id.id);\n            let x=instance.form.value.dashboards\n            if (index > -1) { // only splice array when item is found\n              x.splice(index, 1); // 2nd parameter means remove one item only\n            }\n            instance.form.get('dashboards').setValue(x);\n            removeFirst(instance.selectedDashboard, dashboard);\n            // instance.selectedDashboard = categories;\n            // instance.form.get('roleInfo').at(index).get('dashboards').setValue(categories);\n            self.ctx.detectChanges();\n          }\n        const removeFirst = (array, toRemove) => {\n            const index = array.indexOf(toRemove);\n            if (index !== -1) {\n              array.splice(index, 1);\n        }\n      }\n      instance.addNewWidget = () => {\n          AddWidgetToForm()\n      }\n      instance.removeObjectFromWidgets = (index) =>{\n          instance.form.get('widgets').removeAt(index);\n      }\n      instance.filterWidgetKey=(event)=>{\n          instance.widgets=getWidgetData();\n          const filterValue = event.target.value.toLowerCase();\n          let x=instance.widgets.filter(widget => widget.widgetKey.toLowerCase().includes(filterValue));\n          instance.widgets=[...x];\n      }\n      instance.focusInPermission=(i, widgets)=>{\n          wk=instance.form.value.widgets[i].key;\n          if(wk){\n              let x=widgets.filter(wd=>wd.widgetKey==wk);\n              instance.permLists= x[0].permList;\n          }else{\n              instance.permLists= [];\n          }\n          instance.permListBackup=[...instance.permLists]\n          self.ctx.detectChanges();\n      }\n      instance.widgetValueSelected=(i,event)=>{\n          let exVal=instance.form.get('widgets').at(i).get('value').value;\n          if(exVal){\n              exVal.push(event.option.value)\n          }else{\n              exVal=[event.option.value];\n          }\n          instance.form.get('widgets').at(i).get('value').setValue(exVal);\n          $('#permissionInput').val(\"\");\n      }\n      function getWidgetData(){\n            return [{\"widgetKey\": \"key1\", \"permList\": [\"read\", \"write\", \"update\"]},{\"widgetKey\": \"key2\", \"permList\": [\"read\", \"write\", \"update\", \"control\"]},{\"widgetKey\": \"key3\", \"permList\": [\"read\", \"write\", \"update\", \"control\", \"delete\"]}]\n        }\n        \n    }\n    \n    $scope.deleteAuthSetting=function(dt, selected=false){\n        let roleInfo=data.roleInfo;\n        let shouldDelete=false;\n        if(selected){\n            $scope.selectedAuth.forEach(auth=>{\n                delete roleInfo[auth.name];\n            });\n            shouldDelete=true;\n        }else{\n            if(confirm('Do you really want to delete?')){\n                delete roleInfo[dt.name];\n                shouldDelete=true;\n            }\n        }\n        if(shouldDelete){\n            data.roleInfo=roleInfo;\n            self.ctx.attributeService.saveEntityAttributes({entityType:'CUSTOMER', id:device[0].datasource.entity.id.id}, 'SERVER_SCOPE', [{key:device[0].dataKey.name, value:data}]).subscribe(resp=>{\n                self.ctx.detectChanges();\n                self.ctx.showToast('success', 'Auth setting saved successfully', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                self.onInit();\n            }, error=>{\n                self.ctx.detectChanges();\n                self.ctx.showToast('error', 'Auth setting is not saved!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n            });\n        }\n    }\n}\nself.onDataUpdated=function(){\n    self.onResize();\n}\nself.onResize=function(){\n    const { $scope }=self.ctx;\n    $scope.tableHeight=self.ctx.height-118;\n    self.ctx.detectChanges();\n    self.ctx.updateUi()\n    \n    \n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\n        ],\n        \"properties\": {\n            \"dashboardChipsBgColor\":{\n                \"title\":\"Dashboard list background color\",\n                \"type\":\"string\"\n            },\n            \"dashboardChipsTxtColor\":{\n                \"title\":\"Dashboard list text color\",\n                \"type\":\"string\"\n            },\n            \"dashboardWidgetBgColor\":{\n                \"title\":\"Dashboard chips background color\",\n                \"type\":\"string\"\n            },\n            \"dashboardWidgetTxtColor\":{\n                \"title\":\"Dashboard chips text color\",\n                \"type\":\"string\"\n            },\n            \"tableHeaderBgColor\":{\n                \"title\":\"Table header background color\",\n                \"type\":\"string\",\n                \"default\": \"#111111\"\n            },\n            \"tableHeaderTxtColor\":{\n                \"title\":\"Table header text color\",\n                \"type\":\"string\",\n                \"default\": \"#000000\"\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\":\"dashboardChipsBgColor\",\n            \"type\":\"color\"\n        },\n        {\n            \"key\":\"dashboardChipsTxtColor\",\n            \"type\":\"color\"\n        },\n        {\n            \"key\":\"dashboardWidgetBgColor\",\n            \"type\":\"color\"\n        },\n        {\n            \"key\":\"dashboardWidgetTxtColor\",\n            \"type\":\"color\"\n        },\n        {\n            \"key\":\"tableHeaderBgColor\",\n            \"type\":\"color\"\n        },\n        {\n            \"key\":\"tableHeaderTxtColor\",\n            \"type\":\"color\"\n        }]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#000000\",\"color\":\"rgba(255,255,255,0.87)\",\"padding\":\"8px\",\"settings\":{\"sectionBgColor\":\"#b2adad\",\"sectionTxtColor\":\"#ffffff\",\"authSettingsDarkMode\":true},\"title\":\"Auth Setting\",\"showTitleIcon\":false,\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"showLegend\":false}"
      }
    }
  ]
}