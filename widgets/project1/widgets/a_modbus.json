{
  "widgetsBundle": {
    "alias": "a_modbus",
    "title": "A Modbus",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "modbus_module_1",
      "name": "Modbus module 1",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<!--This section is for gateway table-->\n<div class=\"col-md-8\" *ngIf=\"isGateway\">\n    <div class=\"header_section\">\n        <div class=\"header_left\">\n            <strong>\n                <span class=\"gateway_title\">Modbus Gateway</span>\n            </strong>\n            \n        </div>\n        <div class=\"header_right\">\n            <div class=\"search_bar\">\n                <input type=\"text\" placeholder=\"search here ...\" [(ngModel)]=\"gatewaySearchText\" (ngModelChange)=\"searchDataFromGatewayTable()\"/>\n                <mat-icon class=\"search_icon\">search</mat-icon>\n            </div>\n            <div class=\"add_new_GW_btn\">\n                <button mat-stroked-button [style.background-color]=\"settings?.addBtnBgColor\" color=\"primary\" (click)=\"openDialog()\">\n                    <span [style.color]=\"settings?.addBtnTxtColor\">+ ADD NEW GW</span>\n                </button>\n            </div>\n            <div class=\"deploy_btn\">\n                <button mat-stroked-button color=\"primary\" (click)=\"deploy()\" [style.background-color]=\"settings?.deployBtnBgColor\">\n                    <span [style.color]=\"settings?.deployBtnTxtColor\">DEPLOY</span> <mat-icon>play_arrow</mat-icon>\n                </button>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"dataSource\">\n        <div class=\"rf\" [style.height]=\"height+'px'\"\n            [style.overflow]=\"'auto'\">\n            <mat-table [dataSource]=\"dataSource\" class=\"satl-table\">\n                <div *ngFor=\"let col of displayedColumns\">\n                    <ng-container matColumnDef={{col}}>\n                        <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\" class=\"headercheckboxcell {{col}}\">\n                            <div id=\"mat-report-header-search-box\">\n                                <mat-checkbox \n                                    *ngIf=\"col==='checkbox'\"\n                                    (change)=\"allElementSelectChange($event)\"\n                                    [checked]=\"isAllSelected\"\n                                    [indeterminate]=\"selected_data.length>0 && selected_data.length!==dataSource.length\"\n                                    ></mat-checkbox>\n                                <span *ngIf=\"col!=='checkbox'\" \n                                    [ngClass]=\"col === 'actions' ? 'align_left': 'align_right'\"\n                                >{{col.toUpperCase()}}</span>\n                            </div>  \n                        </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\" [style.background-color]=\"bgColor\" [style.color]=\"color\" class=\"checkboxcell\"  [style.border-bottom-color]=\"settings?.tableRowLineColor\">\n                            <mat-checkbox \n                                *ngIf=\"col==='checkbox'\" \n                                class=\"example-margin\"  \n                                (change)=\"singleElementSelectChange($event, element)\"\n                                [checked]=\"selected_data.indexOf(element)!==-1\"\n                                >\n                                \n                            </mat-checkbox>\n                            <span *ngIf=\"col!=='checkbox'\">{{element[col]}}</span>\n                            <div *ngIf=\"col=='actions'\">\n                                <button \n                                    mat-icon-button \n                                    aria-label=\"Example icon button with a vertical three dot icon\"\n                                    (click)=\"openFunctionDialog(element)\"\n                                >\n                                    <mat-icon [style.color]=\"color\">functions</mat-icon>\n                                </button>\n                                <button \n                                    mat-icon-button \n                                    aria-label=\"Example icon button with a vertical three dot icon\"\n                                    (click)=\"forwardChangePage(element)\"\n                                >\n                                    <mat-icon [style.color]=\"color\">settings</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"openDialog(element)\">\n                                    <mat-icon [style.color]=\"color\">edit</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"deleteGateway(element)\">\n                                    <mat-icon [style.color]=\"color\">delete</mat-icon>\n                                </button>\n                            </div>\n                        </mat-cell>\n                    </ng-container>\n                </div>\n                <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\n                <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n            </mat-table>\n        </div>\n        <mat-paginator\n            [style.background-color]=\"bgColor\"\n            [style.color]=\"color\"\n            [length]=\"dataSource.length\"\n            [pageSize]=\"5\"\n            [pageSizeOptions]=[5,10]\n            aria-label=\"Select page\"\n            showFirstLastButtons=\"true\"\n            class=\"report-form-paginator\">\n        </mat-paginator>\n    </div>\n</div>\n\n\n<!--This section is for gateway endpoint table-->\n\n<div class=\"col-md-8\" *ngIf=\"isGatewayEndpoint\">\n    <div class=\"header_section\">\n        <div class=\"header_left\" (click)=\"backwardChangePage()\">\n            <mat-icon>keyboard_arrow_left</mat-icon>\n            <strong>\n                <span class=\"gateway_title\">Gateway Endpoint</span>\n            </strong>\n        </div>\n        <div class=\"header_right\">\n            <!--<div>-->\n            <!--    <div *ngIf=\"!isDeviceSearchFieldShow\" (click)=\"changeSearchFieldShowState()\">-->\n            <!--        <button mat-fab color=\"primary\" aria-label=\"Example icon button with a delete icon\">-->\n            <!--          <mat-icon>search</mat-icon>-->\n            <!--        </button>-->\n            <!--    </div>-->\n            <!--    <div *ngIf=\"isDeviceSearchFieldShow\" id=\"mat-report-header-search-box\">-->\n            <!--        <mat-form-field appearance=\"outline\" floatLabel=\"never\">-->\n            <!--            <mat-icon matPrefix class=\"material-symbols-outlined\">search</mat-icon>-->\n            <!--            <input [(ngModel)]=\"deviceSearchText\" (ngModelChange)=\"searchDataFromDeviceTable()\" matInput placeholder=\"Search\" style=\"font-size: 14px;\">-->\n            <!--            <button (click)=\"changeSearchFieldShowState()\" matSuffix mat-icon-button aria-label=\"Clear\"><mat-icon>close</mat-icon></button>-->\n            <!--        </mat-form-field>-->\n            <!--    </div>-->\n            <!--</div>-->\n            <div class=\"search_bar\">\n                <input type=\"text\" placeholder=\"search here ...\" [(ngModel)]=\"gatewayEndpointSearchText\" (ngModelChange)=\"searchDataFromGatewayEndpointTable()\"/>\n                <mat-icon class=\"search_icon\">search</mat-icon>\n            </div>\n            <div class=\"add_new_btn\">\n                <button mat-stroked-button color=\"primary\" (click)=\"openDialog(element)\">+ ADD NEW</button>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"dataSource\">\n        <div class=\"rf\" [style.height]=\"height+'px'\"\n            [style.overflow]=\"'auto'\">\n            <mat-table [dataSource]=\"dataSource\" class=\"satl-table\">\n                <div *ngFor=\"let col of displayedColumns\">\n                    <ng-container matColumnDef={{col}}>\n                        <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\" class=\"headercheckboxcell {{col}}\">\n                            <div id=\"mat-report-header-search-box\">\n                                <mat-checkbox \n                                    *ngIf=\"col==='checkbox'\"\n                                    (change)=\"allElementSelectChange($event)\"\n                                    [checked]=\"isAllSelected\"\n                                    [indeterminate]=\"selected_data.length>0 && selected_data.length!==dataSource.length\"\n                                    ></mat-checkbox>\n                                <span *ngIf=\"col!=='checkbox'\" \n                                    [ngClass]=\"col === 'actions' ? 'align_left': 'align_right'\"\n                                >{{col.toUpperCase()}}</span>\n                            </div>  \n                        </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\" [style.background-color]=\"bgColor\" [style.color]=\"color\" class=\"checkboxcell\"  [style.border-bottom-color]=\"settings?.tableRowLineColor\">\n                            <mat-checkbox \n                                *ngIf=\"col==='checkbox'\" \n                                class=\"example-margin\"  \n                                (change)=\"singleElementSelectChange($event, element)\"\n                                [checked]=\"selected_data.indexOf(element)!==-1\"\n                                >\n                                \n                            </mat-checkbox>\n                            <span *ngIf=\"col!=='checkbox'\">{{element[col]}}</span>\n                            <div *ngIf=\"col=='actions'\">\n                                <button mat-icon-button (click)=\"openDialog(element)\">\n                                    <mat-icon [style.color]=\"color\">edit</mat-icon>\n                                </button>\n                                <button\n                                    mat-icon-button \n                                    aria-label=\"Example icon button with a vertical three dot icon\"\n                                    (click)=\"forwardChangePage(element)\"\n                                >\n                                    <mat-icon [style.color]=\"color\">settings</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"deleteGatewayEndpoint(element)\">\n                                    <mat-icon [style.color]=\"color\">delete</mat-icon>\n                                </button>\n                            </div>\n                        </mat-cell>\n                    </ng-container>\n                </div>\n                <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\n                <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n            </mat-table>\n        </div>\n        <mat-paginator\n            [style.background-color]=\"bgColor\"\n            [style.color]=\"color\"\n            [length]=\"dataSource.length\"\n            [pageSize]=\"5\"\n            [pageSizeOptions]=[5,10]\n            aria-label=\"Select page\"\n            showFirstLastButtons=\"true\"\n            class=\"report-form-paginator\">\n        </mat-paginator>\n    </div>\n</div>\n\n\n<!--This is for devices page-->\n<div class=\"col-md-8\" *ngIf=\"isGatewayDevice\">\n    <div class=\"header_section\">\n        <div class=\"header_left\" (click)=\"backwardChangePage()\">\n            <mat-icon>keyboard_arrow_left</mat-icon>\n            <span class=\"gateway_title\">GateWay Devices</span>\n        </div>\n        <div class=\"header_right\">\n            <!--<div>-->\n            <!--    <div *ngIf=\"!isDeviceSearchFieldShow\" (click)=\"changeSearchFieldShowState()\">-->\n            <!--        <button mat-fab color=\"primary\" aria-label=\"Example icon button with a delete icon\">-->\n            <!--          <mat-icon>search</mat-icon>-->\n            <!--        </button>-->\n            <!--    </div>-->\n            <!--    <div *ngIf=\"isDeviceSearchFieldShow\" id=\"mat-report-header-search-box\">-->\n            <!--        <mat-form-field appearance=\"outline\" floatLabel=\"never\">-->\n            <!--            <mat-icon matPrefix class=\"material-symbols-outlined\">search</mat-icon>-->\n            <!--            <input [(ngModel)]=\"deviceSearchText\" (ngModelChange)=\"searchDataFromDeviceTable()\" matInput placeholder=\"Search\" style=\"font-size: 14px;\">-->\n            <!--            <button (click)=\"changeSearchFieldShowState()\" matSuffix mat-icon-button aria-label=\"Clear\"><mat-icon>close</mat-icon></button>-->\n            <!--        </mat-form-field>-->\n            <!--    </div>-->\n            <!--</div>-->\n            <div class=\"add_new_btn\">\n                <button mat-stroked-button color=\"primary\" (click)=\"openDialog(element)\">+ ADD NEW</button>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"dataSource\">\n        <div class=\"rf\" [style.height]=\"height+'px'\"\n            [style.overflow]=\"'auto'\">\n            <mat-table [dataSource]=\"dataSource\" class=\"satl-table\">\n                <div *ngFor=\"let col of displayedColumns\">\n                    <ng-container matColumnDef={{col}}>\n                        <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\" class=\"headercheckboxcell {{col}}\">\n                            <div id=\"mat-report-header-search-box\">\n                                <mat-checkbox \n                                    *ngIf=\"col==='checkbox'\"\n                                    (change)=\"allElementSelectChange($event)\"\n                                    [checked]=\"isAllSelected\"\n                                    [indeterminate]=\"selected_data.length>0 && selected_data.length!==dataSource.length\"\n                                    ></mat-checkbox>\n                                <span *ngIf=\"col!=='checkbox'\" \n                                    [ngClass]=\"col === 'actions' ? 'align_left': 'align_right'\"\n                                >{{col.toUpperCase()}}</span>\n                            </div>  \n                        </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\" [style.background-color]=\"bgColor\" [style.color]=\"color\" class=\"checkboxcell\"  [style.border-bottom-color]=\"settings?.tableRowLineColor\">\n                            <mat-checkbox \n                                *ngIf=\"col==='checkbox'\" \n                                class=\"example-margin\"  \n                                (change)=\"singleElementSelectChange($event, element)\"\n                                [checked]=\"selected_data.indexOf(element)!==-1\"\n                                >\n                                \n                            </mat-checkbox>\n                            <span *ngIf=\"col!=='checkbox'\">{{element[col]}}</span>\n                            <div *ngIf=\"col=='actions'\">\n                                <button mat-icon-button (click)=\"openDialog(element)\">\n                                    <mat-icon>edit</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"deleteGatewayDevice(element)\">\n                                    <mat-icon>delete</mat-icon>\n                                </button>\n                            </div>\n                        </mat-cell>\n                    </ng-container>\n                </div>\n                <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\n                <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n            </mat-table>\n        </div>\n        <mat-paginator\n            [style.background-color]=\"bgColor\"\n            [style.color]=\"color\"\n            [length]=\"dataSource.length\"\n            [pageSize]=\"5\"\n            [pageSizeOptions]=[5,10]\n            aria-label=\"Select page\"\n            showFirstLastButtons=\"true\"\n            class=\"report-form-paginator\">\n        </mat-paginator>\n    </div>\n</div>",
        "templateCss": "/*////////////////////////////////*/\n.header_section{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 70px;\n}\n.header_left{\n    display: flex;\n    align-items: center;\n    \n}\n.gateway_title{\n    font-size: 25px;\n    margin-left: 10px;\n}\n.header_right{\n    margin-bottom: 5px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    gap: 5px;\n}\n.search_bar{\n    position: relative;\n}\n.search_bar input{\n    padding-top: 7px;\n    padding-bottom: 7px;\n    padding-left: 7px;\n    padding-right: 30px;\n    border-radius: 4px;\n    border: 1px solid gray;\n}\n.search_icon{\n    position: absolute;\n    top: 6px;\n    right: 5px;\n}\n.add_new_GW_btn button{\n    background-color: #CC0000;\n    color: white;\n    padding: 0 20px;\n}\n.add_new_GW_btn span{\n    color: white;\n}\n.deploy_btn button{\n    background-color: #CC0000;\n    color: white;\n    padding: 0 20px;\n}\n.deploy_btn span{\n    color: white;\n}\n.add_new_btn button{\n    background-color: #CC0000;\n    padding: 0 20px;\n}\n.add_new_btn span{\n    color: white;\n}\n.mat-spinner{\n    position: absolute;\n    top: 45%;\n    left: 45%;\n    /*margin: 48% auto;*/\n    /*width: 100%;;*/\n    /*height: 100%;*/\n    /*display: flex;*/\n    /*justify-content: center;*/\n    /*align-items: center;*/\n}\n\nmat-header-cell{\n    width: 23%;\n    text-align: center;\n}\nmat-header-cell:first-child{\n    width: 10%;\n    text-align: left;\n}\nmat-header-cell:last-child{\n    width: 23%;\n    text-align: right;\n}\nmat-header-cell:last-child span{\n    padding-right: 15px;\n}\n\nmat-cell{\n    text-align: center;\n}\nmat-cell:first-child{\n    text-align: left;\n}\nmat-cell:last-child{\n    text-align: right;\n}\n.mat-form-field-appearance-outline .mat-form-field-infix {\n  border: none!important;   \n}\nmat-form-field{\n    /*width: 100%;*/\n}\n/*end popup style*/\n#mat-report-header-search-box .mat-form-field-wrapper{\n    padding: 0;\n}\n.mat-input-element::placeholder{\n    color: inherit;\n}\n#mat-report-header-search-box .mat-form-field-infix {\n    border-top: 4px solid transparent;\n}\n#mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-prefix, #mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-suffix {\n    top: 5px;\n}\n#mat-report-header-search-box mat-form-field{\n    width: 300px;\n}",
        "controllerScript": "self.onInit = function() {\n    $(document).ready(function(){\n      self.onResize();\n    });\n    $scope = self.ctx.$scope;\n    $scope.color=self.ctx.widgetConfig.color;\n    \n    \n    data=[\n        {\n            \"gwName\":\"Device 133\",\n            \"accessToken\":\"123412341234\",\n            \"host\":\"127.0.0.1\",\n            \"port\":\"88\",\n            \"tsTopic\":\"/ts/dvc\",\n            \"tsDataPushInterval\":\"3\",\n            \"attrTopic\":\"/attr/device\",\n            \"rpcPubTopic\":\"rpc/pub\",\n            \"rpcSubTopic\":\"rpc/sub\",\n            \"gwDevices\":[\n                {\n                    \"title\":\"Device 1\",\n                    \"ipAddress\":\"127.0.0.1\",\n                    \"portNumber\":\"8899\",\n                    \"unitId\":\"asd\",\n                    \"functions\":\"\",\n                    \"devices\":[\n                        {\n                            \"deviceId\":\"s09f80a98sdf\",\n                            \"dataPoints\":[\n                                {\n                                    \"dataKey\":\"Voltage\",\n                                    \"fc\":\"3\",\n                                    \"address\":\"345\",\n                                    \"dataType\":\"int\",\n                                    \"dataFit\": \"64\"\n                                }\n                            ],\n                            \"functions\":\"\"\n                        },\n                        {\n                            \"deviceId\":\"s09f80a98sdf\",\n                            \"dataPoints\":[\n                                {\n                                    \"dataKey\":\"Voltage\",\n                                    \"fc\":\"3\",\n                                    \"address\":\"345\",\n                                    \"dataType\":\"int\",\n                                    \"dataFit\": \"64\"\n                                }\n                            ],\n                            \"functions\":\"\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"gwName\":\"Device 2\",\n            \"accessToken\":\"4052985294\",\n            \"host\":\"127.0.0.1\",\n            \"port\":\"7788\",\n            \"tsTopic\":\"/ts/dvc\",\n            \"tsDataPushInterval\":\"3\",\n            \"attrTopic\":\"/attr/device\",\n            \"rpcPubTopic\":\"rpc/pub\",\n            \"rpcSubTopic\":\"rpc/sub\",\n            \"gwDevices\":[\n                {\n                    \"title\":\"Device 4\",\n                    \"ipAddress\":\"127.0.0.1\",\n                    \"portNumber\":\"8899\",\n                    \"unitId\":\"asd\",\n                    \"functions\":\"\",\n                    \"devices\":[\n                        {\n                            \"deviceId\":\"s09f80a98sdf\",\n                            \"dataPoints\":[\n                                {\n                                    \"dataKey\":\"Voltage\",\n                                    \"fc\":\"3\",\n                                    \"address\":\"345\",\n                                    \"dataType\":\"int\",\n                                    \"dataFit\": \"32\"\n                                }\n                            ],\n                            \"functions\":\"\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ];\n    \n    // global variables\n    $scope.gatewayObject;\n    let modbusData=[];\n    $scope.globalGatewayData = [];\n    \n    \n    $scope.isGatewaySearchFieldShow = false;\n    $scope.isDeviceSearchFieldShow = false;\n    \n    $scope.isGateway = true;\n    $scope.isGatewayEndpoint = false;\n    $scope.isGatewayDevice = false;\n    $scope.functions = false;\n    \n    self.ctx.gatewayList = [];\n    $scope.gatewayEndpointList = [];\n    self.ctx.gatewayDeviceList = [];\n    \n    $scope.settings=self.ctx.settings;\n    let GATEWAY_ELEMENT_DATA = data;\n    $scope.gatewaySearchText = '';\n    $scope.gatewayEndpointSearchText = '';\n    $scope.deviceSearchText = '';\n    \n    $scope.selected_data = [];\n    $scope.isAllSelected = false;\n    $scope.isDeterminate = false;\n    $scope.isEmptySelectedData = true;\n    \n    $scope.displayedColumns = ['checkbox','gwName', 'host', 'port','devices', 'actions'];\n    \n    \n    \n    window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n    window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;\n    window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange\n    \n    if (!window.indexedDB) {\n        window.alert(\"Your browser doesn't support a stable version of IndexedDB.\")\n    }\n    \n    var db;\n    let conn = window.indexedDB.open(\"modbusgw\", 1);\n    \n    conn.onsuccess = function (event) {\n        db = conn.result;\n        clearData();\n        writeData(data);\n        $scope.readAll();\n        \n    };\n    \n    function clearData() {\n        const transaction = db.transaction([\"modbus\"], \"readwrite\");\n        transaction.oncomplete = (event) => {};\n        transaction.onerror = (event) => {};\n        const objectStore = transaction.objectStore(\"modbus\");\n        const objectStoreRequest = objectStore.clear();\n        objectStoreRequest.onsuccess = (event) => {\n        };\n    };\n    conn.onupgradeneeded = function (event, data) {\n        var db = event.target.result;\n        var objectStore = db.createObjectStore(\"modbus\", {keyPath: \"gw\"});\n    \n        objectStore.add({gw: 'gateway', value: data});\n    }\n    function writeData(data){\n        let transaction = db.transaction([\"modbus\"], \"readwrite\")\n            .objectStore(\"modbus\");\n        transaction.add({gw: 'gateway', value: data});\n    }\n    conn.onerror = function (event) {\n        // console.log(\"error: \");\n    };\n    \n    $scope.readAll=()=>{\n        modbusDt = [];\n        let objectStore = db.transaction(\"modbus\").objectStore(\"modbus\");\n        objectStore.openCursor().onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                modbusDt=cursor.value.value;\n                cursor.continue();\n            } else {\n                modbusDt.forEach(gwt=>{\n                    gwt['devices']=gwt.gwDevices.length;\n                });\n                // if($scope.isGateway){\n                //     $scope.dataSource=[...modbusDt];\n                // }else{\n                //     if($scope.gatewayObject!=undefined){\n                //         gatewayF=modbusDt.filter(md=>md.accessToken==$scope.gatewayObject.accessToken);\n                //         if(gatewayF){\n                //             $scope.dataSource=[...gatewayF[0].gwDevices];\n                //             $scope.gatewayObject=gatewayF[0];\n                //         }\n                //     }\n                // }\n                self.ctx.gatewayList = [...modbusDt];\n                if($scope.isGateway){\n                    $scope.dataSource = self.ctx.gatewayList;\n                }\n                \n                $scope.globalGatewayData=[...modbusDt];\n                self.ctx.detectChanges();\n            }\n        };\n    }\n    \n    $scope.modify=(cData, type='gateway')=>{\n        var objectStore = db.transaction([\"modbus\"], \"readwrite\")\n            .objectStore(\"modbus\");\n        objectStore.openCursor().onsuccess = (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n                const updateData = cursor.value;\n                updateData.value=cData;\n                cursor.update(updateData);\n                cursor.continue();\n            }else{\n                $scope.readAll();\n            }\n        }\n    }\n    \n    $scope.remove=(id)=>{\n        if (confirm('Do you really want to delete?')){\n            const request = db.transaction('modbus', 'readwrite').objectStore('modbus');\n            request.delete(id.toString());\n            request.onsuccess = () => {\n            }\n    \n            request.onerror = (err) => {\n            }\n            $scope.readAll();\n        }\n    }\n    \n    \n    \n    \n    // dialog essentials\n    let $injector = self.ctx.$scope.$injector;\n    let customDialog = $injector.get(self.ctx.servicesMap.get('customDialog'));\n    \n    $scope.searchDataFromGatewayTable = function(){\n        $scope.dataSource = $scope.globalGatewayData;\n        if($scope.gatewaySearchText!=''){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                if(ele.gwName.toLowerCase().search($scope.gatewaySearchText.toLowerCase())!=-1){\n                    return ele;\n                }\n            })\n        }\n        self.ctx.detectChanges()\n    }\n    $scope.searchDataFromGatewayEndpointTable = function(){\n        console.log($scope.gatewayEndpointList.gwDevices);\n        $scope.dataSource = $scope.gatewayEndpointList.gwDevices;\n        if($scope.gatewayEndpointSearchText!=''){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                if(ele.title.toLowerCase().search($scope.gatewayEndpointSearchText.toLowerCase())!=-1){\n                    return ele;\n                }\n            })\n        }\n        self.ctx.detectChanges()\n    }\n    $scope.searchDataFromDeviceTable = function(){\n        $scope.dataSource = DEVICE_ELEMENT_DATA;\n        if($scope.deviceSearchText!=''){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                if(ele.title.toLowerCase().search($scope.deviceSearchText.toLowerCase())!=-1){\n                    return ele;\n                }\n            })\n        }\n        self.ctx.detectChanges()\n    }\n    \n    $scope.forwardChangePage = function(element){\n        \n        if($scope.isGateway){\n            $scope.isGateway = false;\n            $scope.isGatewayEndpoint = true;\n            \n            $scope.gatewayEndpointList = element;\n            $scope.dataSource = $scope.gatewayEndpointList.gwDevices;\n            $scope.displayedColumns = ['checkbox','title','actions'];\n        }else if($scope.isGatewayEndpoint){\n            $scope.isGatewayEndpoint = false;\n            $scope.isGatewayDevice = true;\n            \n            self.ctx.gatewayDeviceList = element;\n            $scope.dataSource = self.ctx.gatewayDeviceList.devices;\n            $scope.displayedColumns = ['checkbox','deviceId','actions'];\n        }\n    }\n    $scope.backwardChangePage = function(element){\n        \n        if($scope.isGateway){\n            // $scope.isGateway = false;\n            // $scope.isGatewayDevice = true;\n        }else if($scope.isGatewayEndpoint){\n            $scope.isGateway = true;\n            $scope.isGatewayDevice = false;\n            \n            \n            $scope.dataSource = self.ctx.gatewayList;\n            $scope.displayedColumns = ['checkbox','gwName', 'host', 'port','devices', 'actions'];\n        }else{\n            $scope.isGatewayDevice = false;\n            $scope.isGatewayEndpoint = true;\n            \n            \n            $scope.dataSource = $scope.gatewayEndpointList.gwDevices;\n            $scope.displayedColumns = ['checkbox','title','actions'];\n            self.ctx.detectChanges();\n        }\n    }\n    \n    $scope.changeSearchFieldShowState = function() {\n        if($scope.isGateway){\n            $scope.isGatewaySearchFieldShow = !$scope.isGatewaySearchFieldShow;\n            $scope.gatewaySearchText = '';\n            $scope.dataSource = $scope.globalGatewayData;\n        }else{\n            $scope.isDeviceSearchFieldShow = !$scope.isDeviceSearchFieldShow;\n            $scope.deviceSearchText = '';\n            $scope.dataSource = DEVICE_ELEMENT_DATA;\n        }\n        \n        self.ctx.detectChanges();\n    }\n    \n    $scope.singleElementSelectChange = function(event, element){\n        isChecked = event.checked;\n        if(isChecked){\n            $scope.selected_data.push(element)\n        }else{\n            $scope.selected_data = $scope.selected_data.filter(ele=>ele.gwName!=element.gwName)\n        }\n        ////////////////////////////\n        if($scope.selected_data.length!==$scope.dataSource.length){\n            $scope.isAllSelected = false\n        }else if($scope.selected_data.length===$scope.dataSource.length){\n            $scope.isAllSelected = true\n        }\n        if($scope.selected_data.length===0){\n            $scope.isAllSelected = false\n        }\n    }\n    $scope.allElementSelectChange = function(event){\n        isChecked = event.checked;\n        if(isChecked){\n            $scope.isAllSelected = true\n            $scope.isAllElementSelected = true\n            $scope.selected_data = $scope.dataSource;\n        }else{\n            $scope.isAllSelected = false\n            $scope.isAllElementSelected = false\n            $scope.selected_data = []\n        }\n        self.ctx.detectChanges();\n    }\n    \n    $scope.deleteGateway = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element;\n            })\n            $scope.globalGatewayData = $scope.globalGatewayData.filter((ele, index)=>{\n                return ele.gwName!=element.gwName;\n            })\n            $scope.modify($scope.globalGatewayData);\n            \n            self.ctx.detectChanges()\n        }\n    }\n    $scope.deleteGatewayEndpoint = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element\n            })\n            \n            $scope.globalGatewayData.forEach((ele,index)=>{\n                if(ele.gwName===$scope.gatewayEndpointList.gwName){\n                    $scope.globalGatewayData[index].gwDevices = [...$scope.dataSource]\n                }\n            })\n            $scope.modify($scope.globalGatewayData)\n        }\n    }\n    $scope.deleteGatewayDevice = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element\n            })\n            $scope.globalGatewayData.forEach((ele, index)=>{\n                ele.gwDevices.forEach((device,idx)=>{\n                    if(device.title === self.ctx.gatewayDeviceList.title){\n                        $scope.globalGatewayData[index].gwDevices[idx].devices = [...$scope.dataSource]\n                    }\n                })\n            })\n            $scope.modify($scope.globalGatewayData)\n            \n            self.ctx.detectChanges()\n        }\n    }\n    \n    $scope.openFunctionDialog = function(element){\n        $scope.functions = true;\n        $scope.openDialog(element);\n    } \n    \n    \n    \n    $scope.openDialog=function(dt={}){\n        if($scope.isGateway && !$scope.functions){\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"gatewayform\"\n                    [formGroup]=\"gatewayform\" \n                    (submit)=\"saveGateway($event,dt)\"\n                    style=\"padding: '0px'\"\n                >\n                    <div aria-label=\"Info\" style=\"min-width: 500px;\">\n                        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                            <span fxFlex>\n                                <div style=\"display:flex;justify-content:space-between;\">\n                                    <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                        {{isAdd?'ADD':'UPDATE'}} GATEWAY\n                                    </div>\n                                </div>\n                            </span>\n                            <button mat-icon-button><mat-icon>save</mat-icon></button>\n                            <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                        </mat-toolbar>\n                        <div mat-dialog-content>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Gateway Name</mat-label>\n                                <input required formControlName=\"gwName\" matInput placeholder=\"Gateway Name\">\n                            </mat-form-field>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Access Token</mat-label>\n                                <input required formControlName=\"accessToken\" matInput placeholder=\"Access Token\">\n                            </mat-form-field>\n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>Host</mat-label>\n                                <input required formControlName=\"host\" matInput placeholder=\"Host\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Port</mat-label>\n                                    <input required formControlName=\"port\" matInput placeholder=\"Port\">\n                                </mat-form-field>\n                            </div>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Attribute Topic</mat-label>\n                                <input required formControlName=\"attrTopic\" matInput placeholder=\"Attribute Topic\">\n                            </mat-form-field>\n                            \n                            \n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Timeseries Topic</mat-label>\n                                <input required formControlName=\"tsTopic\" matInput placeholder=\"Timeseries Topic\">\n                            </mat-form-field>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Timeseries Data Push Interval (seconds)</mat-label>\n                                <input required formControlName=\"tsDataPushInterval\" matInput placeholder=\"Timeseries Data Push Interval (seconds)\">\n                            </mat-form-field>\n                            \n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>RPC Pub Topic</mat-label>\n                                <input formControlName=\"rpcPubTopic\" matInput placeholder=\"RPC Pub Topic\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>RPC Sub Topic</mat-label>\n                                    <input formControlName=\"rpcSubTopic\" matInput placeholder=\"RPC Sub Topic\">\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </div>\n                </form>`;\n        }else if($scope.isGateway && $scope.functions){\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"gatewayform\"\n                    [formGroup]=\"gatewayform\"\n                    (submit)=\"saveGatewayFunc($event,dt)\"\n                    style=\"padding: '0px'\"\n                >\n                    <div aria-label=\"Info\" style=\"min-width: 700px;\">\n                        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                            <span fxFlex>\n                                <div style=\"display:flex;justify-content:space-between;\">\n                                    <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                        GATEWAY FUNCTIONS\n                                    </div>\n                                </div>\n                            </span>\n                            <button mat-icon-button><mat-icon>save</mat-icon></button>\n                            <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                        </mat-toolbar>\n                        <div mat-dialog-content style=\"display:'flex';flex-direction:'column';gap:'5px'\">\n                            <mat-tab-group>\n                                <mat-tab label=\"Formater Function\">\n                                    <mat-form-field \n                                        appearance=\"outline\" \n                                        style=\"width:'100%';font-family: 'Courier';background-color: 'black';color: 'white';border-radius: '6px'\"\n                                    >\n                                        <mat-label style=\"color:'white'\">Formater Function (msg.attr, msg.ts)</mat-label>\n                                        <textarea rows=\"18\" matInput placeholder=\"Formater Function (msg.attr, msg.ts)\" formControlName=\"formaterFunc\" style=\"outline:'none'\"></textarea>\n                                    </mat-form-field>\n                                </mat-tab>\n                                <mat-tab label=\"Ts Formater Function\">\n                                    <mat-form-field \n                                        appearance=\"outline\" \n                                        style=\"width:'100%';font-family: 'Courier';background-color: 'black';color: 'white';border-radius: '6px'\"\n                                    >\n                                        <mat-label style=\"color:'white'\">TS Formater Function (msg.attr, msg.ts)</mat-label>\n                                        <textarea rows=\"18\" matInput placeholder=\"Ts Formater Function (msg.attr, msg.ts)\" formControlName=\"tsFormaterFunc\" style=\"outline:'none'\"></textarea>\n                                    </mat-form-field>\n                                </mat-tab>\n                            </mat-tab-group>\n                            \n                        </div>\n                    </div>\n                </form>`;\n        }else if($scope.isGatewayEndpoint){\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"gatewayendpoitform\"\n                    [formGroup]=\"gatewayendpoitform\" \n                    (submit)=\"saveGatewayEndpoint($event,dt)\"\n                    style=\"padding: '0px'\"\n                >\n                    <div aria-label=\"Info\" style=\"min-width: 700px;\">\n                        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                            <span fxFlex>\n                                <div style=\"display:flex;justify-content:space-between;\">\n                                    <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                        {{isAdd?'ADD':'UPDATE'}} GATEWAY ENDPOINT\n                                    </div>\n                                </div>\n                            </span>\n                            <button mat-icon-button><mat-icon>save</mat-icon></button>\n                            <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                        </mat-toolbar>\n                        <div mat-dialog-content>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Title</mat-label>\n                                <input required formControlName=\"title\" matInput placeholder=\"Title\">\n                            </mat-form-field>\n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>Ip Address</mat-label>\n                                <input required formControlName=\"ipAddress\" matInput placeholder=\"Ip Address\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Port Number</mat-label>\n                                    <input required formControlName=\"portNumber\" matInput placeholder=\"Port Number\">\n                                </mat-form-field>\n                            </div>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Unit Id</mat-label>\n                                <input required formControlName=\"unitId\" matInput placeholder=\"Unit Id\">\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </form>`;\n        }else{\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"deviceform\"\n                    [formGroup]=\"deviceform\" \n                    (submit)=\"saveDevice()\"\n                    style=\"padding: '0px'\"\n                >\n                <div aria-label=\"Info\" style=\"min-width: 1200px;\">\n                    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                    <span fxFlex>\n                        <div style=\"display:flex;justify-content:space-between;\">\n                            <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                {{isAdd?'ADD':'UPDATE'}} DEVICE\n                            </div>\n                        </div>\n                    </span>\n                        <button mat-icon-button><mat-icon>save</mat-icon></button>\n                        <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                    </mat-toolbar>\n                    <div mat-dialog-content>\n                        <div formArrayName=\"devices\">\n                            <div *ngFor=\"let device of deviceform.get('devices').controls; let deviceIndex=index\">\n                                <div [formGroupName]=\"deviceIndex\">\n                                    <cdk-accordion class=\"example-accordion\" style=\"display: 'block';min-width: '500px'; cursor:'pointer'\">\n                                        <cdk-accordion-item\n                                            class=\"example-accordion-item\"\n                                            style=\"border-radius: '5px'; display: 'block'; border: 'solid 1px #ccc'; padding:'10px'; margin-bottom:'5px'\"\n                                            role=\"button\"\n                                            tabindex=\"0\"\n                                            [attr.id]=\"'accordion-header-' + deviceIndex\"\n                                            [attr.aria-expanded]=\"selectedIndex==deviceIndex?true:false\"\n                                            [attr.aria-controls]=\"'accordion-body-' + deviceIndex\">\n                                            <div class=\"example-accordion-item-header\" (click)=\"accordionToggle(deviceIndex)\" [style.margin-bottom]=\"selectedIndex==deviceIndex?'15px':'4px'\" style=\"display:'flex'; justify-content:'space-between'\">\n                                              <span>\n                                                {{ device.value.deviceId==''?'Device': device.value.deviceId}}\n                                              </span>\n                                              <span class=\"example-accordion-item-description\" style=\"text-align:'right'\">\n                                                \n                                                <span *ngIf=\"selectedIndex==deviceIndex\">\n                                                    <mat-icon>expand_less</mat-icon>\n                                                </span>\n                                                <span *ngIf=\"!(selectedIndex==deviceIndex)\">\n                                                    <mat-icon>expand_more</mat-icon>\n                                                </span>\n                                              </span>\n                                            </div>\n                                            <div\n                                              class=\"example-accordion-item-body\"\n                                              role=\"region\"\n                                              [style.display]=\"selectedIndex==deviceIndex ? '' : 'none'\"\n                                              [attr.id]=\"'accordion-body-' + deviceIndex\"\n                                              [attr.aria-labelledby]=\"'accordion-header-' + deviceIndex\">\n                                              <div\n                                            style=\"\n                                            width:'100%'; \n                                            background-color: '#FEFCF3';\n                                            padding: '10px';\n                                            margin-bottom: '5px'\n                                            \"\n                                        >\n                                            <mat-form-field \n                                                appearance=\"outline\" \n                                                style=\"width:'100%'\"\n                                            >\n                                                <mat-label>Device Id</mat-label>\n                                                <input required\n                                                matInput \n                                                placeholder=\"Device Id\"\n                                                formControlName=\"deviceId\"\n                                                >\n                                            </mat-form-field>\n                                            <div formArrayName=\"dataPoints\">\n                                                <div\n                                                    *ngFor=\"let dataPoint of device.get('dataPoints').controls; let dpIndex=index\"\n                                                >\n                                                    <div [formGroupName]=\"dpIndex\" \n                                                        style=\"\n                                                            width: '100%'; \n                                                            display:'flex'; \n                                                            justify-content: 'space-between';\n                                                            align-items: 'center';\n                                                            gap: '4px';\n                                                        \"\n                                                    >\n                                                        <mat-form-field \n                                                            appearance=\"outline\" \n                                                            style=\"width:'100%'\"\n                                                        >\n                                                            <mat-label>Data key</mat-label>\n                                                            <input required\n                                                            matInput \n                                                            placeholder=\"Data key\"\n                                                            formControlName=\"dataKey\"\n                                                            >\n                                                        </mat-form-field>\n                                                        <mat-form-field appearance=\"outline\" style=\"width:'100%'\" >\n                                                            <mat-label>Fc</mat-label>\n                                                          <mat-select required placeholder=\"Fc\" formControlName=\"fc\">\n                                                            <mat-option value=\"3\">3</mat-option>\n                                                            <mat-option value=\"4\">4</mat-option>\n                                                          </mat-select>\n                                                        </mat-form-field>\n                                                        \n                                                        <mat-form-field \n                                                            appearance=\"outline\" \n                                                            style=\"width:'100%'\"\n                                                        >\n                                                            <mat-label>Address</mat-label>\n                                                            <input required\n                                                            matInput \n                                                            placeholder=\"Address\"\n                                                            formControlName=\"address\"\n                                                            >\n                                                        </mat-form-field>\n                                                        <mat-form-field appearance=\"outline\" style=\"width:'100%'\" >\n                                                            <mat-label>Data Type</mat-label>\n                                                              <mat-select required placeholder=\"Data Type\" formControlName=\"dataType\">\n                                                                <mat-option value=\"int\">Int</mat-option>\n                                                                <mat-option value=\"float\">Float</mat-option>\n                                                                <mat-option value=\"double\">Double</mat-option>\n                                                                <mat-option value=\"long\">Long</mat-option>\n                                                                <mat-option value=\"uint\">UInt</mat-option>\n                                                                <mat-option value=\"ulong\">ULong</mat-option>\n                                                                <mat-option value=\"boolean\">Boolean</mat-option>\n                                                              </mat-select>\n                                                        </mat-form-field>\n                                                        \n                                                        <mat-form-field \n                                                            appearance=\"outline\" \n                                                            style=\"width:'100%'\"\n                                                        >\n                                                            <mat-label>Data Fit</mat-label>\n                                                            <input required\n                                                            matInput \n                                                            placeholder=\"Data Fit\"\n                                                            formControlName=\"dataFit\"\n                                                            >\n                                                        </mat-form-field>\n                                                        \n                                                        <div style=\"margin-bottom: '20px'\" *ngIf=\"device.get('dataPoints').length>1\">\n                                                            <button mat-icon-button (click)=\"deleteDataPoints(deviceIndex, dpIndex)\">\n                                                                <mat-icon>delete</mat-icon>\n                                                            </button>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                                    <button mat-stroked-button (click)=\"addDataPoints(deviceIndex)\" [disabled]=\"deviceform.get('devices').at(deviceIndex).get('dataPoints').invalid\" style=\"top: -20px\">\n                                                     + Add new data point\n                                                    </button>\n                                                    <mat-form-field \n                                                        appearance=\"outline\" \n                                                        style=\"width:'100%';font-family: 'Courier';background-color: 'black';color: 'white';padding: '10px'\"\n                                                    >\n                                                        <mat-label>Function (msg.attr, msg.ts)</mat-label>\n                                                        <textarea matInput placeholder=\"Function (msg.attr, msg.ts)\" formControlName=\"functions\"></textarea>\n                                                    </mat-form-field>\n                                                    <div style=\"text-align: right;\" *ngIf=\"deviceform.value.devices.length>1\"><button mat-stroked-button (click)=\"removeDevice(deviceIndex)\">\n                                                     Remove device\n                                                    </button></div>\n                                                </div>\n                                            </div>\n                                        </cdk-accordion-item>\n                                    </cdk-accordion>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        \n                        \n                        <div (click)=\"addDevices()\" style=\"margin-top: '15px'\" *ngIf=\"isAdd\">\n                            <button [disabled]=\"!deviceform.valid\" style=\"margin-bottom: 15px;border-radius: 5px;padding: 5px;background-color: #ddebf0;cursor: pointer;border:'none'\">+ Add new device</button>\n                        </div>\n                    </div>\n                </div>\n                </form>`;\n        }\n        \n        customDialog.customDialog(template,\n            InfoDialogController, {data:dt}).subscribe(\n            function(res) {\n                if (res) {}\n            }\n        );\n        $scope.functions = false;\n    }\n\n    function InfoDialogController(instance) {\n        console.log('instance',instance.data.data)\n        instance.accordionItem={expanded:false};\n        instance.accordionToggle=(index)=>{\n            instance.accordionItem.expanded=instance.selectedIndex==index?!instance.accordionItem.expanded:true;\n            instance.selectedIndex=instance.accordionItem.expanded?index:-1;\n        }\n        // instance.changeType();\n        if($scope.isGateway){\n            instance.isAdd=instance.data.data.gwName==undefined;\n            \n        }else if($scope.isGatewayEndpoint){\n            instance.isAdd=instance.data.data.title==undefined;\n        }else{\n            instance.isAdd=instance.data.data.deviceId==undefined;\n        }\n        \n        \n        instance.gatewayform=instance.fb.group({\n            gwName: [instance.data.data.gwName?instance.data.data.gwName:''],\n            accessToken: [instance.data.data.accessToken?instance.data.data.accessToken:''],\n            host: [instance.data.data.host?instance.data.data.host:''],\n            port: [instance.data.data.port?instance.data.data.port:''],\n            tsTopic: [instance.data.data.tsTopic?instance.data.data.tsTopic:''],\n            tsDataPushInterval: [instance.data.data.tsDataPushInterval?instance.data.data.tsDataPushInterval:300],\n            attrTopic: [instance.data.data.attrTopic?instance.data.data.attrTopic:''],\n            rpcPubTopic: [instance.data.data.rpcPubTopic?instance.data.data.rpcPubTopic:''],\n            rpcSubTopic: [instance.data.data.rpcSubTopic?instance.data.data.rpcSubTopic:''],\n            formaterFunc: [instance.data.data?.formaterFunc?instance.data.data.formaterFunc:'return msg'],\n            tsFormaterFunc: [instance.data.data?.tsFormaterFunc?instance.data.data.tsFormaterFunc:'return msg'],\n            gwDevices: [instance.data.data?.gwDevices?.length?instance.data.data.gwDevices:[]]\n        })\n        \n        instance.saveGateway=()=>{\n            if(instance.gatewayform.valid){\n                \n                if(instance.isAdd){\n                    gwData=[...$scope.dataSource];\n                    gwData.push(instance.gatewayform.value);\n                    $scope.modify(gwData);\n                }else{\n                    indx=$scope.dataSource.indexOf(instance.data.data);\n                    let gwData=[...$scope.dataSource];\n                    gwData[indx]=instance.gatewayform.value\n                    $scope.modify(gwData);\n                }\n            }\n            instance.close();\n        }\n        instance.saveGatewayFunc=()=>{\n            if(instance.gatewayform.valid){\n                indx=$scope.dataSource.indexOf(instance.data.data);\n                let gwData=[...$scope.dataSource];\n                gwData[indx]=instance.gatewayform.value\n                $scope.modify(gwData);\n                \n                instance.close();\n            }\n            \n        }\n        \n        /////////////////////////////// gateway ENDPOINT\n        if(instance.data.data.title){\n            instance.gatewayendpoitform=instance.fb.group({\n                title: [instance.data.data.title],\n                ipAddress: [instance.data.data.ipAddress],\n                portNumber: [instance.data.data.portNumber],\n                unitId: [instance.data.data.unitId],\n                endpointFunctions: [instance.data.data.endpointFunctions]\n            })\n        }else{\n            instance.gatewayendpoitform=instance.fb.group({\n                title: [''],\n                ipAddress: [''],\n                portNumber: [''],\n                unitId: [''],\n                endpointFunctions: [''],\n                devices: [[]]\n            })\n        }\n        \n        instance.saveGatewayEndpoint=()=>{\n            if(instance.gatewayendpoitform.valid){\n                if(instance.isAdd){\n                    gatewayendpoitData=[...$scope.dataSource];\n                    gatewayendpoitData.push(instance.gatewayendpoitform.value);\n                    \n                    $scope.dataSource = [...$scope.dataSource, instance.gatewayendpoitform.value];\n                    self.ctx.detectChanges();\n                    \n                }else{\n                    gatewayendpoitData=[...$scope.dataSource];\n                    \n                    let idx = gatewayendpoitData.indexOf(instance.data.data);\n                    gatewayendpoitData[idx] = instance.gatewayendpoitform.value;\n                    \n                    $scope.dataSource = [...gatewayendpoitData]\n                    self.ctx.detectChanges();\n                }\n                $scope.globalGatewayData.forEach((ele,index)=>{\n                    if(ele.gwName===$scope.gatewayEndpointList.gwName){\n                        $scope.globalGatewayData[index].gwDevices = [...gatewayendpoitData]\n                    }\n                })\n                $scope.modify($scope.globalGatewayData);\n                \n                instance.close();\n            }\n            \n        }\n        instance.deleteGatewayEndpoint=()=>{\n            \n        }\n        \n        //////////////////////////////// gateway device\n        instance.devices = function(){\n            return instance.deviceform.get('devices');\n        }\n        instance.addDevices=()=>{\n            instance.deviceform.get('devices')?.push(newDevice());\n            instance.deviceform.get('devices')?.at(instance.deviceform.get('devices').length-1).get('dataPoints')?.push(newDataPoint());\n            instance.selectedIndex=instance.deviceform.get('devices').length-1;\n        }\n        instance.removeDevice=(index)=>{\n            instance.deviceform.get('devices').removeAt(index);\n        }\n          \n        instance.addDataPoints = (dpIndex)=> {\n            const dataPoint = instance.devices().at(dpIndex)?.get('dataPoints');\n            dataPoint.push(newDataPoint());\n        }\n        if(instance.data.data.deviceId){\n            instance.deviceform = instance.fb.group({\n                devices: instance.fb.array([])\n            })\n            dvcArray=instance.fb.array([]);\n            \n            // insert existing data\n            device = instance.data.data;\n            // instance.data.data.devices.forEach(device=>{\n            let dvcObj=instance.fb.group({\n                deviceId:[device.deviceId],\n                functions:[device.functions],\n                dataPoints: instance.fb.array([])\n            })\n            dataPointArray=instance.fb.array([]);\n            device.dataPoints.forEach(datapoint=>{\n                dataPointArray.push(instance.fb.group({\n                    dataKey: [datapoint.dataKey],\n                    fc: [datapoint.fc],\n                    address: [datapoint.address],\n                    dataType: [datapoint.dataType],\n                    dataFit: [datapoint.dataFit]\n                }));\n            });\n            dvcObj.setControl('dataPoints', dataPointArray)\n            dvcArray.push(dvcObj);\n            // })\n            instance.deviceform.setControl('devices', dvcArray);\n            instance.accordionToggle(instance.deviceform.value.devices.length-1)\n        }else{\n            instance.deviceform = instance.fb.group({\n                devices: instance.fb.array([])\n            })\n            instance.addDevices();\n            instance.accordionToggle(0)\n        }\n        \n        \n        \n        function newDevice(){\n            return instance.fb.group({\n              deviceId: [''],\n              dataPoints: instance.fb.array([]),\n              functions: ['return msg']\n            })\n          }\n        function newDataPoint(){\n            return instance.fb.group({\n              dataKey: [''],\n              fc: [''],\n              address: [''],\n              dataType: [''],\n              dataFit: ['']\n            })\n          }\n        \n        instance.deleteDataPoints = (deviceIndex, dpIndex)=> {\n            const dataPoint = instance.devices().at(deviceIndex)?.get('dataPoints');\n            dataPoint.removeAt(dpIndex);\n        }\n        instance.changeType = function() {\n            // if(event.value==='multi'){\n            \n            // }else{\n            \n            // }\n            \n            instance.devices().clear()\n            instance.addDevices()\n        }\n          \n        instance.saveDevice=()=>{\n            if(instance.deviceform.valid){\n                if(instance.isAdd){\n                    instance.deviceform.value.devices.forEach((ele,index)=>{\n                        $scope.dataSource.push(ele);\n                    })\n                    $scope.dataSource = [...$scope.dataSource];\n                    self.ctx.detectChanges();\n                    \n                    \n                }else{\n                    gatewaydeviceData=[...$scope.dataSource];\n                    \n                    instance.deviceform.value.devices.forEach((ele,index)=>{\n                        $scope.dataSource.push(ele);\n                    })\n                    \n                    let idx = gatewaydeviceData.indexOf(instance.data.data);\n                    gatewaydeviceData[idx] = instance.deviceform.value.devices[0];\n                    \n                    $scope.dataSource = [...gatewaydeviceData]\n                    self.ctx.detectChanges();\n                    \n                    \n                    // indx=$scope.globalGatewayData.indexOf($scope.gatewayObject);\n                    // gwObjIndex=$scope.gatewayObject.gwDevices.indexOf(instance.data.data);\n                    // $scope.globalGatewayData[indx].gwDevices[gwObjIndex]=instance.deviceform.value;\n                }\n                $scope.globalGatewayData.forEach((ele, index)=>{\n                    ele.gwDevices.forEach((device,idx)=>{\n                        if(device.title === self.ctx.gatewayDeviceList.title){\n                            $scope.globalGatewayData[index].gwDevices[idx].devices = [...$scope.dataSource]\n                        }\n                    })\n                })\n                $scope.modify($scope.globalGatewayData);\n                instance.close()\n            }\n              \n        }\n        \n        instance.close=()=>{\n            instance.dialogRef.close(null);\n        }\n    }\n    self.ctx.detectChanges()\n    self.onResize();    \n};\n\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n};\n\n\n\nself.onResize=function(){\n    $scope=self.ctx.$scope;\n    $scope.settings=self.ctx.settings;\n    $scope.height=self.ctx.isMobile?self.ctx.height/2:self.ctx.height-120;\n    $scope.formHeight=self.ctx.isMobile?self.ctx.height/2:self.ctx.height;\n     \n     \n    $('.tb-default mat-cell.checkboxcell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.widgetConfig.color);\n    $('.tb-default mat-header-cell.headercheckboxcell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.settings.tableHeaderTxtColor);\n    $('mat-paginator.report-form-paginator .mat-select-value-text').css('color', self.ctx.widgetConfig.color);\n    $('.tb-default mat-paginator.report-form-paginator .mat-select-arrow, .tb-default .satl-report-ff .mat-select-arrow, .tb-default .satl-report-ff button').css('color', self.ctx.widgetConfig.color);\n    $('.tb-default mat-paginator.report-form-paginator .mat-form-field-appearance-legacy .mat-form-field-underline').css('background-color', self.ctx.widgetConfig.color);\n    $('.tb-default .satl-report-ff .mat-form-field-appearance-outline .mat-form-field-outline').css('color',self.ctx.widgetConfig.color);\n    $('.tb-default #mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-outline').css('color',self.ctx.settings.tableHeaderTxtColor);\n    $(document).ready(function() {\n        $('mat-paginator.report-form-paginator .mat-select-value-text').css('color', self.ctx.widgetConfig.color);\n        $('mat-paginator.report-form-paginator .tb-default .mat-select-arrow').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default mat-form-field.satl-report-ff .mat-form-field-appearance-legacy .mat-form-field-underline').css('background-color', self.ctx.widgetConfig.color);\n        $('.mat-form-field-appearance-outline .mat-form-field-outline').css('color',self.ctx.widgetConfig.color);\n        $('.tb-default #mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-outline').css('color',self.ctx.settings.tableHeaderTxtColor);\n        $('.tb-default #mat-report-header-search-box .mat-input-element').css('caret-color',self.ctx.settings.tableHeaderTxtColor);\n        \n    });\n };\n\nself.onDestroy = function() {\n};\n",
        "settingsSchema": "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"required\": [\r\n            \"dbName\",\r\n            \"url\"\r\n        ],\r\n        \"properties\": {\r\n            \"dbName\":{\r\n                \"title\":\"indexedDB Name\",\r\n                \"type\":\"string\",\r\n                \"default\": \"modbusgwopc\"\r\n            },\r\n            \"url\":{\r\n                \"title\":\"API URL\",\r\n                \"type\":\"string\",\r\n                \"default\": \"http://150.150.50.241:3000/api\"\r\n            },\r\n            \"addBtnBgColor\":{\r\n                \"title\":\"Add Button Background Color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ff5722\"\r\n            },\r\n            \"addBtnTxtColor\":{\r\n                \"title\":\"Add Button Text Color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ffffff\"\r\n            },\r\n            \"deployBtnBgColor\":{\r\n                \"title\":\"Deploy Button Background Color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ff5722\"\r\n            },\r\n            \"deployBtnTxtColor\":{\r\n                \"title\":\"deploy Button Text Color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ffffff\"\r\n            },\r\n            \r\n            \"tableHeaderBgColor\":{\r\n                \"title\":\"Table header background color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#cccc00\"\r\n            },\r\n            \"tableHeaderTxtColor\":{\r\n                \"title\":\"Table header text color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ffffff\"\r\n            },\r\n            \"tableRowLineColor\":{\r\n                \"title\":\"Table row line color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#777\"\r\n            },\r\n            \"disabledPaginationColor\":{\r\n                \"title\":\"Disabled pagination color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ededed42\"\r\n            },\r\n            \"enabledPaginationColor\":{\r\n                \"title\":\"Enabled pagination color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#000000\"\r\n            }\r\n        }\r\n    },\r\n    \"form\": [\r\n        \"url\",\r\n        \"dbName\",\r\n        {\r\n            \"key\":\"addBtnBgColor\",\r\n            \"type\":\"color\"\r\n        },\r\n        {\r\n            \"key\":\"addBtnTxtColor\",\r\n            \"type\":\"color\"\r\n        },\r\n        {\r\n            \"key\":\"deployBtnBgColor\",\r\n            \"type\":\"color\"\r\n        },\r\n        {\r\n            \"key\":\"deployBtnTxtColor\",\r\n            \"type\":\"color\"\r\n        },\r\n        {\r\n            \"key\":\"tableHeaderBgColor\",\r\n            \"type\":\"color\"\r\n        },\r\n        {\r\n            \"key\":\"tableHeaderTxtColor\",\r\n            \"type\":\"color\"\r\n        },\r\n        {\r\n            \"key\": \"tableRowLineColor\",\r\n            \"type\": \"color\"\r\n        },\r\n        {\r\n            \"key\":\"disabledPaginationColor\",\r\n            \"type\":\"color\"\r\n        },\r\n        {\r\n            \"key\": \"enabledPaginationColor\",\r\n            \"type\": \"color\"\r\n        }\r\n    ]\r\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Modbus module 1\"}"
      }
    },
    {
      "alias": "modbus_energymeter",
      "name": "Energy Meter",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<!--This section is for gateway table-->\n<div class=\"col-md-8\" *ngIf=\"isGateway\">\n    <div class=\"header_section\">\n        <div class=\"header_left\">\n            <strong>\n                <span class=\"gateway_title\">Energy Meter Gateway</span>\n            </strong>\n            \n        </div>\n        <div class=\"header_right\">\n            <div class=\"search_bar\">\n                <input type=\"text\" placeholder=\"search here ...\" [(ngModel)]=\"gatewaySearchText\" (ngModelChange)=\"searchDataFromGatewayTable()\"/>\n                <mat-icon class=\"search_icon\">search</mat-icon>\n            </div>\n            <div class=\"add_new_GW_btn\">\n                <button mat-stroked-button [style.background-color]=\"settings?.addBtnBgColor\" color=\"primary\" (click)=\"openDialog()\">\n                    <span [style.color]=\"settings?.addBtnTxtColor\">+ ADD NEW GW</span>\n                </button>\n            </div>\n            <div class=\"deploy_btn\">\n                <button mat-stroked-button color=\"primary\" (click)=\"deploy()\" [style.background-color]=\"settings?.deployBtnBgColor\">\n                    <span [style.color]=\"settings?.deployBtnTxtColor\">DEPLOY</span> <mat-icon>play_arrow</mat-icon>\n                </button> \n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"dataSource\">\n        <div class=\"rf\" [style.height]=\"height+'px'\"\n            [style.overflow]=\"'auto'\">\n            <mat-table [dataSource]=\"dataSource\" class=\"satl-table\">\n                <div *ngFor=\"let col of displayedColumns\">\n                    <ng-container matColumnDef={{col}}>\n                        <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\" class=\"headercheckboxcell {{col}}\">\n                            <div id=\"mat-report-header-search-box\">\n                                <mat-checkbox \n                                    *ngIf=\"col==='checkbox'\"\n                                    (change)=\"allElementSelectChange($event)\"\n                                    [checked]=\"isAllSelected\"\n                                    [indeterminate]=\"selected_data.length>0 && selected_data.length!==dataSource.length\"\n                                    ></mat-checkbox>\n                                <span *ngIf=\"col!=='checkbox'\" \n                                    [ngClass]=\"col === 'actions' ? 'align_left': 'align_right'\"\n                                >{{col.toUpperCase()}}</span>\n                            </div>  \n                        </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\" [style.background-color]=\"bgColor\" [style.color]=\"color\" class=\"checkboxcell\"  [style.border-bottom-color]=\"settings?.tableRowLineColor\">\n                            <mat-checkbox \n                                *ngIf=\"col==='checkbox'\" \n                                class=\"example-margin\"  \n                                (change)=\"singleElementSelectChange($event, element)\"\n                                [checked]=\"selected_data.indexOf(element)!==-1\"\n                                >\n                                \n                            </mat-checkbox>\n                            <span *ngIf=\"col!=='checkbox'\">{{element[col]}}</span>\n                            <div *ngIf=\"col=='actions'\">\n                                <button \n                                    mat-icon-button \n                                    aria-label=\"Example icon button with a vertical three dot icon\"\n                                    (click)=\"openFunctionDialog(element)\"\n                                >\n                                    <mat-icon [style.color]=\"color\">functions</mat-icon>\n                                </button>\n                                <button \n                                    mat-icon-button \n                                    aria-label=\"Example icon button with a vertical three dot icon\"\n                                    (click)=\"forwardChangePage(element)\"\n                                >\n                                    <mat-icon [style.color]=\"color\">settings</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"openDialog(element)\">\n                                    <mat-icon [style.color]=\"color\">edit</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"deleteGateway(element)\">\n                                    <mat-icon [style.color]=\"color\">delete</mat-icon>\n                                </button>\n                            </div>\n                        </mat-cell>\n                    </ng-container>\n                </div>\n                <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\n                <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n            </mat-table>\n        </div>\n        <mat-paginator\n            [style.background-color]=\"bgColor\"\n            [style.color]=\"color\"\n            [length]=\"dataSource.length\"\n            [pageSize]=\"5\"\n            [pageSizeOptions]=[5,10]\n            aria-label=\"Select page\"\n            showFirstLastButtons=\"true\"\n            class=\"report-form-paginator\">\n        </mat-paginator>\n    </div>\n</div>\n\n\n<!--This section is for gateway endpoint table-->\n\n<div class=\"col-md-8\" *ngIf=\"isGatewayEndpoint\">\n    <div class=\"header_section\">\n        <div class=\"header_left\" (click)=\"backwardChangePage()\">\n            <mat-icon>keyboard_arrow_left</mat-icon>\n            <strong>\n                <span class=\"gateway_title\">Gateway Endpoint</span>\n            </strong>\n        </div>\n        <div class=\"header_right\">\n            <div class=\"search_bar\">\n                <input type=\"text\" placeholder=\"search here ...\" [(ngModel)]=\"gatewayEndpointSearchText\" (ngModelChange)=\"searchDataFromGatewayEndpointTable()\"/>\n                <mat-icon class=\"search_icon\">search</mat-icon>\n            </div>\n            <div class=\"add_new_btn\">\n                <button mat-stroked-button [style.background-color]=\"settings?.addBtnBgColor\" color=\"primary\" (click)=\"openDialog()\">\n                    <span [style.color]=\"settings?.addBtnTxtColor\">+ ADD NEW GW</span>\n                </button>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"dataSource\">\n        <div class=\"rf\" [style.height]=\"height+'px'\"\n            [style.overflow]=\"'auto'\">\n            <mat-table [dataSource]=\"dataSource\" class=\"satl-table\">\n                <div *ngFor=\"let col of displayedColumns\">\n                    <ng-container matColumnDef={{col}}>\n                        <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\" class=\"headercheckboxcell {{col}}\">\n                            <div id=\"mat-report-header-search-box\">\n                                <mat-checkbox \n                                    *ngIf=\"col==='checkbox'\"\n                                    (change)=\"allElementSelectChange($event)\"\n                                    [checked]=\"isAllSelected\"\n                                    [indeterminate]=\"selected_data.length>0 && selected_data.length!==dataSource.length\"\n                                    ></mat-checkbox>\n                                <span *ngIf=\"col!=='checkbox'\" \n                                    [ngClass]=\"col === 'actions' ? 'align_left': 'align_right'\"\n                                >{{col.toUpperCase()}}</span>\n                            </div>  \n                        </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\" [style.background-color]=\"bgColor\" [style.color]=\"color\" class=\"checkboxcell\"  [style.border-bottom-color]=\"settings?.tableRowLineColor\">\n                            <mat-checkbox \n                                *ngIf=\"col==='checkbox'\" \n                                class=\"example-margin\"  \n                                (change)=\"singleElementSelectChange($event, element)\"\n                                [checked]=\"selected_data.indexOf(element)!==-1\"\n                                >\n                                \n                            </mat-checkbox>\n                            <span *ngIf=\"col!=='checkbox'\">{{element[col]}}</span>\n                            <div *ngIf=\"col=='actions'\">\n                                <button mat-icon-button (click)=\"openDialog(element)\">\n                                    <mat-icon [style.color]=\"color\">edit</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"deleteGatewayEndpoint(element)\">\n                                    <mat-icon [style.color]=\"color\">delete</mat-icon>\n                                </button>\n                            </div>\n                        </mat-cell>\n                    </ng-container>\n                </div>\n                <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\n                <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n            </mat-table>\n        </div>\n        <mat-paginator\n            [style.background-color]=\"bgColor\"\n            [style.color]=\"color\"\n            [length]=\"dataSource.length\"\n            [pageSize]=\"5\"\n            [pageSizeOptions]=[5,10]\n            aria-label=\"Select page\"\n            showFirstLastButtons=\"true\"\n            class=\"report-form-paginator\">\n        </mat-paginator>\n    </div>\n</div>",
        "templateCss": "/*////////////////////////////////*/\n.header_section{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 70px;\n}\n.header_left{\n    display: flex;\n    align-items: center;\n    \n}\n.gateway_title{\n    font-size: 25px;\n    margin-left: 10px;\n}\n.header_right{\n    margin-bottom: 5px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    gap: 5px;\n}\n.search_bar{\n    position: relative;\n}\n.search_bar input{\n    padding-top: 7px;\n    padding-bottom: 7px;\n    padding-left: 7px;\n    padding-right: 30px;\n    border-radius: 4px;\n    border: 1px solid gray;\n}\n.search_icon{\n    position: absolute;\n    top: 6px;\n    right: 5px;\n}\n.add_new_GW_btn button{\n    background-color: #CC0000;\n    color: white;\n    padding: 0 20px;\n}\n.add_new_GW_btn span{\n    color: white;\n}\n.deploy_btn button{\n    background-color: #CC0000;\n    color: white;\n    padding: 0 20px;\n}\n.deploy_btn span{\n    color: white;\n}\n.add_new_btn button{\n    background-color: #CC0000;\n    padding: 0 20px;\n}\n.add_new_btn span{\n    color: white;\n}\n.mat-spinner{\n    position: absolute;\n    top: 45%;\n    left: 45%;\n    /*margin: 48% auto;*/\n    /*width: 100%;;*/\n    /*height: 100%;*/\n    /*display: flex;*/\n    /*justify-content: center;*/\n    /*align-items: center;*/\n}\n\nmat-header-cell{\n    width: 23%;\n    text-align: center;\n}\nmat-header-cell:first-child{\n    width: 10%;\n    text-align: left;\n}\nmat-header-cell:last-child{\n    width: 23%;\n    text-align: right;\n}\nmat-header-cell:last-child span{\n    padding-right: 15px;\n}\n\nmat-cell{\n    text-align: center;\n}\nmat-cell:first-child{\n    text-align: left;\n}\nmat-cell:last-child{\n    text-align: right;\n}\n.mat-form-field-appearance-outline .mat-form-field-infix {\n  border: none!important;   \n}\nmat-form-field{\n    /*width: 100%;*/\n}\n/*end popup style*/\n#mat-report-header-search-box .mat-form-field-wrapper{\n    padding: 0;\n}\n.mat-input-element::placeholder{\n    color: inherit;\n}\n#mat-report-header-search-box .mat-form-field-infix {\n    border-top: 4px solid transparent;\n}\n#mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-prefix, #mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-suffix {\n    top: 5px;\n}\n#mat-report-header-search-box mat-form-field{\n    width: 300px;\n}",
        "controllerScript": "self.onInit = function() {\n    $(document).ready(function(){\n      self.onResize();\n    });\n    $scope = self.ctx.$scope;\n    $scope.color=self.ctx.widgetConfig.color;\n    \n    \n    data=[\n        {\n            \"gwName\": \"FLOW_METERS_GW\",\n            \"user\": \"intrauser\",\n            \"password\": \"intrauser\",\n            \"host\": \"mosquitto\",\n            \"port\": \"1883\",\n            \"dataFetchInterval\": 3,\n            \"tsTopic\": \"v1/gateway/telemetry\",\n            \"tsDataPushInterval\": 60,\n            \"attrTopic\": \"v1/gateway/attributes\",\n            \"rpcPubTopic\": \"v1/gateway/rpc\",\n            \"rpcSubTopic\": \"v1/gateway/rpc/sub\",\n            \"formaterFunc\": \"if(msg.comError){\\n  msg.attr[msg.device] = {\\n    comError: true\\n  }\\n}\\n\\n\\nreturn msg\",\n            \"tsFormaterFunc\": \"let vl = {\\n    ts_backwashFlowRate_m3h: msg.data.backwashFlowRate_m3h,\\n    ts_backwashFlowTotal_m3: msg.data.backwashFlowTotal_m3,\\n    tsd_backwashFlowTotal_m3: msg.data.backwashFlowTotal_m3 - msg.pa_data.backwashFlowTotal_m3,\\n    ts_bedLevelFilter1_ft: msg.data.bedLevelFilter1_ft,\\n    ts_bedLevelFilter2_ft: msg.data.bedLevelFilter2_ft,\\n    ts_bedLevelFilter3_ft: msg.data.bedLevelFilter3_ft,\\n    ts_bedLevelFilter4_ft: msg.data.bedLevelFilter4_ft,\\n    ts_deliveryFlowRate_m3h: msg.data.deliveryFlowRate_m3h,\\n    ts_deliveryFlowTotal_m3: msg.data.deliveryFlowTotal_m3,\\n    tsd_deliveryFlowTotal_m3: msg.data.deliveryFlowTotal_m3 - msg.pa_data.deliveryFlowTotal_m3,\\n    ts_emCurrent: msg.data.emCurrent,\\n    ts_emEnergy: msg.data.emEnergy,\\n    tsd_emEnergy: msg.data.emEnergy - msg.pa_data.emEnergy,\\n    ts_emHz: msg.data.emHz,\\n    ts_emPf: msg.data.emPf,\\n    ts_emPower: msg.data.emPower,\\n    ts_emVoltage: msg.data.emVoltage,\\n    ts_overheadTankInFlowRate_m3h: msg.data.overheadTankInFlowRate_m3h,\\n    ts_overheadTankInFlowTotal_m3: msg.data.overheadTankInFlowTotal_m3,\\n    tsd_overheadTankInFlowTotal_m3: msg.data.overheadTankInFlowTotal_m3 - msg.pa_data.overheadTankInFlowTotal_m3,\\n    ts_overheadTankLevel_pcnt: msg.data.overheadTankLevel_pcnt,\\n    ts_runTimePump1_s: msg.data.runTimePump1_s,\\n    tsd_runTimePump1_s: msg.data.runTimePump1_s - msg.pa_data.runTimePump1_s,\\n    ts_runTimePump2_s: msg.data.runTimePump2_s,\\n    tsd_runTimePump2_s: msg.data.runTimePump2_s - msg.pa_data.runTimePump2_s,\\n    ts_runTimePump3_s: msg.data.runTimePump3_s,\\n    tsd_runTimePump3_s: msg.data.runTimePump3_s - msg.pa_data.runTimePump3_s,\\n    ts_dosingChlorinator1: msg.data.dosingChlorinator1,\\n    ts_dosingChlorinator2: msg.data.dosingChlorinator2\\n}\\n\\n\\nfunction fv(value, dp=0){\\n    if(typeof value == 'number'){\\n        return Number(parseFloat(value).toFixed(dp));\\n    }\\n    return value\\n}\\n\\n\\nfor(let key in vl){\\n    vl[key] = fv(vl[key], 3)\\n}\\n\\nif (!msg.comError) {\\n    msg.ts[msg.device] = [\\n        {\\n            ts: new Date().getTime(),\\n            values: {\\n                ...vl,\\n                ts_commError: false\\n            }\\n        }\\n    ]\\n} else {\\n    msg.ts[msg.device] = [\\n        {\\n            ts: new Date().getTime(),\\n            values: {\\n                ts_commError: true\\n            }\\n        }\\n    ]\\n}\\n\\n\\nreturn msg\",\n            \"gwDevices\":[\n                {\n                    \"title\":\"Device 1\",\n                    \"ipAddress\":\"127.0.0.1\",\n                    \"portNumber\":\"8899\",\n                    \"unitId\":\"asd\",\n                    \"brand\": \"usr\",\n                    \"model\": \"G800 v2\",\n                }\n            ]\n        }\n    ];\n    \n    // global variables\n    $scope.gatewayObject;\n    let modbusData=[];\n    $scope.globalGatewayData = [];\n    $scope.functions = false;\n    \n    \n    $scope.isGatewaySearchFieldShow = false;\n    $scope.isDeviceSearchFieldShow = false;\n    \n    $scope.isGateway = true;\n    $scope.isGatewayEndpoint = false;\n    \n    self.ctx.gatewayList = [];\n    $scope.gatewayEndpointList = [];\n    \n    $scope.settings=self.ctx.settings;\n    let GATEWAY_ELEMENT_DATA = data;\n    $scope.gatewaySearchText = '';\n    $scope.gatewayEndpointSearchText = '';\n    \n    $scope.selected_data = [];\n    $scope.isAllSelected = false;\n    $scope.isDeterminate = false;\n    $scope.isEmptySelectedData = true;\n    \n    $scope.displayedColumns = ['checkbox','gwName', 'host', 'port','devices', 'actions'];\n    \n    \n    \n    window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n    window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;\n    window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange\n    \n    if (!window.indexedDB) {\n        window.alert(\"Your browser doesn't support a stable version of IndexedDB.\")\n    }\n    \n    var db;\n    let conn = window.indexedDB.open(\"modbusgw\", 1);\n    \n    conn.onsuccess = function (event) {\n        db = conn.result;\n        clearData();\n        writeData(data);\n        $scope.readAll();\n        \n    };\n    \n    function clearData() {\n        const transaction = db.transaction([\"modbus\"], \"readwrite\");\n        transaction.oncomplete = (event) => {};\n        transaction.onerror = (event) => {};\n        const objectStore = transaction.objectStore(\"modbus\");\n        const objectStoreRequest = objectStore.clear();\n        objectStoreRequest.onsuccess = (event) => {\n        };\n    };\n    conn.onupgradeneeded = function (event, data) {\n        var db = event.target.result;\n        var objectStore = db.createObjectStore(\"modbus\", {keyPath: \"gw\"});\n    \n        objectStore.add({gw: 'gateway', value: data});\n    }\n    function writeData(data){\n        let transaction = db.transaction([\"modbus\"], \"readwrite\")\n            .objectStore(\"modbus\");\n        transaction.add({gw: 'gateway', value: data});\n    }\n    conn.onerror = function (event) {\n        // console.log(\"error: \");\n    };\n    \n    $scope.readAll=()=>{\n        modbusDt = [];\n        let objectStore = db.transaction(\"modbus\").objectStore(\"modbus\");\n        objectStore.openCursor().onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                modbusDt=cursor.value.value;\n                cursor.continue();\n            } else {\n                console.log('------', modbusDt);\n                modbusDt.forEach(gwt=>{\n                    gwt['devices']=gwt.gwDevices.length;\n                });\n                \n                self.ctx.gatewayList = [...modbusDt];\n                if($scope.isGateway){\n                    $scope.dataSource = self.ctx.gatewayList;\n                }\n                \n                $scope.globalGatewayData=[...modbusDt];\n                self.ctx.detectChanges();\n            }\n        };\n    }\n    \n    $scope.modify=(cData, type='gateway')=>{\n        var objectStore = db.transaction([\"modbus\"], \"readwrite\")\n            .objectStore(\"modbus\");\n        objectStore.openCursor().onsuccess = (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n                const updateData = cursor.value;\n                updateData.value=cData;\n                cursor.update(updateData);\n                cursor.continue();\n            }else{\n                $scope.readAll();\n            }\n        }\n    }\n    \n    $scope.remove=(id)=>{\n        if (confirm('Do you really want to delete?')){\n            const request = db.transaction('modbus', 'readwrite').objectStore('modbus');\n            request.delete(id.toString());\n            request.onsuccess = () => {\n            }\n    \n            request.onerror = (err) => {\n            }\n            $scope.readAll();\n        }\n    }\n    \n    $scope.deploy=()=>{\n        // let postReq=self.ctx.http.post(self.ctx.settings.url+'/opc/ocs', $scope.globalGatewayData, {headers: {Authorization: 'Bearer '+token}});\n        // postReq.subscribe(res=>{\n        //     if(res.msg=='success'){\n        //         let haltReq=self.ctx.http.get(self.ctx.settings.url+'/opc/halt', {headers: {Authorization: 'Bearer '+token}});\n        //         haltReq.subscribe(res2=>{\n        //             self.ctx.showToast('success', 'Successfully deployed!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n        //         }, error2=>{\n        //             self.ctx.showToast('warn', 'Deployed Successfully without halting!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n        //         })\n        //     }else{\n        //         customDialog.customDialog(deploymentErrorTemplate,\n        //             InfoDialogController, {data:res}).subscribe(\n        //             function(res3) {\n        //                 if (res3) {}\n        //             }\n        //         );\n        //     }\n        // }, error=>{\n        //     self.ctx.showToast('error', 'Deployment failed!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n        // });\n        console.log('deploy triggered!', $scope.globalGatewayData);\n    }\n    \n    \n    \n    \n    // dialog essentials\n    let $injector = self.ctx.$scope.$injector;\n    let customDialog = $injector.get(self.ctx.servicesMap.get('customDialog'));\n    \n    $scope.searchDataFromGatewayTable = function(){\n        $scope.dataSource = $scope.globalGatewayData;\n        if($scope.gatewaySearchText!=''){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                if(ele.gwName.toLowerCase().search($scope.gatewaySearchText.toLowerCase())!=-1){\n                    return ele;\n                }\n            })\n        }\n        self.ctx.detectChanges()\n    }\n    $scope.searchDataFromGatewayEndpointTable = function(){\n        $scope.dataSource = $scope.gatewayEndpointList.gwDevices;\n        if($scope.gatewayEndpointSearchText!=''){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                if(ele.title.toLowerCase().search($scope.gatewayEndpointSearchText.toLowerCase())!=-1){\n                    return ele;\n                }\n            })\n        }\n        self.ctx.detectChanges()\n    }\n    \n    $scope.forwardChangePage = function(element){\n        \n        if($scope.isGateway){\n            $scope.isGateway = false;\n            $scope.isGatewayEndpoint = true;\n            \n            $scope.gatewayEndpointList = element;\n            $scope.dataSource = $scope.gatewayEndpointList.gwDevices;\n            $scope.displayedColumns = ['checkbox','title', 'ipAddress', 'portNumber', 'brand', 'model','actions'];\n        }else if($scope.isGatewayEndpoint){\n            $scope.isGatewayEndpoint = false;\n            \n            self.ctx.gatewayDeviceList = element;\n            $scope.dataSource = self.ctx.gatewayDeviceList.devices;\n            $scope.displayedColumns = ['checkbox','deviceId','actions'];\n        }\n    }\n    $scope.backwardChangePage = function(element){\n        \n        if($scope.isGateway){\n            // $scope.isGateway = false;\n            // $scope.isGatewayDevice = true;\n        }else if($scope.isGatewayEndpoint){\n            $scope.isGateway = true;\n            \n            \n            $scope.dataSource = self.ctx.gatewayList;\n            console.log($scope.dataSource);\n            $scope.displayedColumns = ['checkbox','gwName', 'host', 'port','devices', 'actions'];\n        }\n    }\n    \n    $scope.changeSearchFieldShowState = function() {\n        if($scope.isGateway){\n            $scope.isGatewaySearchFieldShow = !$scope.isGatewaySearchFieldShow;\n            $scope.gatewaySearchText = '';\n            $scope.dataSource = $scope.globalGatewayData;\n        }else{\n            $scope.isDeviceSearchFieldShow = !$scope.isDeviceSearchFieldShow;\n            $scope.deviceSearchText = '';\n            $scope.dataSource = DEVICE_ELEMENT_DATA;\n        }\n        \n        self.ctx.detectChanges();\n    }\n    \n    $scope.singleElementSelectChange = function(event, element){\n        isChecked = event.checked;\n        if(isChecked){\n            $scope.selected_data.push(element)\n        }else{\n            $scope.selected_data = $scope.selected_data.filter(ele=>ele.gwName!=element.gwName)\n        }\n        ////////////////////////////\n        if($scope.selected_data.length!==$scope.dataSource.length){\n            $scope.isAllSelected = false\n        }else if($scope.selected_data.length===$scope.dataSource.length){\n            $scope.isAllSelected = true\n        }\n        if($scope.selected_data.length===0){\n            $scope.isAllSelected = false\n        }\n    }\n    $scope.allElementSelectChange = function(event){\n        isChecked = event.checked;\n        if(isChecked){\n            $scope.isAllSelected = true\n            $scope.isAllElementSelected = true\n            $scope.selected_data = $scope.dataSource;\n        }else{\n            $scope.isAllSelected = false\n            $scope.isAllElementSelected = false\n            $scope.selected_data = []\n        }\n        self.ctx.detectChanges();\n    }\n    \n    $scope.deleteGateway = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element;\n            })\n            console.log($scope.globalGatewayData);\n            $scope.globalGatewayData = $scope.globalGatewayData.filter((ele, index)=>{\n                return ele.gwName!=element.gwName;\n            })\n            $scope.modify($scope.globalGatewayData);\n            \n            self.ctx.detectChanges()\n        }\n    }\n    $scope.deleteGatewayEndpoint = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element\n            })\n            \n            $scope.globalGatewayData.forEach((ele,index)=>{\n                if(ele.gwName===$scope.gatewayEndpointList.gwName){\n                    $scope.globalGatewayData[index].gwDevices = [...$scope.dataSource]\n                }\n            })\n            $scope.modify($scope.globalGatewayData)\n        }\n    }\n    \n    \n    $scope.openFunctionDialog = function(element){\n        $scope.functions = true;\n        $scope.openDialog(element);\n    } \n    \n    \n    \n    \n    $scope.openDialog=function(dt={}){\n        if($scope.isGateway && !$scope.functions){\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"gatewayform\"\n                    [formGroup]=\"gatewayform\" \n                    (submit)=\"saveGateway($event,dt)\"\n                    style=\"padding: '0px'\"\n                >\n                    <div aria-label=\"Info\" style=\"min-width: 500px;\">\n                        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                            <span fxFlex>\n                                <div style=\"display:flex;justify-content:space-between;\">\n                                    <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                        {{isAdd?'ADD':'UPDATE'}} GATEWAY\n                                    </div>\n                                </div>\n                            </span>\n                            <button mat-icon-button><mat-icon>save</mat-icon></button>\n                            <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                        </mat-toolbar>\n                        <div mat-dialog-content>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Gateway Name</mat-label>\n                                <input required formControlName=\"gwName\" matInput placeholder=\"Gateway Name\">\n                            </mat-form-field>\n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>UserName</mat-label>\n                                <input formControlName=\"user\" matInput placeholder=\"UserName\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Password</mat-label>\n                                    <input formControlName=\"password\" matInput placeholder=\"Password\">\n                                </mat-form-field>\n                            </div>\n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>Host</mat-label>\n                                <input required formControlName=\"host\" matInput placeholder=\"Host\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Port</mat-label>\n                                    <input required formControlName=\"port\" matInput placeholder=\"Port\">\n                                </mat-form-field>\n                            </div>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Data fetch interval</mat-label>\n                                <input type=\"number\" required formControlName=\"dataFetchInterval\" matInput placeholder=\"Data fetch interval\">\n                            </mat-form-field>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Attribute Topic</mat-label>\n                                <input required formControlName=\"attrTopic\" matInput placeholder=\"Attribute Topic\">\n                            </mat-form-field>\n                            \n                            \n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Timeseries Topic</mat-label>\n                                <input required formControlName=\"tsTopic\" matInput placeholder=\"Timeseries Topic\">\n                            </mat-form-field>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Timeseries Data Push Interval (seconds)</mat-label>\n                                <input type=\"number\" required formControlName=\"tsDataPushInterval\" matInput placeholder=\"Timeseries Data Push Interval (seconds)\">\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </form>`;\n        }else if($scope.isGateway && $scope.functions){\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"gatewayform\"\n                    [formGroup]=\"gatewayform\"\n                    (submit)=\"saveGatewayFunc($event,dt)\"\n                    style=\"padding: '0px'\"\n                >\n                    <div aria-label=\"Info\" style=\"min-width: 700px;\">\n                        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                            <span fxFlex>\n                                <div style=\"display:flex;justify-content:space-between;\">\n                                    <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                        GATEWAY FUNCTIONS\n                                    </div>\n                                </div>\n                            </span>\n                            <button mat-icon-button><mat-icon>save</mat-icon></button>\n                            <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                        </mat-toolbar>\n                        <div mat-dialog-content style=\"display:'flex';flex-direction:'column';gap:'5px'\">\n                            <mat-tab-group>\n                                <mat-tab label=\"Formater Function\">\n                                    <mat-form-field \n                                        appearance=\"outline\" \n                                        style=\"width:'100%';font-family: 'Courier';background-color: 'black';color: 'white';border-radius: '6px'\"\n                                    >\n                                        <mat-label style=\"color:'white'\">Formater Function (msg.attr, msg.ts)</mat-label>\n                                        <textarea rows=\"18\" matInput placeholder=\"Formater Function (msg.attr, msg.ts)\" formControlName=\"formaterFunc\" style=\"outline:'none'\"></textarea>\n                                    </mat-form-field>\n                                </mat-tab>\n                                <mat-tab label=\"Ts Formater Function\">\n                                    <mat-form-field \n                                        appearance=\"outline\" \n                                        style=\"width:'100%';font-family: 'Courier';background-color: 'black';color: 'white';border-radius: '6px'\"\n                                    >\n                                        <mat-label style=\"color:'white'\">TS Formater Function (msg.attr, msg.ts)</mat-label>\n                                        <textarea rows=\"18\" matInput placeholder=\"Ts Formater Function (msg.attr, msg.ts)\" formControlName=\"tsFormaterFunc\" style=\"outline:'none'\"></textarea>\n                                    </mat-form-field>\n                                </mat-tab>\n                            </mat-tab-group>\n                            \n                        </div>\n                    </div>\n                </form>`;\n        }else if($scope.isGatewayEndpoint){\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"gatewayendpoitform\"\n                    [formGroup]=\"gatewayendpoitform\" \n                    (submit)=\"saveGatewayEndpoint($event,dt)\"\n                    style=\"padding: '0px'\"\n                >\n                    <div aria-label=\"Info\" style=\"min-width: 700px;\">\n                        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                            <span fxFlex>\n                                <div style=\"display:flex;justify-content:space-between;\">\n                                    <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                        {{isAdd?'ADD':'UPDATE'}} GATEWAY ENDPOINT\n                                    </div>\n                                </div>\n                            </span>\n                            <button mat-icon-button><mat-icon>save</mat-icon></button>\n                            <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                        </mat-toolbar>\n                        <div mat-dialog-content>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Title</mat-label>\n                                <input required formControlName=\"title\" matInput placeholder=\"Title\">\n                            </mat-form-field>\n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>Ip Address</mat-label>\n                                <input required formControlName=\"ipAddress\" matInput placeholder=\"Ip Address\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Port Number</mat-label>\n                                    <input required formControlName=\"portNumber\" matInput placeholder=\"Port Number\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Unit Id</mat-label>\n                                    <input required formControlName=\"unitId\" matInput placeholder=\"Unit Id\">\n                                </mat-form-field>\n                            </div>\n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field appearance=\"outline\" style=\"width:'100%'\" >\n                                    <mat-label>Brand</mat-label>\n                                    <mat-select required placeholder=\"Brand\" formControlName=\"brand\" (selectionChange)=\"changeBrandType($event.value)\">\n                                        <mat-option *ngFor='let energymeter of energymeters' [value]=\"energymeter?.brand\">{{energymeter?.brand.toUpperCase()}}</mat-option>\n                                    </mat-select>\n                                </mat-form-field>\n                                <mat-form-field appearance=\"outline\" style=\"width:'100%'\" >\n                                    <mat-label>Model</mat-label>\n                                    <mat-select required placeholder=\"Model\" formControlName=\"model\">\n                                        <mat-option *ngFor='let model of models' [value]=\"model\">{{model.toUpperCase()}}\n                                        </mat-option>\n                                    </mat-select>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </div>\n                </form>`;\n        }\n        \n        customDialog.customDialog(template,\n            InfoDialogController, {data:dt}).subscribe(\n            function(res) {\n                if (res) {}\n            }\n        );\n        $scope.functions = false;\n    }\n\n    function InfoDialogController(instance) {\n        console.log('instance',instance.data.data);\n        instance.energymeters = JSON.parse(self.ctx.settings.energymeters);\n        \n        instance.accordionItem={expanded:false};\n        instance.accordionToggle=(index)=>{\n            instance.accordionItem.expanded=instance.selectedIndex==index?!instance.accordionItem.expanded:true;\n            instance.selectedIndex=instance.accordionItem.expanded?index:-1;\n        }\n        if($scope.isGateway){\n            instance.isAdd=instance.data.data.gwName==undefined;\n            \n        }else if($scope.isGatewayEndpoint){\n            instance.isAdd=instance.data.data.title==undefined;\n        }else{\n            instance.isAdd=instance.data.data.deviceId==undefined;\n        }\n        \n        \n        instance.gatewayform=instance.fb.group({\n            gwName: [instance.data.data.gwName?instance.data.data.gwName:''],\n            user: [instance.data.data.user?instance.data.data.user:''],\n            password: [instance.data.data.password?instance.data.data.password:''],\n            host: [instance.data.data.host?instance.data.data.host:''],\n            port: [instance.data.data.port?instance.data.data.port:''],\n            dataFetchInterval: [instance.data.data.dataFetchInterval?instance.data.data.dataFetchInterval:''],\n            tsTopic: [instance.data.data.tsTopic?instance.data.data.tsTopic:''],\n            tsDataPushInterval: [instance.data.data.tsDataPushInterval?instance.data.data.tsDataPushInterval:300],\n            attrTopic: [instance.data.data.attrTopic?instance.data.data.attrTopic:''],\n            formaterFunc: [instance.data.data?.formaterFunc?instance.data.data.formaterFunc:'return msg'],\n            tsFormaterFunc: [instance.data.data?.tsFormaterFunc?instance.data.data.tsFormaterFunc:'return msg'],\n            gwDevices: [instance.data.data?.gwDevices?.length?instance.data.data.gwDevices:[]]\n        })\n        \n        instance.saveGateway=()=>{\n            console.log(instance.gatewayform.valid);\n            if(instance.gatewayform.valid){\n                if(instance.isAdd){\n                    gwData=[...$scope.dataSource];\n                    gwData.push(instance.gatewayform.value);\n                    $scope.modify(gwData);\n                }else{\n                    indx=$scope.dataSource.indexOf(instance.data.data);\n                    let gwData=[...$scope.dataSource];\n                    gwData[indx]=instance.gatewayform.value;\n                    $scope.modify(gwData);\n                }\n                // $scope.modify(gwData);\n                instance.close();\n            }\n        }\n        instance.saveGatewayFunc=()=>{\n            if(instance.gatewayform.valid){\n                indx=$scope.dataSource.indexOf(instance.data.data);\n                let gwData=[...$scope.dataSource];\n                gwData[indx]=instance.gatewayform.value\n                $scope.modify(gwData);\n                \n                instance.close();\n            }\n            \n        }\n        \n        /////////////////////////////// gateway ENDPOINT\n        instance.gatewayendpoitform=instance.fb.group({\n            title: [instance.data.data.title?instance.data.data.title:''],\n            ipAddress: [instance.data.data.ipAddress?instance.data.data.ipAddress:''],\n            portNumber: [instance.data.data.portNumber?instance.data.data.portNumber:''],\n            unitId: [instance.data.data.unitId?instance.data.data.unitId:''],\n            brand: [instance.data.data.brand?instance.data.data.brand:''],\n            model: [instance.data.data.model?instance.data.data.model:''],\n            endpointFunctions: [instance.data.data.endpointFunctions?instance.data.data.endpointFunctions:'']\n        })\n        \n        instance.changeBrandType = function(brand) {\n            instance.models = instance.energymeters.filter(ele=>ele.brand==brand)[0].models;\n            console.log(instance.models);\n            \n        }\n        if(instance.data.data.brand) instance.changeBrandType(instance.data.data.brand);\n        instance.saveGatewayEndpoint=()=>{\n            console.log(instance.gatewayendpoitform.valid);\n            if(instance.gatewayendpoitform.valid){\n                if(instance.isAdd){\n                    gatewayendpoitData=[...$scope.dataSource];\n                    gatewayendpoitData.push(instance.gatewayendpoitform.value);\n                    \n                    $scope.dataSource = [...$scope.dataSource, instance.gatewayendpoitform.value];\n                    self.ctx.detectChanges();\n                    \n                }else{\n                    gatewayendpoitData=[...$scope.dataSource];\n                    \n                    let idx = gatewayendpoitData.indexOf(instance.data.data);\n                    gatewayendpoitData[idx] = instance.gatewayendpoitform.value;\n                    \n                    $scope.dataSource = [...gatewayendpoitData]\n                    self.ctx.detectChanges();\n                }\n                $scope.globalGatewayData.forEach((ele,index)=>{\n                    if(ele.gwName===$scope.gatewayEndpointList.gwName){\n                        $scope.globalGatewayData[index].gwDevices = [...gatewayendpoitData]\n                    }\n                })\n                $scope.modify($scope.globalGatewayData);\n                \n                instance.close();\n            }\n            \n        }\n        instance.deleteGatewayEndpoint=()=>{\n            \n        }\n        \n        instance.close=()=>{\n            instance.dialogRef.close(null);\n        }\n    }\n    self.ctx.detectChanges()\n    self.onResize();    \n};\n\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n};\n\n\n\nself.onResize=function(){\n    $scope=self.ctx.$scope;\n    $scope.settings=self.ctx.settings;\n    $scope.height=self.ctx.isMobile?self.ctx.height/2:self.ctx.height-120;\n    $scope.formHeight=self.ctx.isMobile?self.ctx.height/2:self.ctx.height;\n    function dsts(){\n        $('mat-paginator.report-form-paginator .mat-select-value-text').css('color', self.ctx.widgetConfig.color);\n        $('mat-paginator.report-form-paginator .mat-select-arrow').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default .report-form-paginator .mat-select-value').css('color',self.ctx.widgetConfig.color+'!important');\n        $('.tb-default .report-form-paginator .mat-form-field-appearance-legacy .mat-form-field-underline').css({'background-color': self.ctx.widgetConfig.color});\n        $('.tb-default .mat-icon-button.mat-button-disabled.mat-button-disabled').css('color', self.ctx.settings.disabledPaginationColor);\n        $('.tb-default .mat-icon-button.mat-button-enabled.mat-button-enabled').css('color', self.ctx.settings.enabledPaginationColor);\n    }\n    dsts();\n    $(document).ready(function() {\n        dsts();\n    });\n };\n\nself.onDestroy = function() {\n};\n",
        "settingsSchema": "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"required\": [\r\n            \"dbName\",\r\n            \"url\"\r\n        ],\r\n        \"properties\": {\r\n            \"dbName\":{\r\n                \"title\":\"indexedDB Name\",\r\n                \"type\":\"string\",\r\n                \"default\": \"modbusgwopc\"\r\n            },\r\n            \"url\":{\r\n                \"title\":\"API URL\",\r\n                \"type\":\"string\",\r\n                \"default\": \"http://150.150.50.241:3000/api\"\r\n            },\r\n            \"addBtnBgColor\":{\r\n                \"title\":\"Add Button Background Color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ff5722\"\r\n            },\r\n            \"addBtnTxtColor\":{\r\n                \"title\":\"Add Button Text Color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ffffff\"\r\n            },\r\n            \"deployBtnBgColor\":{\r\n                \"title\":\"Deploy Button Background Color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ff5722\"\r\n            },\r\n            \"deployBtnTxtColor\":{\r\n                \"title\":\"deploy Button Text Color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ffffff\"\r\n            },\r\n            \r\n            \"tableHeaderBgColor\":{\r\n                \"title\":\"Table header background color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#cccc00\"\r\n            },\r\n            \"tableHeaderTxtColor\":{\r\n                \"title\":\"Table header text color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ffffff\"\r\n            },\r\n            \"tableRowLineColor\":{\r\n                \"title\":\"Table row line color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#777\"\r\n            },\r\n            \"disabledPaginationColor\":{\r\n                \"title\":\"Disabled pagination color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#ededed42\"\r\n            },\r\n            \"enabledPaginationColor\":{\r\n                \"title\":\"Enabled pagination color\",\r\n                \"type\":\"string\",\r\n                \"default\": \"#000000\"\r\n            },\r\n            \"energymeters\":{\r\n                \"title\":\"Energy Meter Brand & Models\",\r\n                \"type\":\"string\",\r\n                \"default\": []\r\n            }\r\n        }\r\n    },\r\n    \"form\": [\r\n        \"url\",\r\n        \"dbName\",\r\n    {\r\n        \"key\":\"addBtnBgColor\",\r\n        \"type\":\"color\"\r\n    },\r\n    {\r\n        \"key\":\"addBtnTxtColor\",\r\n        \"type\":\"color\"\r\n    },\r\n    {\r\n        \"key\":\"deployBtnBgColor\",\r\n        \"type\":\"color\"\r\n    },\r\n    {\r\n        \"key\":\"deployBtnTxtColor\",\r\n        \"type\":\"color\"\r\n    },\r\n    {\r\n        \"key\":\"tableHeaderBgColor\",\r\n        \"type\":\"color\"\r\n    },\r\n    {\r\n        \"key\":\"tableHeaderTxtColor\",\r\n        \"type\":\"color\"\r\n    },\r\n    {\r\n        \"key\": \"tableRowLineColor\",\r\n        \"type\": \"color\"\r\n    },\r\n    {\r\n        \"key\":\"disabledPaginationColor\",\r\n        \"type\":\"color\"\r\n    },\r\n    {\r\n        \"key\": \"enabledPaginationColor\",\r\n        \"type\": \"color\"\r\n    },\r\n\t{\r\n        \"key\": \"energymeters\",\r\n        \"type\": \"json\"\r\n    }\r\n    ]\r\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"buttonBgColor\":\"#ff5722\",\"buttonTxtColor\":\"#ffffff\",\"tableHeaderBgColor\":\"#4c4c4c\",\"tableHeaderTxtColor\":\"#ffffff\",\"tableRowLineColor\":\"#777\",\"energymeters\":\"[\\n    {\\n        brand: 'usr',\\n        models: ['1', 'v1']\\n    },\\n    {\\n        brand: 'usr1',\\n        models: ['2', 'v2']\\n    },\\n    {\\n        brand: 'usr2',\\n        models: ['3', 'v3', 'v4']\\n    },\\n]\"},\"title\":\"Energy Meter\"}"
      }
    },
    {
      "alias": "modbus_module_2",
      "name": "modbus module 2 (OPC)",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 9,
        "sizeY": 5,
        "resources": [],
        "templateHtml": "<!--This section is for gateway table-->\n<mat-spinner *ngIf=\"!dataSource\" class=\"mat-spinner\"></mat-spinner>\n<div class=\"col-md-8\" *ngIf=\"isGateway\">\n    <div class=\"header_section\" *ngIf=\"dataSource\">\n        <div class=\"header_left\">\n            <strong>\n                <span class=\"gateway_title\">OPC GATEWAY</span>\n            </strong>\n            \n        </div>\n        <div class=\"header_right\">\n            <div class=\"search_bar\">\n                <input type=\"text\" placeholder=\"search here ...\" [(ngModel)]=\"gatewaySearchText\" (ngModelChange)=\"searchDataFromGatewayTable()\"/>\n                <mat-icon class=\"search_icon\">search</mat-icon>\n            </div>\n            <div class=\"add_new_GW_btn\">\n                <button mat-stroked-button [style.background-color]=\"settings?.addBtnBgColor\" (click)=\"openDialog()\"><span [style.color]=\"settings?.addBtnTxtColor\">+ ADD NEW GW</span></button>\n            </div>\n            <div class=\"deploy_btn\">\n                <button mat-stroked-button color=\"primary\" (click)=\"deploy()\" [style.background-color]=\"settings?.deployBtnBgColor\"><span [style.color]=\"settings?.deployBtnTxtColor\">DEPLOY </span><mat-icon [style.color]=\"settings?.deployBtnTxtColor\">play_arrow</mat-icon></button> \n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"dataSource\">\n        <div class=\"rf\" [style.height]=\"height+'px'\"\n            [style.overflow]=\"'auto'\">\n            <mat-table [dataSource]=\"dataSource.slice(tablePagination.getFrom(), tablePagination.getTo())\" class=\"satl-table\">\n                <div *ngFor=\"let col of displayedColumns\">\n                    <ng-container matColumnDef={{col}}>\n                        <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\" class=\"headercheckboxcell {{col}}\">\n                            <div id=\"mat-report-header-search-box\">\n                                <mat-checkbox \n                                    *ngIf=\"col==='checkbox'\"\n                                    (change)=\"allElementSelectChange($event)\"\n                                    [checked]=\"styleOfHeaderCheckbox()\"\n                                    [indeterminate]=\"selected_data.length>0 && selected_data.length!==dataSource.length\"\n                                    ></mat-checkbox>\n                                <span *ngIf=\"col!=='checkbox'\" \n                                    [ngClass]=\"col === 'actions' ? 'align_left': 'align_right'\"\n                                >{{col.toUpperCase()}}</span>\n                            </div>  \n                        </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\" [style.background-color]=\"bgColor\" [style.color]=\"color\" class=\"checkboxcell\"  [style.border-bottom-color]=\"settings?.tableRowLineColor\">\n                            <mat-checkbox \n                                *ngIf=\"col==='checkbox'\" \n                                class=\"example-margin\"  \n                                (change)=\"singleElementSelectChange($event, element)\"\n                                [checked]=\"styleOfCheckbox(element)\"\n                                >\n                                \n                            </mat-checkbox>\n                            <span *ngIf=\"col!=='checkbox'\">{{element[col]}}</span>\n                            <div *ngIf=\"col=='actions'\">\n                                <button \n                                    mat-icon-button \n                                    aria-label=\"Example icon button with a vertical three dot icon\"\n                                    (click)=\"openFunctionDialog(element)\"\n                                >\n                                    <mat-icon [style.color]=\"color\">functions</mat-icon>\n                                </button>\n                                <button \n                                    mat-icon-button \n                                    aria-label=\"Example icon button with a vertical three dot icon\"\n                                    (click)=\"forwardChangePage(element)\"\n                                >\n                                    <mat-icon [style.color]=\"color\">settings</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"openDialog(element)\">\n                                    <mat-icon [style.color]=\"color\">edit</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"deleteGateway(element)\">\n                                    <mat-icon [style.color]=\"color\">delete</mat-icon>\n                                </button>\n                            </div>\n                        </mat-cell>\n                    </ng-container>\n                </div>\n                <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\n                <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n            </mat-table>\n        </div>\n        <mat-paginator\n            [style.background-color]=\"bgColor\"\n            [style.color]=\"color\"\n            [length]=\"dataSource.length\"\n            [pageSize]=\"tablePagination.pageSize\"\n            [pageSizeOptions]=\"tablePagination.pageSizeOptions\"\n            (page)=\"tablePagination.handler($event)\"\n            aria-label=\"Select page\"\n            showFirstLastButtons=\"true\"\n            class=\"report-form-paginator\">\n        </mat-paginator>\n    </div>\n</div>\n\n\n<!--This section is for gateway endpoint table-->\n\n<div class=\"col-md-8\" *ngIf=\"isGatewayEndpoint\">\n    <div class=\"header_section\">\n        <strong>\n            <div class=\"header_left\" (click)=\"backwardChangePage()\">\n                <mat-icon>keyboard_arrow_left</mat-icon>\n                <span class=\"gateway_title\">{{gatewayEndpointList?.gwName}} ENDPOINT</span>\n            </div>\n        </strong>\n        \n        <div class=\"header_right\">\n            <div class=\"search_bar\">\n                <input type=\"text\" placeholder=\"search here ...\" [(ngModel)]=\"gatewayEndpointSearchText\" (ngModelChange)=\"searchDataFromGatewayEndpointTable()\"/>\n                <mat-icon class=\"search_icon\">search</mat-icon>\n            </div>\n            <div class=\"add_new_btn\">\n                <button mat-stroked-button [style.background-color]=\"settings?.addBtnBgColor\" (click)=\"openDialog(element)\"><span [style.color]=\"settings?.addBtnTxtColor\">+ ADD NEW</span></button>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"dataSource\">\n        <div class=\"rf\" [style.height]=\"height+'px'\"\n            [style.overflow]=\"'auto'\">\n            <mat-table [dataSource]=\"dataSource.slice(tablePagination.getFrom(), tablePagination.getTo())\" class=\"satl-table\">\n                <div *ngFor=\"let col of displayedColumns\">\n                    <ng-container matColumnDef={{col}}>\n                        <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\" class=\"headercheckboxcell {{col}}\">\n                            <div id=\"mat-report-header-search-box\">\n                                <mat-checkbox \n                                    *ngIf=\"col==='checkbox'\"\n                                    (change)=\"allElementSelectChange($event)\"\n                                    [checked]=\"styleOfHeaderCheckbox()\"\n                                    [indeterminate]=\"selected_data.length>0 && selected_data.length!==dataSource.length\"\n                                    ></mat-checkbox>\n                                <span *ngIf=\"col!=='checkbox'\" \n                                    [ngClass]=\"col === 'actions' ? 'align_left': 'align_right'\"\n                                >{{col.toUpperCase()}}</span>\n                            </div>  \n                        </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\" [style.background-color]=\"bgColor\" [style.color]=\"color\" class=\"checkboxcell\"  [style.border-bottom-color]=\"settings?.tableRowLineColor\">\n                            <mat-checkbox \n                                *ngIf=\"col==='checkbox'\" \n                                class=\"example-margin\"  \n                                (change)=\"singleElementSelectChange($event, element)\"\n                                [checked]=\"styleOfCheckbox(element)\"\n                                >\n                                \n                            </mat-checkbox>\n                            <span *ngIf=\"col!=='checkbox'\">{{element[col]}}</span>\n                            <div *ngIf=\"col=='actions'\">\n                                <button mat-icon-button (click)=\"openDialog(element)\">\n                                    <mat-icon [style.color]=\"color\">edit</mat-icon>\n                                </button>\n                                <button\n                                    mat-icon-button \n                                    aria-label=\"Example icon button with a vertical three dot icon\"\n                                    (click)=\"forwardChangePage(element)\"\n                                >\n                                    <mat-icon [style.color]=\"color\">settings</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"deleteGatewayEndpoint(element)\">\n                                    <mat-icon [style.color]=\"color\">delete</mat-icon>\n                                </button>\n                            </div>\n                        </mat-cell>\n                    </ng-container>\n                </div>\n                <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\n                <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n            </mat-table>\n        </div>\n        <mat-paginator\n            [style.background-color]=\"bgColor\"\n            [style.color]=\"color\"\n            [length]=\"dataSource.length\"\n            [pageSize]=\"tablePagination.pageSize\"\n            [pageSizeOptions]=\"tablePagination.pageSizeOptions\"\n            (page)=\"tablePagination.handler($event)\"\n            aria-label=\"Select page\"\n            showFirstLastButtons=\"true\"\n            class=\"report-form-paginator\">\n        </mat-paginator>\n    </div>\n</div>\n\n\n<!--This is for devices page-->\n<div class=\"col-md-8\" *ngIf=\"isGatewayDevice\">\n    <div class=\"header_section\">\n        <strong>\n            <div class=\"header_left\" (click)=\"backwardChangePage()\">\n                <mat-icon>keyboard_arrow_left</mat-icon>\n                <span class=\"gateway_title\">{{gatewayDeviceList?.title}} DEVICE</span>\n            </div>\n        </strong>\n        \n        <div class=\"header_right\">\n            <div class=\"search_bar\">\n                <input type=\"text\" placeholder=\"search here ...\" [(ngModel)]=\"gatewayDeviceSearchText\" (ngModelChange)=\"searchDataFromGatewayDeviceTable()\"/>\n                <mat-icon class=\"search_icon\">search</mat-icon>\n            </div>\n            <div class=\"add_new_btn\">\n                <button mat-stroked-button [style.background-color]=\"settings?.addBtnBgColor\" (click)=\"openDialog(element)\"><span [style.color]=\"settings?.addBtnTxtColor\">+ ADD NEW</span></button>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"dataSource\">\n        <div class=\"rf\" [style.height]=\"height+'px'\"\n            [style.overflow]=\"'auto'\">\n            <mat-table [dataSource]=\"dataSource.slice(tablePagination.getFrom(), tablePagination.getTo())\" class=\"satl-table\">\n                <div *ngFor=\"let col of displayedColumns\">\n                    <ng-container matColumnDef={{col}}>\n                        <mat-header-cell *matHeaderCellDef [style.background-color]=\"settings?.tableHeaderBgColor\" [style.color]=\"settings?.tableHeaderTxtColor\" class=\"headercheckboxcell {{col}}\">\n                            <div id=\"mat-report-header-search-box\">\n                                <mat-checkbox \n                                    *ngIf=\"col==='checkbox'\"\n                                    (change)=\"allElementSelectChange($event)\"\n                                    [checked]=\"styleOfHeaderCheckbox()\"\n                                    [indeterminate]=\"selected_data.length>0 && selected_data.length!==dataSource.length\"\n                                    ></mat-checkbox>\n                                <span *ngIf=\"col!=='checkbox'\" \n                                    [ngClass]=\"col === 'actions' ? 'align_left': 'align_right'\"\n                                >{{col.toUpperCase()}}</span>\n                            </div>  \n                        </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\" [style.background-color]=\"bgColor\" [style.color]=\"color\" class=\"checkboxcell\"  [style.border-bottom-color]=\"settings?.tableRowLineColor\">\n                            <mat-checkbox \n                                *ngIf=\"col==='checkbox'\" \n                                class=\"example-margin\"  \n                                (change)=\"singleElementSelectChange($event, element)\"\n                                [checked]=\"styleOfCheckbox(element)\"\n                                >\n                                \n                            </mat-checkbox>\n                            <span *ngIf=\"col!=='checkbox'\">{{element[col]}}</span>\n                            <div *ngIf=\"col=='actions'\">\n                                <button mat-icon-button (click)=\"openDialog(element)\">\n                                    <mat-icon>edit</mat-icon>\n                                </button>\n                                <button mat-icon-button (click)=\"deleteGatewayDevice(element)\">\n                                    <mat-icon>delete</mat-icon>\n                                </button>\n                            </div>\n                        </mat-cell>\n                    </ng-container>\n                </div>\n                <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"> </mat-header-row>\n                <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n            </mat-table>\n        </div>\n        <mat-paginator\n            [style.background-color]=\"bgColor\"\n            [style.color]=\"color\"\n            [length]=\"dataSource.length\"\n            [pageSize]=\"tablePagination.pageSize\"\n            [pageSizeOptions]=\"tablePagination.pageSizeOptions\"\n            (page)=\"tablePagination.handler($event)\"\n            aria-label=\"Select page\"\n            showFirstLastButtons=\"true\"\n            class=\"report-form-paginator\">\n        </mat-paginator>\n    </div>\n</div>",
        "templateCss": "/*////////////////////////////////*/\n.header_section{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 70px;\n}\n.header_left{\n    display: flex;\n    align-items: center;\n    \n}\n.gateway_title{\n    font-size: 25px;\n    margin-left: 10px;\n}\n.header_right{\n    margin-bottom: 5px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    gap: 5px;\n}\n.search_bar{\n    position: relative;\n}\n.search_bar input{\n    padding-top: 7px;\n    padding-bottom: 7px;\n    padding-left: 7px;\n    padding-right: 30px;\n    border-radius: 4px;\n    border: 1px solid gray;\n}\n.search_icon{\n    position: absolute;\n    top: 6px;\n    right: 5px;\n}\n.add_new_GW_btn button{\n    background-color: #CC0000;\n    color: white;\n    padding: 0 20px;\n}\n.add_new_GW_btn span{\n    color: white;\n}\n.deploy_btn button{\n    background-color: #CC0000;\n    color: white;\n    padding: 0 20px;\n}\n.deploy_btn span{\n    color: white;\n}\n.add_new_btn button{\n    background-color: #CC0000;\n    padding: 0 20px;\n}\n.add_new_btn span{\n    color: white;\n}\n.mat-spinner{\n    position: absolute;\n    top: 45%;\n    left: 45%;\n    /*margin: 48% auto;*/\n    /*width: 100%;;*/\n    /*height: 100%;*/\n    /*display: flex;*/\n    /*justify-content: center;*/\n    /*align-items: center;*/\n}\n\nmat-header-cell{\n    width: 23%;\n    text-align: center;\n}\nmat-header-cell:first-child{\n    width: 10%;\n    text-align: left;\n}\nmat-header-cell:last-child{\n    width: 23%;\n    text-align: right;\n}\nmat-header-cell:last-child span{\n    padding-right: 15px;\n}\n\nmat-cell{\n    text-align: center;\n}\nmat-cell:first-child{\n    text-align: left;\n}\nmat-cell:last-child{\n    text-align: right;\n}\n.mat-form-field-appearance-outline .mat-form-field-infix {\n  border: none!important;   \n}\nmat-form-field{\n    /*width: 100%;*/\n}\n/*end popup style*/\n#mat-report-header-search-box .mat-form-field-wrapper{\n    padding: 0;\n}\n.mat-input-element::placeholder{\n    color: inherit;\n}\n#mat-report-header-search-box .mat-form-field-infix {\n    border-top: 4px solid transparent;\n}\n#mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-prefix, #mat-report-header-search-box .mat-form-field-appearance-outline .mat-form-field-suffix {\n    top: 5px;\n}\n#mat-report-header-search-box mat-form-field{\n    width: 300px;\n}",
        "controllerScript": "self.onInit = function() {\n    $(document).ready(function(){\n      self.onResize();\n    });\n    $scope = self.ctx.$scope;\n    $scope.color=self.ctx.widgetConfig.color;\n    $scope.bgColor=self.ctx.widgetConfig.backgroundColor;\n    let data=[\n    {\n        \"gwName\": \"FLOW_METERS_GW\",\n        \"user\": \"intrauser\",\n        \"password\": \"intrauser\",\n        \"host\": \"mosquitto\",\n        \"port\": \"1883\",\n        \"dataFetchInterval\": 3,\n        \"tsTopic\": \"v1/gateway/telemetry\",\n        \"tsDataPushInterval\": 60,\n        \"attrTopic\": \"v1/gateway/attributes\",\n        \"rpcPubTopic\": \"v1/gateway/rpc\",\n        \"rpcSubTopic\": \"v1/gateway/rpc/sub\",\n        \"formaterFunc\": \"if(msg.comError){\\n  msg.attr[msg.device] = {\\n    comError: true\\n  }\\n}\\n\\n\\nreturn msg\",\n        \"tsFormaterFunc\": \"let vl = {\\n    ts_backwashFlowRate_m3h: msg.data.backwashFlowRate_m3h,\\n    ts_backwashFlowTotal_m3: msg.data.backwashFlowTotal_m3,\\n    tsd_backwashFlowTotal_m3: msg.data.backwashFlowTotal_m3 - msg.pa_data.backwashFlowTotal_m3,\\n    ts_bedLevelFilter1_ft: msg.data.bedLevelFilter1_ft,\\n    ts_bedLevelFilter2_ft: msg.data.bedLevelFilter2_ft,\\n    ts_bedLevelFilter3_ft: msg.data.bedLevelFilter3_ft,\\n    ts_bedLevelFilter4_ft: msg.data.bedLevelFilter4_ft,\\n    ts_deliveryFlowRate_m3h: msg.data.deliveryFlowRate_m3h,\\n    ts_deliveryFlowTotal_m3: msg.data.deliveryFlowTotal_m3,\\n    tsd_deliveryFlowTotal_m3: msg.data.deliveryFlowTotal_m3 - msg.pa_data.deliveryFlowTotal_m3,\\n    ts_emCurrent: msg.data.emCurrent,\\n    ts_emEnergy: msg.data.emEnergy,\\n    tsd_emEnergy: msg.data.emEnergy - msg.pa_data.emEnergy,\\n    ts_emHz: msg.data.emHz,\\n    ts_emPf: msg.data.emPf,\\n    ts_emPower: msg.data.emPower,\\n    ts_emVoltage: msg.data.emVoltage,\\n    ts_overheadTankInFlowRate_m3h: msg.data.overheadTankInFlowRate_m3h,\\n    ts_overheadTankInFlowTotal_m3: msg.data.overheadTankInFlowTotal_m3,\\n    tsd_overheadTankInFlowTotal_m3: msg.data.overheadTankInFlowTotal_m3 - msg.pa_data.overheadTankInFlowTotal_m3,\\n    ts_overheadTankLevel_pcnt: msg.data.overheadTankLevel_pcnt,\\n    ts_runTimePump1_s: msg.data.runTimePump1_s,\\n    tsd_runTimePump1_s: msg.data.runTimePump1_s - msg.pa_data.runTimePump1_s,\\n    ts_runTimePump2_s: msg.data.runTimePump2_s,\\n    tsd_runTimePump2_s: msg.data.runTimePump2_s - msg.pa_data.runTimePump2_s,\\n    ts_runTimePump3_s: msg.data.runTimePump3_s,\\n    tsd_runTimePump3_s: msg.data.runTimePump3_s - msg.pa_data.runTimePump3_s,\\n    ts_dosingChlorinator1: msg.data.dosingChlorinator1,\\n    ts_dosingChlorinator2: msg.data.dosingChlorinator2\\n}\\n\\n\\nfunction fv(value, dp=0){\\n    if(typeof value == 'number'){\\n        return Number(parseFloat(value).toFixed(dp));\\n    }\\n    return value\\n}\\n\\n\\nfor(let key in vl){\\n    vl[key] = fv(vl[key], 3)\\n}\\n\\nif (!msg.comError) {\\n    msg.ts[msg.device] = [\\n        {\\n            ts: new Date().getTime(),\\n            values: {\\n                ...vl,\\n                ts_commError: false\\n            }\\n        }\\n    ]\\n} else {\\n    msg.ts[msg.device] = [\\n        {\\n            ts: new Date().getTime(),\\n            values: {\\n                ts_commError: true\\n            }\\n        }\\n    ]\\n}\\n\\n\\nreturn msg\",\n        \"gwDevices\": [\n            {\n                \"title\": \"PLC_31\",\n                \"ipAddress\": \"200.50.30.31\",\n                \"portNumber\": \"4840\",\n                \"securityPolicy\": \"None\",\n                \"securityMode\": \"None\",\n                \"anonymous\": true,\n                \"userCertificate\": false,\n                \"login\": false,\n                \"user\": \"\",\n                \"password\": \"\",\n                \"certificate\": \"\",\n                \"privateKey\": \"\",\n                \"nodeIds\": [\n                    \"ns=4;i=1\"\n                ],\n                \"devices\": [\n                    {\n                        \"deviceName\": \"FM_11001\",\n                        \"dataPoints\": [\n                            {\n                                \"key\": \"flow_rate_m3_h\",\n                                \"pdName\": \"OPC_WaterTank\",\n                                \"cdName\": \"waterFlowRateRawWater\"\n                            },\n                            {\n                                \"key\": \"flow_total_m3\",\n                                \"pdName\": \"OPC_WaterTank\",\n                                \"cdName\": \"waterTotalFlowRawWater\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n    \n    // global variables\n    $scope.gatewayObject;\n    let modbusData=[];\n    $scope.globalGatewayData = [];\n    $scope.wantToLogin = false;\n    $scope.functions = false;\n    \n    \n    $scope.isGatewaySearchFieldShow = false;\n    $scope.isDeviceSearchFieldShow = false;\n    \n    $scope.isGateway = true;\n    $scope.isGatewayEndpoint = false;\n    $scope.isGatewayDevice = false;\n    \n    self.ctx.gatewayList = [];\n    $scope.gatewayEndpointList = [];\n    $scope.gatewayDeviceList = [];\n    \n    $scope.settings=self.ctx.settings;\n    let GATEWAY_ELEMENT_DATA = data;\n    $scope.gatewaySearchText = '';\n    $scope.gatewayEndpointSearchText = '';\n    $scope.gatewayDeviceSearchText = '';\n    \n    $scope.selected_data = [];\n    $scope.isAllSelected = false;\n    $scope.isDeterminate = false;\n    $scope.isEmptySelectedData = true;\n    \n    $scope.displayedColumns = ['checkbox','gwName', 'host', 'port','devices', 'actions'];\n    \n    const tablePagination = {\n        pageIndex: 0,\n        pageSize: 5,\n        pageSizeOptions: [20, 50, 100],\n        handler: (pagination) => {\n            const { pageIndex, pageSize } = pagination;\n            if (pageSize !== undefined) {\n                tablePagination.pageSize = pageSize;\n            }\n            if (pageIndex !== undefined) {\n                tablePagination.pageIndex = pageIndex;\n            }\n        },\n        getFrom: () => {\n            const { pageIndex, pageSize } = tablePagination;\n            return pageIndex * pageSize;\n        },\n        getTo: () => {\n            const { pageIndex, pageSize } = tablePagination;\n            return pageIndex * pageSize + pageSize;\n        }\n    };\n    $scope.tablePagination=tablePagination;\n    window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n    window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;\n    window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange\n    \n    if (!window.indexedDB) {\n        window.alert(\"Your browser doesn't support a stable version of IndexedDB.\")\n    }\n    var db;\n    // data=res;\n    let conn = window.indexedDB.open(self.ctx.settings.dbName, 1);\n    conn.onsuccess = function (event) {\n        db = conn.result;\n        clearData();\n        writeData(data);\n        $scope.readAll();\n    };\n    conn.onupgradeneeded = function (event, data) {\n        var db = event.target.result;\n        var objectStore = db.createObjectStore(\"modbus\", {keyPath: \"gw\"});\n    \n        objectStore.add({gw: 'gateway', value: data});\n    }\n    conn.onerror = function (event) {\n        // console.log(\"error: \");\n    };\n    // let token = localStorage.getItem('jwt_token');\n    // let token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.sCLTWdBeL2U462uO9uEhST6jlJ2xLFQRkqtfbPCACm0'\n    // let req=self.ctx.http.get(self.ctx.settings.url+'/opc/ocs', {headers: {Authorization: 'Bearer '+token}});\n    // req.subscribe(res=>{\n    //     data=res;\n    //     let conn = window.indexedDB.open(self.ctx.settings.dbName, 1);\n    //     conn.onsuccess = function (event) {\n    //         db = conn.result;\n    //         clearData();\n    //         writeData(data);\n    //         $scope.readAll();\n    //     };\n    //     conn.onupgradeneeded = function (event, data) {\n    //         var db = event.target.result;\n    //         var objectStore = db.createObjectStore(\"modbus\", {keyPath: \"gw\"});\n        \n    //         objectStore.add({gw: 'gateway', value: data});\n    //     }\n    //     conn.onerror = function (event) {\n    //         // console.log(\"error: \");\n    //     };\n    // })\n    \n    \n    \n    \n    \n    \n    \n    \n    function clearData() {\n        const transaction = db.transaction([\"modbus\"], \"readwrite\");\n        transaction.oncomplete = (event) => {};\n        transaction.onerror = (event) => {};\n        const objectStore = transaction.objectStore(\"modbus\");\n        const objectStoreRequest = objectStore.clear();\n        objectStoreRequest.onsuccess = (event) => {\n        };\n    };\n    \n    function writeData(data){\n        let transaction = db.transaction([\"modbus\"], \"readwrite\")\n            .objectStore(\"modbus\");\n        transaction.add({gw: 'gateway', value: data});\n    }\n    \n    \n    $scope.readAll=()=>{\n        modbusDt = [];\n        let objectStore = db.transaction(\"modbus\").objectStore(\"modbus\");\n        objectStore.openCursor().onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n                modbusDt=cursor.value.value;\n                cursor.continue();\n            } else {\n                modbusDt.forEach(gwt=>{\n                    gwt['devices']=gwt.gwDevices.length;\n                });\n                \n                \n                self.ctx.gatewayList = [...modbusDt];\n                if($scope.isGateway){\n                    $scope.dataSource = self.ctx.gatewayList;\n                }\n                $scope.globalGatewayData=[...modbusDt];\n                self.ctx.detectChanges();\n                self.onResize();\n            }\n        };\n    }\n    \n    $scope.modify=(cData, type='gateway')=>{\n        var objectStore = db.transaction([\"modbus\"], \"readwrite\")\n            .objectStore(\"modbus\");\n        objectStore.openCursor().onsuccess = (event) => {\n            const cursor = event.target.result;\n            if (cursor) {\n                const updateData = cursor.value;\n                updateData.value=cData;\n                cursor.update(updateData);\n                cursor.continue();\n            }else{\n                $scope.readAll();\n            }\n        }\n    }\n    \n    $scope.remove=(id)=>{\n        if (confirm('Do you really want to delete?')){\n            const request = db.transaction('modbus', 'readwrite').objectStore('modbus');\n            request.delete(id.toString());\n            request.onsuccess = () => {\n            }\n    \n            request.onerror = (err) => {\n            }\n            $scope.readAll();\n        }\n    }\n    deploymentErrorTemplate=`\n    <div aria-label=\"Info\" style=\"width: 700px\">\n        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <span fxFlex>\n            <div style=\"display:flex;justify-content:space-between;\">\n                <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                    Deployment Errors\n                </div>\n            </div>\n        </span>\n            <button mat-icon-button (click)=\"close()\"><mat-icon>close</mat-icon></button>\n        </mat-toolbar>\n        <div mat-dialog-content>\n        <ul *ngFor=\"let error of data.data\">\n            <li>{{error}}</li>\n        </ul>\n        </div>\n    </div>\n    `\n    $scope.deploy=()=>{\n        let postReq=self.ctx.http.post(self.ctx.settings.url+'/opc/ocs', $scope.globalGatewayData, {headers: {Authorization: 'Bearer '+token}});\n        postReq.subscribe(res=>{\n            if(res.msg=='success'){\n                let haltReq=self.ctx.http.get(self.ctx.settings.url+'/opc/halt', {headers: {Authorization: 'Bearer '+token}});\n                haltReq.subscribe(res2=>{\n                    self.ctx.showToast('success', 'Successfully deployed!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                }, error2=>{\n                    self.ctx.showToast('warn', 'Deployed Successfully without halting!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n                })\n            }else{\n                customDialog.customDialog(deploymentErrorTemplate,\n                    InfoDialogController, {data:res}).subscribe(\n                    function(res3) {\n                        if (res3) {}\n                    }\n                );\n            }\n        }, error=>{\n            self.ctx.showToast('error', 'Deployment failed!', 2000, 'top', 'start',  self.ctx.$scope.toastTargetId);\n        });\n    }\n    \n    // table processing\n    self.ctx.checkDeviceNameExist = function(device, isAdd){\n        for(let i=0;i<$scope.globalGatewayData.length;i++){\n            let endpoints = $scope.globalGatewayData[i].gwDevices;\n            for(let j=0;j<endpoints.length;j++){\n                let devices = endpoints[j].devices;\n                for(let k=0;k<devices.length;k++){\n                    if(!isAdd && devices[k].deviceName===self.ctx.editableDeviceName)continue;\n                    if(devices[k].deviceName===device.deviceName){\n                        alert(\"This device already exist\");\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n    }\n    $scope.styleOfCheckbox=function(row){\n        $('.tb-default mat-cell.checkboxcell .mat-checkbox-frame').css('border', '1px solid '+self.ctx.widgetConfig.color);\n        return $scope.selected_data.indexOf(row)!==-1;\n    }\n    $scope.styleOfHeaderCheckbox=()=>{\n        $('.tb-default #mat-report-header-search-box .mat-checkbox-frame').css('border', '1px solid '+self.ctx.settings.tableHeaderTxtColor);\n        return $scope.isAllSelected;\n    }\n    \n    // dialog essentials\n    let $injector = self.ctx.$scope.$injector;\n    let customDialog = $injector.get(self.ctx.servicesMap.get('customDialog'));\n    \n    $scope.searchDataFromGatewayTable = function(){\n        $scope.dataSource = $scope.globalGatewayData;\n        if($scope.gatewaySearchText!=''){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                if(ele.gwName.toLowerCase().search($scope.gatewaySearchText.toLowerCase())!=-1){\n                    return ele;\n                }\n            })\n        }\n        self.ctx.detectChanges()\n    }\n    $scope.searchDataFromGatewayEndpointTable = function(){\n        $scope.dataSource = $scope.gatewayEndpointList.gwDevices;\n        if($scope.gatewayEndpointSearchText!=''){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                if(ele.title.toLowerCase().search($scope.gatewayEndpointSearchText.toLowerCase())!=-1){\n                    return ele;\n                }\n            })\n        }\n        self.ctx.detectChanges()\n    }\n    \n    $scope.searchDataFromGatewayDeviceTable = function(){\n        $scope.dataSource = $scope.gatewayDeviceList.devices;\n        if($scope.gatewayDeviceSearchText!=''){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                if(ele.deviceName.toLowerCase().search($scope.gatewayDeviceSearchText.toLowerCase())!=-1){\n                    return ele;\n                }\n            })\n        }\n        self.ctx.detectChanges()\n    }\n    \n    $scope.forwardChangePage = function(element){\n        \n        tablePagination.pageIndex = 0;\n        tablePagination.pageSize = 5;\n        $scope.tablePagination=tablePagination;\n        \n        $scope.isAllSelected = false;\n        $scope.selected_data = [];\n        \n        if($scope.isGateway){\n            $scope.isGateway = false;\n            $scope.isGatewayEndpoint = true;\n            \n            $scope.gatewayEndpointList = element;\n            $scope.dataSource = $scope.gatewayEndpointList.gwDevices;\n            $scope.displayedColumns = ['checkbox','title','ipAddress','portNumber','actions'];\n        }else if($scope.isGatewayEndpoint){\n            $scope.isGatewayEndpoint = false;\n            $scope.isGatewayDevice = true;\n            \n            $scope.displayedColumns = ['checkbox','deviceName','actions'];\n            $scope.gatewayDeviceList = element;\n            $scope.dataSource = $scope.gatewayDeviceList.devices;\n        }\n        self.ctx.detectChanges();\n        self.onResize();\n    }\n    $scope.backwardChangePage = function(element){\n        tablePagination.pageIndex = 0;\n        tablePagination.pageSize = 5;\n        $scope.tablePagination=tablePagination;\n        \n        $scope.isAllSelected = false;\n        $scope.selected_data = [];\n        \n        if($scope.isGateway){\n            // $scope.isGateway = false;\n            // $scope.isGatewayDevice = true;\n        }else if($scope.isGatewayEndpoint){\n            $scope.isGateway = true;\n            $scope.isGatewayDevice = false;\n            \n            \n            $scope.dataSource = self.ctx.gatewayList;\n            $scope.displayedColumns = ['checkbox','gwName', 'host', 'port','devices', 'actions'];\n        }else{\n            $scope.isGatewayDevice = false;\n            $scope.isGatewayEndpoint = true;\n            \n            \n            $scope.globalGatewayData.forEach((ele,index)=>{\n                if(ele.gwName===$scope.gatewayEndpointList.gwName){\n                    $scope.dataSource = ele.gwDevices;\n                    $scope.gatewayEndpointList = ele;\n                }\n                \n            })\n            // $scope.dataSource = self.ctx.gatewayEndpointList.gwDevices;\n            $scope.displayedColumns = ['checkbox','title','ipAddress','portNumber','actions'];\n        }\n        self.ctx.detectChanges();\n        self.onResize();\n    }\n    \n    $scope.changeSearchFieldShowState = function() {\n        if($scope.isGateway){\n            $scope.isGatewaySearchFieldShow = !$scope.isGatewaySearchFieldShow;\n            $scope.gatewaySearchText = '';\n            $scope.dataSource = $scope.globalGatewayData;\n        }else{\n            $scope.isDeviceSearchFieldShow = !$scope.isDeviceSearchFieldShow;\n            $scope.deviceSearchText = '';\n            $scope.dataSource = DEVICE_ELEMENT_DATA;\n        }\n        \n        self.ctx.detectChanges();\n    }\n    \n    $scope.singleElementSelectChange = function(event, element){\n        let key = 'gwName';\n        \n        if($scope.isGateway){\n            key = 'gwName'\n        }else if($scope.isGatewayEndpoint){\n            key = 'title'\n        }else{\n            key = 'deviceName'\n        }\n        \n        isChecked = event.checked;\n        if(isChecked){\n            $scope.selected_data.push(element)\n        }else{\n            $scope.selected_data = $scope.selected_data.filter(ele=>ele!=element)\n        }\n        ////////////////////////////\n        if($scope.selected_data.length!==$scope.dataSource.length){\n            $scope.isAllSelected = false\n        }else if($scope.selected_data.length===$scope.dataSource.length){\n            $scope.isAllSelected = true\n        }\n        if($scope.selected_data.length===0){\n            $scope.isAllSelected = false\n        }\n    }\n    $scope.allElementSelectChange = function(event){\n        isChecked = event.checked;\n        if(isChecked){\n            $scope.isAllSelected = true\n            $scope.isAllElementSelected = true\n            $scope.selected_data = $scope.dataSource;\n        }else{\n            $scope.isAllSelected = false\n            $scope.isAllElementSelected = false\n            $scope.selected_data = []\n        }\n        self.ctx.detectChanges();\n    }\n    \n    $scope.deleteGateway = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element\n            })\n            $scope.modify($scope.dataSource)\n        }\n    }\n    \n    $scope.deleteGatewayEndpoint = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element\n            })\n            \n            $scope.globalGatewayData.forEach((ele,index)=>{\n                if(ele.gwName===$scope.gatewayEndpointList.gwName){\n                    $scope.globalGatewayData[index].gwDevices = [...$scope.dataSource]\n                }\n            })\n            $scope.modify($scope.globalGatewayData)\n        }\n    }\n    $scope.deleteGatewayDevice = function(element){\n        if(confirm('Are you sure?')){\n            $scope.dataSource = $scope.dataSource.filter(ele=>{\n                return ele!=element\n            })\n            $scope.globalGatewayData.forEach((ele, index)=>{\n                ele.gwDevices.forEach((device,idx)=>{\n                    if(device.title === $scope.gatewayDeviceList.title){\n                        $scope.globalGatewayData[index].gwDevices[idx].devices = [...$scope.dataSource]\n                    }\n                })\n            })\n            $scope.modify($scope.globalGatewayData)\n            \n            self.ctx.detectChanges()\n        }\n    }\n    \n    \n    $scope.openFunctionDialog = function(element){\n        $scope.functions = true;\n        $scope.openDialog(element);\n    }    \n    \n    \n    \n    ////////////// dialog\n    $scope.openDialog=function(dt={}){\n        if($scope.isGateway && !$scope.functions){\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"gatewayform\"\n                    [formGroup]=\"gatewayform\" \n                    (submit)=\"saveGateway($event,dt)\"\n                    style=\"padding: '0px'\"\n                >\n                    <div aria-label=\"Info\" style=\"min-width: 500px;\">\n                        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                            <span fxFlex>\n                                <div style=\"display:flex;justify-content:space-between;\">\n                                    <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                        {{isAdd?'ADD':'UPDATE'}} OPC GATEWAY\n                                    </div>\n                                </div>\n                            </span>\n                            <button mat-icon-button><mat-icon>save</mat-icon></button>\n                            <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                        </mat-toolbar>\n                        <div mat-dialog-content>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Gateway Name</mat-label>\n                                <input required formControlName=\"gwName\" matInput placeholder=\"Gateway Name\">\n                            </mat-form-field>\n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>Username</mat-label>\n                                <input formControlName=\"user\" matInput placeholder=\"Username\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Password</mat-label>\n                                    <input formControlName=\"password\" matInput placeholder=\"Password\">\n                                </mat-form-field>\n                            </div>\n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>Host</mat-label>\n                                <input required formControlName=\"host\" matInput placeholder=\"Host\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Port</mat-label>\n                                    <input required formControlName=\"port\" matInput placeholder=\"Port\">\n                                </mat-form-field>\n                            </div>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Data fetch interval</mat-label>\n                                <input type=\"number\" required formControlName=\"dataFetchInterval\" matInput placeholder=\"Data fetch interval\">\n                            </mat-form-field>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Attribute Topic</mat-label>\n                                <input required formControlName=\"attrTopic\" matInput placeholder=\"Attribute Topic\">\n                            </mat-form-field>\n                            \n                            \n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Timeseries Topic</mat-label>\n                                <input required formControlName=\"tsTopic\" matInput placeholder=\"Timeseries Topic\">\n                            </mat-form-field>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Timeseries Data Push Interval (seconds)</mat-label>\n                                <input type=\"number\" required formControlName=\"tsDataPushInterval\" matInput placeholder=\"Timeseries Data Push Interval (seconds)\">\n                            </mat-form-field>\n                            \n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>RPC Pub Topic</mat-label>\n                                <input formControlName=\"rpcPubTopic\" matInput placeholder=\"RPC Pub Topic\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>RPC Sub Topic</mat-label>\n                                    <input formControlName=\"rpcSubTopic\" matInput placeholder=\"RPC Sub Topic\">\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </div>\n                </form>`;\n        }else if($scope.isGateway && $scope.functions){\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"gatewayform\"\n                    [formGroup]=\"gatewayform\"\n                    (submit)=\"saveGatewayFunc($event,dt)\"\n                    style=\"padding: '0px'\"\n                >\n                    <div aria-label=\"Info\" style=\"min-width: 700px;\">\n                        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                            <span fxFlex>\n                                <div style=\"display:flex;justify-content:space-between;\">\n                                    <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                        GATEWAY FUNCTIONS\n                                    </div>\n                                </div>\n                            </span>\n                            <button mat-icon-button><mat-icon>save</mat-icon></button>\n                            <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                        </mat-toolbar>\n                        <div mat-dialog-content style=\"display:'flex';flex-direction:'column';gap:'5px'\">\n                            <mat-tab-group>\n                                <mat-tab label=\"Formater Function\">\n                                    <mat-form-field \n                                        appearance=\"outline\" \n                                        style=\"width:'100%';font-family: 'Courier';background-color: 'black';color: 'white';border-radius: '6px'\"\n                                    >\n                                        <mat-label style=\"color:'white'\">Formater Function (msg.attr, msg.ts)</mat-label>\n                                        <textarea rows=\"18\" matInput placeholder=\"Formater Function (msg.attr, msg.ts)\" formControlName=\"formaterFunc\" style=\"outline:'none'\"></textarea>\n                                    </mat-form-field>\n                                </mat-tab>\n                                <mat-tab label=\"Ts Formater Function\">\n                                    <mat-form-field \n                                        appearance=\"outline\" \n                                        style=\"width:'100%';font-family: 'Courier';background-color: 'black';color: 'white';border-radius: '6px'\"\n                                    >\n                                        <mat-label style=\"color:'white'\">TS Formater Function (msg.attr, msg.ts)</mat-label>\n                                        <textarea rows=\"18\" matInput placeholder=\"Ts Formater Function (msg.attr, msg.ts)\" formControlName=\"tsFormaterFunc\" style=\"outline:'none'\"></textarea>\n                                    </mat-form-field>\n                                </mat-tab>\n                            </mat-tab-group>\n                            \n                        </div>\n                    </div>\n                </form>`;\n        }else if($scope.isGatewayEndpoint){\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"gatewayendpoitform\"\n                    [formGroup]=\"gatewayendpoitform\" \n                    (submit)=\"saveGatewayEndpoint($event,dt)\"\n                    style=\"padding: '0px'\"\n                >\n                    <div aria-label=\"Info\" style=\"min-width: 700px;\">\n                        <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                            <span fxFlex>\n                                <div style=\"display:flex;justify-content:space-between;\">\n                                    <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                        {{isAdd?'ADD':'UPDATE'}} OPC GATEWAY ENDPOINT\n                                    </div>\n                                </div>\n                            </span>\n                            <button mat-icon-button><mat-icon>save</mat-icon></button>\n                            <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                        </mat-toolbar>\n                        <div mat-dialog-content>\n                            <mat-form-field \n                                appearance=\"outline\" \n                                style=\"width:'100%'\"\n                            >\n                                <mat-label>Title</mat-label>\n                                <input required formControlName=\"title\" matInput placeholder=\"Title\">\n                            </mat-form-field>\n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>Ip Address</mat-label>\n                                <input required formControlName=\"ipAddress\" matInput placeholder=\"Ip Address\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Port Number</mat-label>\n                                    <input required formControlName=\"portNumber\" matInput placeholder=\"Port Number\">\n                                </mat-form-field>\n                            </div>\n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                            >\n                                <mat-form-field appearance=\"outline\" style=\"width:'100%'\" >\n                                    <mat-label>Security Policy</mat-label>\n                                      <mat-select required placeholder=\"Security Policy\" formControlName=\"securityPolicy\">\n                                            <mat-option value=\"None\">None</mat-option>\n                                            <mat-option value=\"Basic128\">Basic128</mat-option>\n                                            <mat-option value=\"Basic192\">Basic192</mat-option>\n                                            <mat-option value=\"Basic192Rsa15\">Basic192Rsa15</mat-option>\n                                            <mat-option value=\"Basic256Rsa15\">Basic256Rsa15</mat-option>\n                                            <mat-option value=\"Basic256Sha256\">Basic256Sha256</mat-option>\n                                            <mat-option value=\"Aes128_Sha256\">Aes128_Sha256</mat-option>\n                                            <mat-option value=\"Aes128_Sha256_RsaOaep\">Aes128_Sha256_RsaOaep</mat-option>\n                                            <mat-option value=\"PubSub_Aes128_CTR\">PubSub_Aes128_CTR</mat-option>\n                                            <mat-option value=\"PubSub_Aes256_CTR\">PubSub_Aes256_CTR</mat-option>\n                                            <mat-option value=\"Basic128Rsa15\">Basic128Rsa15</mat-option>\n                                            <mat-option value=\"Basic256\">Basic256</mat-option>\n                                      </mat-select>\n                                </mat-form-field>\n                                <mat-form-field appearance=\"outline\" style=\"width:'100%'\" >\n                                    <mat-label>Security Mode</mat-label>\n                                      <mat-select required placeholder=\"Security Mode\" formControlName=\"securityMode\">\n                                        <mat-option value=\"None\">None</mat-option>\n                                        <mat-option value=\"Sign\">Sign</mat-option>\n                                        <mat-option value=\"SignAndEncrypt\">Sign&Encrypt</mat-option>\n                                      </mat-select>\n                                </mat-form-field>\n                            </div>\n                            \n                            <div style=\"margin-bottom: '15px'\">\n                                <mat-radio-group aria-label=\"Select an option\" style=\"display:'flex';gap:'20px';margin-left:'15px'\" (change)=\"changeUserState($event)\">\n                                  <mat-radio-button [checked]=\"gatewayendpoitform.get('anonymous').value\" value=\"anonymous\">Anonymous</mat-radio-button>\n                                  <mat-radio-button [checked]=\"gatewayendpoitform.get('login').value\" value=\"login\">Login</mat-radio-button>\n                                  <mat-radio-button [checked]=\"gatewayendpoitform.get('userCertificate').value\" value=\"userCertificate\">User Certificate</mat-radio-button>\n                                </mat-radio-group>\n                            </div>\n                            \n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                                *ngIf=\"gatewayendpoitform.get('login').value\"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                <mat-label>Username</mat-label>\n                                <input formControlName=\"user\" matInput placeholder=\"Username\">\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Password</mat-label>\n                                    <input formControlName=\"password\" matInput placeholder=\"Password\">\n                                </mat-form-field>\n                            </div>\n                            \n                            <div \n                                style=\"\n                                    width: '100%'; \n                                    display:'flex'; \n                                    justify-content: 'space-between';\n                                    gap: '4px';\n                                \"\n                                *ngIf=\"gatewayendpoitform.get('userCertificate').value\"\n                            >\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Certificate</mat-label>\n                                    <textarea rows=\"10\" matInput placeholder=\"Certificate\" formControlName=\"certificate\"></textarea>\n                                </mat-form-field>\n                                <mat-form-field \n                                    appearance=\"outline\" \n                                    style=\"width:'100%'\"\n                                >\n                                    <mat-label>Private key</mat-label>\n                                    <textarea rows=\"10\" matInput placeholder=\"Private key\" formControlName=\"privateKey\"></textarea>\n                                </mat-form-field>\n                            </div>\n                            \n                            \n                            <mat-form-field appearance=\"outline\" style=\"width:'100%'\">\n                                <mat-label>Node Ids</mat-label>\n                                <mat-chip-list #chipList aria-label=\"Node Ids\">\n                                  <mat-chip\n                                    *ngFor=\"let nodeId of gatewayendpoitform.get('nodeIds').value; let nodeIndex=index\"\n                                    (removed)=\"removeNodeIds(nodeIndex)\"\n                                  >\n                                    {{nodeId}}\n                                    <mat-icon matChipRemove>cancel</mat-icon>\n                                  </mat-chip>\n                                  <input\n                                    placeholder=\"New node id...\"\n                                    [matChipInputFor]=\"chipList\"\n                                    matInput\n                                    [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n                                    (matChipInputTokenEnd)=\"addNodeIds($event)\">\n                                </mat-chip-list>\n                    \n                            </mat-form-field>\n                            \n                        </div>\n                    </div>\n                </form>`;\n        }else{\n            template=`\n                <form \n                    method=\"POST\" \n                    *ngIf=\"deviceform\"\n                    [formGroup]=\"deviceform\" \n                    (submit)=\"saveDevice()\"\n                    style=\"padding: '0px'\"\n                >\n                <div aria-label=\"Info\" style=\"min-width: 1200px;\">\n                    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n                    <span fxFlex>\n                        <div style=\"display:flex;justify-content:space-between;\">\n                            <div class=\"section-title\" style=\"font-size: 25px; padding: 5px;\">\n                                {{isAdd?'ADD':'UPDATE'}} OPC DEVICE\n                            </div>\n                        </div>\n                    </span>\n                        <button mat-icon-button><mat-icon>save</mat-icon></button>\n                        <button mat-icon-button type=\"button\" (click)=\"close()\"><mat-icon>close</mat-icon></button>\n                    </mat-toolbar>\n                    <div mat-dialog-content>\n                        <div formArrayName=\"devices\">\n                            <div *ngFor=\"let device of deviceform.get('devices').controls; let deviceIndex=index\">\n                                <div [formGroupName]=\"deviceIndex\">\n                                    <cdk-accordion class=\"example-accordion\" style=\"display: 'block';min-width: '500px'; cursor:'pointer'\">\n                                        <cdk-accordion-item\n                                            class=\"example-accordion-item\"\n                                            style=\"border-radius: '5px'; display: 'block'; border: 'solid 1px #ccc'; padding:'10px'; margin-bottom:'5px'\"\n                                            role=\"button\"\n                                            tabindex=\"0\"\n                                            [attr.id]=\"'accordion-header-' + deviceIndex\"\n                                            [attr.aria-expanded]=\"selectedIndex==deviceIndex?true:false\"\n                                            [attr.aria-controls]=\"'accordion-body-' + deviceIndex\">\n                                            <div class=\"example-accordion-item-header\" (click)=\"accordionToggle(deviceIndex)\" [style.margin-bottom]=\"selectedIndex==deviceIndex?'15px':'4px'\" style=\"display:'flex'; justify-content:'space-between'\">\n                                              <span>\n                                                {{ device.value.deviceName==''?'Device': device.value.deviceName}}\n                                              </span>\n                                              <span class=\"example-accordion-item-description\" style=\"text-align:'right'\">\n                                                \n                                                <span *ngIf=\"selectedIndex==deviceIndex\">\n                                                    <mat-icon>expand_less</mat-icon>\n                                                </span>\n                                                <span *ngIf=\"!(selectedIndex==deviceIndex)\">\n                                                    <mat-icon>expand_more</mat-icon>\n                                                </span>\n                                              </span>\n                                            </div>\n                                            <div\n                                              class=\"example-accordion-item-body\"\n                                              role=\"region\"\n                                              [style.display]=\"selectedIndex==deviceIndex ? '' : 'none'\"\n                                              [attr.id]=\"'accordion-body-' + deviceIndex\"\n                                              [attr.aria-labelledby]=\"'accordion-header-' + deviceIndex\">\n                                              <div\n                                            style=\"\n                                            width:'100%'; \n                                            background-color: '#FEFCF3';\n                                            padding: '10px';\n                                            margin-bottom: '5px'\n                                            \"\n                                        >\n                                            <mat-form-field \n                                                appearance=\"outline\" \n                                                style=\"width:'100%'\"\n                                            >\n                                                <mat-label>Device Name</mat-label>\n                                                <input required\n                                                matInput \n                                                placeholder=\"Device Name\"\n                                                formControlName=\"deviceName\"\n                                                >\n                                            </mat-form-field>\n                                            <div formArrayName=\"dataPoints\">\n                                                <div\n                                                    *ngFor=\"let dataPoint of device.get('dataPoints').controls; let dpIndex=index\"\n                                                >\n                                                    <div [formGroupName]=\"dpIndex\" \n                                                        style=\"\n                                                            width: '100%'; \n                                                            display:'flex'; \n                                                            justify-content: 'space-between';\n                                                            align-items: 'center';\n                                                            gap: '4px';\n                                                        \"\n                                                    >\n                                                        <mat-form-field \n                                                            appearance=\"outline\" \n                                                            style=\"width:'100%'\"\n                                                        >\n                                                            <mat-label>Key</mat-label>\n                                                            <input required\n                                                            matInput \n                                                            placeholder=\"Key\"\n                                                            formControlName=\"key\"\n                                                            >\n                                                        </mat-form-field>\n                                                        <mat-form-field \n                                                            appearance=\"outline\" \n                                                            style=\"width:'100%'\"\n                                                        >\n                                                            <mat-label>Parent Tag Name</mat-label>\n                                                            <input required\n                                                            matInput \n                                                            placeholder=\"Parent Tag Name\"\n                                                            formControlName=\"pdName\"\n                                                            >\n                                                        </mat-form-field>\n                                                        \n                                                        <mat-form-field \n                                                            appearance=\"outline\" \n                                                            style=\"width:'100%'\"\n                                                        >\n                                                            <mat-label>Child Tag Name</mat-label>\n                                                            <input required\n                                                            matInput \n                                                            placeholder=\"Child Tag Name\"\n                                                            formControlName=\"cdName\"\n                                                            >\n                                                        </mat-form-field>\n                                                        \n                                                        <div style=\"margin-bottom: '20px'\" *ngIf=\"device.get('dataPoints').length>1\">\n                                                            <button mat-icon-button (click)=\"deleteDataPoints(deviceIndex, dpIndex)\">\n                                                                <mat-icon>delete</mat-icon>\n                                                            </button>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                                    <button mat-stroked-button (click)=\"addDataPoints(deviceIndex)\" [disabled]=\"deviceform.get('devices').at(deviceIndex).get('dataPoints').invalid\" style=\"top: -20px\">\n                                                     + Add new data point\n                                                    </button>\n                                                    \n                                                    <div style=\"text-align: right;\" *ngIf=\"deviceform.value.devices.length>1\"><button mat-stroked-button (click)=\"removeDevice(deviceIndex)\">\n                                                     Remove device\n                                                    </button></div>\n                                                </div>\n                                            </div>\n                                        </cdk-accordion-item>\n                                    </cdk-accordion>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        \n                        \n                        <div (click)=\"addDevices()\" style=\"margin-top: '15px'\" *ngIf=\"isAdd\">\n                            <button [disabled]=\"!deviceform.valid\" style=\"margin-bottom: 15px;border-radius: 5px;padding: 5px;background-color: #ddebf0;cursor: pointer;border:'none'\">+ Add new device</button>\n                        </div>\n                    </div>\n                </div>\n                </form>`;\n        }\n        \n        customDialog.customDialog(template,\n            InfoDialogController, {data:dt}).subscribe(\n            function(res) {\n                if (res) {}\n            }\n        );\n        $scope.functions = false;\n    }\n\n    function InfoDialogController(instance) {\n        instance.separatorKeysCodes = [13, 188];\n        self.ctx.editableDeviceName = instance.data.data.deviceName;\n        instance.isAnonymous = false;\n        instance.isLogin = false;\n        instance.isUserCertificate = false;\n        instance.accordionItem={expanded:false};\n        instance.accordionToggle=(index)=>{\n            instance.accordionItem.expanded=instance.selectedIndex==index?!instance.accordionItem.expanded:true;\n            instance.selectedIndex=instance.accordionItem.expanded?index:-1;\n        }\n         \n        // change login state\n        instance.changeUserState = function(event, name){\n            \n            if(event.value=='anonymous'){\n                instance.gatewayendpoitform.get('anonymous').setValue(true)\n                instance.gatewayendpoitform.get('login').setValue(false)\n                instance.gatewayendpoitform.get('userCertificate').setValue(false)\n                \n                instance.gatewayendpoitform.get('user').setValue('')\n                instance.gatewayendpoitform.get('password').setValue('')\n                instance.gatewayendpoitform.get('certificate').setValue('')\n                instance.gatewayendpoitform.get('privateKey').setValue('')\n            }\n            \n            if(event.value=='login'){\n                instance.gatewayendpoitform.get('anonymous').setValue(false)\n                instance.gatewayendpoitform.get('login').setValue(true)\n                instance.gatewayendpoitform.get('userCertificate').setValue(false)\n                \n                instance.gatewayendpoitform.get('certificate').setValue('')\n                instance.gatewayendpoitform.get('privateKey').setValue('')\n            }\n            if(event.value=='userCertificate'){\n                instance.gatewayendpoitform.get('anonymous').setValue(false)\n                instance.gatewayendpoitform.get('login').setValue(false)\n                instance.gatewayendpoitform.get('userCertificate').setValue(true)\n                \n                instance.gatewayendpoitform.get('user').setValue('')\n                instance.gatewayendpoitform.get('password').setValue('')\n            }\n            self.ctx.detectChanges();\n        }\n        \n        // instance.changeType();\n        if($scope.isGateway){\n            instance.isAdd=instance.data.data.gwName==undefined;\n            \n        }else if($scope.isGatewayEndpoint){\n            instance.isAdd=instance.data.data.title==undefined;\n        }else{\n            instance.isAdd=instance.data.data.deviceName==undefined;\n        }\n        \n        \n        if(instance.data.data.gwName){\n            instance.gatewayform=instance.fb.group({\n                gwName: [instance.data.data.gwName],\n                user: [instance.data.data.user],\n                password: [instance.data.data.password],\n                host: [instance.data.data.host],\n                port: [instance.data.data.port],\n                dataFetchInterval: [instance.data.data.dataFetchInterval],\n                tsTopic: [instance.data.data.tsTopic],\n                tsDataPushInterval: [instance.data.data.tsDataPushInterval],\n                attrTopic: [instance.data.data.attrTopic],\n                rpcPubTopic: [instance.data.data.rpcPubTopic],\n                rpcSubTopic: [instance.data.data.rpcSubTopic],\n                formaterFunc: [instance.data.data?.formaterFunc?instance.data.data.formaterFunc:'return msg'],\n                tsFormaterFunc: [instance.data.data?.tsFormaterFunc?instance.data.data.tsFormaterFunc:'return msg'],\n                gwDevices: [instance.data.data.gwDevices]\n            })\n        }else{\n            instance.gatewayform=instance.fb.group({\n                gwName: [''],\n                user: [''],\n                password: [''],\n                host: [''],\n                port: [''],\n                dataFetchInterval: [''],\n                tsTopic: [''],\n                tsDataPushInterval: [300],\n                attrTopic: [''],\n                rpcPubTopic: [''],\n                rpcSubTopic: [''],\n                formaterFunc: ['return msg'],\n                tsFormaterFunc: ['return msg'],\n                gwDevices: [[]]\n            })\n        }\n        \n        instance.saveGateway=()=>{\n            if(instance.gatewayform.valid){\n                \n                if(instance.isAdd){\n                    gwData=[...$scope.dataSource];\n                    gwData.push(instance.gatewayform.value);\n                    $scope.modify(gwData);\n                }else{\n                    indx=$scope.dataSource.indexOf(instance.data.data);\n                    let gwData=[...$scope.dataSource];\n                    gwData[indx]=instance.gatewayform.value\n                    $scope.modify(gwData);\n                }\n                instance.close();\n            }\n            \n        }\n        instance.saveGatewayFunc=()=>{\n            if(instance.gatewayform.valid){\n                indx=$scope.dataSource.indexOf(instance.data.data);\n                let gwData=[...$scope.dataSource];\n                gwData[indx]=instance.gatewayform.value\n                $scope.modify(gwData);\n                \n                instance.close();\n            }\n            \n        }\n        \n        /////////////////////////////// gateway ENDPOINT\n        if(instance.data.data.title){\n            instance.gatewayendpoitform=instance.fb.group({\n                title: [instance.data.data.title],\n                ipAddress: [instance.data.data.ipAddress],\n                portNumber: [instance.data.data.portNumber],\n                securityPolicy: [String(instance.data.data.securityPolicy)],\n                securityMode: [String(instance.data.data.securityMode)],\n                anonymous: [instance.data.data.anonymous],\n                userCertificate: [instance.data.data.userCertificate],\n                login: [instance.data.data.login],\n                user: [instance.data.data.user],\n                password: [instance.data.data.password],\n                certificate: [instance.data.data.certificate],\n                privateKey: [instance.data.data.privateKey],\n                nodeIds: [instance.data.data.nodeIds]\n            })\n        }else{\n            instance.gatewayendpoitform=instance.fb.group({\n                title: [''],\n                ipAddress: [''],\n                portNumber: [''],\n                securityPolicy: [''],\n                securityMode: [''],\n                anonymous: [true],\n                userCertificate: [false],\n                login: [false],\n                user: [''],\n                password: [''],\n                certificate: [''],\n                privateKey: [''],\n                nodeIds: instance.fb.array([]),\n                devices: [[]]\n            })\n        }\n        \n        instance.addNodeIds=(e)=>{\n            \n            const input = e.input;\n            const value = e.value;\n        \n            if ((value || '').trim()) {\n              const control = instance.gatewayendpoitform.get('nodeIds');\n              control.value.push(instance.fb.control(value.trim()).value);\n            }\n        \n            if (input) {\n              input.value = '';\n            }\n            \n            \n        }\n        instance.removeNodeIds=(index)=>{\n            instance.gatewayendpoitform.get('nodeIds').value = instance.gatewayendpoitform.get('nodeIds').value.filter((ele,i)=>{\n                return i!=index\n            })\n            instance.gatewayendpoitform.get('nodeIds').setValue(instance.gatewayendpoitform.get('nodeIds').value);\n            // instance.gatewayendpoitform.get('nodeIds').value.removeAt(index);\n        }\n        \n        \n        instance.saveGatewayEndpoint=()=>{\n            if(instance.gatewayendpoitform.valid){\n                if(instance.gatewayendpoitform.value.securityPolicy==='null') instance.gatewayendpoitform.get('securityPolicy').setValue(null)\n                if(instance.gatewayendpoitform.value.securityMode==='null') instance.gatewayendpoitform.get('securityMode').setValue(null)\n                \n                \n                if(instance.isAdd){\n                    gatewayendpoitData=[...$scope.dataSource];\n                    gatewayendpoitData.push(instance.gatewayendpoitform.value);\n                    \n                    $scope.dataSource = [...$scope.dataSource, instance.gatewayendpoitform.value];\n                    self.ctx.detectChanges();\n                    \n                }else{\n                    gatewayendpoitData=[...$scope.dataSource];\n                    \n                    let idx = gatewayendpoitData.indexOf(instance.data.data);\n                    devices = gatewayendpoitData[idx].devices;\n                    gatewayendpoitData[idx] = instance.gatewayendpoitform.value;\n                    gatewayendpoitData[idx].devices = devices;\n                    \n                    $scope.dataSource = [...gatewayendpoitData]\n                    self.ctx.detectChanges();\n                    \n                    // indx=$scope.dataSource.indexOf(instance.data.data);\n                    // let gwData=[...$scope.dataSource];\n                    // gwData[indx]=instance.gatewayform.value\n                    // $scope.modify(gwData);\n                    \n                    \n                    // indx=$scope.dataSource.indexOf(instance.data.data);\n                    // let gwData=[...$scope.dataSource];\n                    // gwData[indx]=instance.gatewayform.value\n                    // $scope.modify(gwData);\n                }\n                $scope.globalGatewayData.forEach((ele,index)=>{\n                    if(ele.gwName===$scope.gatewayEndpointList.gwName){\n                        $scope.globalGatewayData[index].gwDevices = [...gatewayendpoitData]\n                    }\n                })\n                $scope.modify($scope.globalGatewayData);\n                \n                instance.close();\n            }\n            \n            \n        }\n        instance.deleteGatewayEndpoint=()=>{\n            \n        }\n        \n        //////////////////////////////// gateway device\n        instance.devices = function(){\n            return instance.deviceform.get('devices');\n        }\n        instance.addDevices=()=>{\n            instance.deviceform.get('devices')?.push(newDevice());\n            instance.deviceform.get('devices')?.at(instance.deviceform.get('devices').length-1).get('dataPoints')?.push(newDataPoint());\n            instance.selectedIndex=instance.deviceform.get('devices').length-1;\n        }\n        instance.removeDevice=(index)=>{\n            instance.deviceform.get('devices').removeAt(index);\n        }\n          \n        instance.addDataPoints = (dpIndex)=> {\n            const dataPoint = instance.devices().at(dpIndex)?.get('dataPoints');\n            dataPoint.push(newDataPoint());\n        }\n        \n        if(instance.data.data.deviceName){\n            instance.deviceform = instance.fb.group({\n                devices: instance.fb.array([])\n            })\n            dvcArray=instance.fb.array([]);\n            \n            // insert existing data\n            device = instance.data.data;\n            // instance.data.data.devices.forEach(device=>{\n            let dvcObj=instance.fb.group({\n                deviceName:[device.deviceName],\n                dataPoints: instance.fb.array([])\n            })\n            dataPointArray=instance.fb.array([]);\n            device.dataPoints.forEach(datapoint=>{\n                dataPointArray.push(instance.fb.group({\n                    key: [datapoint.key],\n                    pdName: [datapoint.pdName],\n                    cdName: [datapoint.cdName]\n                }));\n            });\n            dvcObj.setControl('dataPoints', dataPointArray)\n            dvcArray.push(dvcObj);\n            // })\n            instance.deviceform.setControl('devices', dvcArray);\n            instance.accordionToggle(instance.deviceform.value.devices.length-1)\n        }else{\n            instance.deviceform = instance.fb.group({\n                devices: instance.fb.array([])\n            })\n            instance.addDevices();\n            instance.accordionToggle(0)\n        }\n        \n        \n        \n        function newDevice(){\n            return instance.fb.group({\n              deviceName: [''],\n              dataPoints: instance.fb.array([])\n            })\n          }\n        function newDataPoint(){\n            return instance.fb.group({\n              key: [''],\n              pdName: [''],\n              cdName: ['']\n            })\n          }\n        \n        self.ctx.checkExistKey = function(deviceIndex){\n            let dataPoints = instance.devices().at(deviceIndex)?.get('dataPoints').value;\n            // let key = dataPoint.value.key;\n            \n            for(let i=0;i<dataPoints.length-1;i++){\n                for(let j=i+1;j<dataPoints.length;j++){\n                    if(dataPoints[i].key===dataPoints[j].key){\n                        alert(`row #${i+1} & row #${j+1} keys are duplicate`);\n                        return true;\n                        \n                    }\n                }\n            }\n            return false;\n        }\n        \n        instance.deleteDataPoints = (deviceIndex, dpIndex)=> {\n            const dataPoint = instance.devices().at(deviceIndex)?.get('dataPoints');\n            dataPoint.removeAt(dpIndex);\n        }\n        instance.changeType = function() {\n            // if(event.value==='multi'){\n            \n            // }else{\n            \n            // }\n            \n            instance.devices().clear()\n            instance.addDevices()\n        }\n        \n        instance.saveDevice=()=>{\n            if(instance.deviceform.valid){\n                // check device exist\n                let isDeviceExist;\n                let isKeyExist;\n                instance.deviceform.value.devices.forEach((ele,index)=>{\n                    isKeyExist = self.ctx.checkExistKey(index);\n                    isDeviceExist = self.ctx.checkDeviceNameExist(ele, instance.isAdd);\n                })\n                if(isDeviceExist || isKeyExist){\n                    return;\n                } // end check device exist\n                \n                \n                if(instance.isAdd){\n                    let devices = instance.deviceform.value.devices;\n                    for(let i=0;i<devices.length-1;i++){\n                        for(let j=i+1;j<devices.length;j++){\n                            if(devices[i].deviceName===devices[j].deviceName){\n                                alert(\"This device already exist\");\n                                return;\n                            }\n                        }\n                    }\n                    devices.forEach((ele,index)=>{\n                        $scope.dataSource.push(ele);\n                    })\n                    $scope.dataSource = [...$scope.dataSource];\n                    self.ctx.detectChanges();\n                    \n                    \n                }else{\n                    gatewaydeviceData=[...$scope.dataSource];\n                    \n                    instance.deviceform.value.devices.forEach((ele,index)=>{\n                        $scope.dataSource.push(ele);\n                    })\n                    \n                    let idx = gatewaydeviceData.indexOf(instance.data.data);\n                    gatewaydeviceData[idx] = instance.deviceform.value.devices[0];\n                    \n                    $scope.dataSource = [...gatewaydeviceData]\n                    self.ctx.detectChanges();\n                    \n                    \n                    // indx=$scope.globalGatewayData.indexOf($scope.gatewayObject);\n                    // gwObjIndex=$scope.gatewayObject.gwDevices.indexOf(instance.data.data);\n                    // $scope.globalGatewayData[indx].gwDevices[gwObjIndex]=instance.deviceform.value;\n                }\n                \n                \n                $scope.globalGatewayData.forEach((ele, index)=>{\n                    ele.gwDevices.forEach((device,idx)=>{\n                        if(device.title === $scope.gatewayDeviceList.title){\n                            $scope.globalGatewayData[index].gwDevices[idx].devices = [...$scope.dataSource]\n                        }\n                    })\n                })\n                $scope.modify($scope.globalGatewayData);\n                instance.close()\n                \n            }\n              \n        }\n        \n        instance.close=()=>{\n            instance.dialogRef.close(null);\n        }\n    }\n    self.ctx.detectChanges()\n    self.onResize();    \n};\n\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n};\n\n\nself.onResize=function(){\n    $scope=self.ctx.$scope;\n    $scope.settings=self.ctx.settings;\n    $scope.height=self.ctx.isMobile?self.ctx.height/2:self.ctx.height-120;\n    $scope.formHeight=self.ctx.isMobile?self.ctx.height/2:self.ctx.height;\n    function dsts(){\n        $('mat-paginator.report-form-paginator .mat-select-value-text').css('color', self.ctx.widgetConfig.color);\n        $('mat-paginator.report-form-paginator .mat-select-arrow').css('color', self.ctx.widgetConfig.color);\n        $('.tb-default .report-form-paginator .mat-select-value').css('color',self.ctx.widgetConfig.color+'!important');\n        $('.tb-default .report-form-paginator .mat-form-field-appearance-legacy .mat-form-field-underline').css({'background-color': self.ctx.widgetConfig.color});\n        $('.tb-default .mat-icon-button.mat-button-disabled.mat-button-disabled').css('color', self.ctx.settings.disabledPaginationColor);\n        $('.tb-default .mat-icon-button.mat-button-enabled.mat-button-enabled').css('color', self.ctx.settings.enabledPaginationColor);\n    }\n    dsts();\n    $(document).ready(function() {\n        dsts();\n    });\n };\n\nself.onDestroy = function() {\n};\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\n            \"dbName\",\n            \"url\"\n        ],\n        \"properties\": {\n            \"dbName\":{\n                \"title\":\"indexedDB Name\",\n                \"type\":\"string\",\n                \"default\": \"modbusgwopc\"\n            },\n            \"url\":{\n                \"title\":\"API URL\",\n                \"type\":\"string\",\n                \"default\": \"http://150.150.50.241:3000/api\"\n            },\n            \"addBtnBgColor\":{\n                \"title\":\"Add Button Background Color\",\n                \"type\":\"string\",\n                \"default\": \"#ff5722\"\n            },\n            \"addBtnTxtColor\":{\n                \"title\":\"Add Button Text Color\",\n                \"type\":\"string\",\n                \"default\": \"#ffffff\"\n            },\n            \"deployBtnBgColor\":{\n                \"title\":\"Deploy Button Background Color\",\n                \"type\":\"string\",\n                \"default\": \"#ff5722\"\n            },\n            \"deployBtnTxtColor\":{\n                \"title\":\"deploy Button Text Color\",\n                \"type\":\"string\",\n                \"default\": \"#ffffff\"\n            },\n            \n            \"tableHeaderBgColor\":{\n                \"title\":\"Table header background color\",\n                \"type\":\"string\",\n                \"default\": \"#cccc00\"\n            },\n            \"tableHeaderTxtColor\":{\n                \"title\":\"Table header text color\",\n                \"type\":\"string\",\n                \"default\": \"#ffffff\"\n            },\n            \"tableRowLineColor\":{\n                \"title\":\"Table row line color\",\n                \"type\":\"string\",\n                \"default\": \"#777\"\n            },\n            \"disabledPaginationColor\":{\n                \"title\":\"Disabled pagination color\",\n                \"type\":\"string\",\n                \"default\": \"#ededed42\"\n            },\n            \"enabledPaginationColor\":{\n                \"title\":\"Enabled pagination color\",\n                \"type\":\"string\",\n                \"default\": \"#000000\"\n            }\n        }\n    },\n    \"form\": [\n        \"url\",\n        \"dbName\",\n    {\n        \"key\":\"addBtnBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"addBtnTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"deployBtnBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"deployBtnTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderBgColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\":\"tableHeaderTxtColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\": \"tableRowLineColor\",\n        \"type\": \"color\"\n    },\n    {\n        \"key\":\"disabledPaginationColor\",\n        \"type\":\"color\"\n    },\n    {\n        \"key\": \"enabledPaginationColor\",\n        \"type\": \"color\"\n    }\n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"url\":\"http://150.150.50.241:3000/api\",\"dbName\":\"modbusgwopc\",\"addBtnBgColor\":\"#0069d9\",\"addBtnTxtColor\":\"#ffffff\",\"deployBtnBgColor\":\"#cc0000\",\"deployBtnTxtColor\":\"#ffffff\",\"tableHeaderBgColor\":\"#4c4c4c\",\"tableHeaderTxtColor\":\"#ffffff\",\"tableRowLineColor\":\"#777\",\"disabledPaginationColor\":\"#000000\",\"enabledPaginationColor\":\"#000000\"},\"title\":\"modbus module 2 (OPC)\"}"
      }
    }
  ]
}