{
  "widgetsBundle": {
    "alias": "a_action_widgets",
    "title": "A Action Widgets",
    "image": null,
    "description": null
  },
  "widgetTypes": [
    {
      "alias": "button_by_action_descriptors_static",
      "name": "Button By Action Descriptors - Static",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "static",
        "sizeX": 8.5,
        "sizeY": 2,
        "resources": [],
        "templateHtml": "<table style=\"height:100%; width:100%;border-spacing: 0!important;\">\r\n    <tr>\r\n        <td *ngFor=\"let actionDescriptor of actionDescriptors\">\r\n            <button mat-flat-button class=\"gbtn\" style=\"background-color:{{settings.btnBgColor}};color:{{settings.btnTxtColor}};\" (click)=\"dynamicButtonClick($event, actionDescriptor)\"><mat-icon *ngIf=\"settings.iconPosition=='Left'\">{{actionDescriptor.icon}}</mat-icon>{{actionDescriptor.name}}<mat-icon *ngIf=\"settings.iconPosition=='Right'\" style=\"margin-left:5px;\">{{actionDescriptor.icon}}</mat-icon></button>\r\n        </td>\r\n    </tr>\r\n</table>",
        "templateCss": ".gbtn{\n    width: 100%;\n    height: 100%;\n    cursor: pointer;\n    line-height: 100%!important;\n}\n\n.gbtn:hover{\n    opacity: 0.9;\n}\n",
        "controllerScript": "self.onInit = function() {\n    self.ctx.$scope.settings = self.ctx.settings;\n    \n    self.ctx.$scope.actionDescriptors = self.ctx.actionsApi.getActionDescriptors('dynamicButtonActions');\n    \n    self.ctx.$scope.dynamicButtonClick = function(event, actionDescriptor){\n        self.ctx.actionsApi.handleWidgetAction(event, actionDescriptor);\n    }\n}\n\nself.actionSources = function() {\n    return {\n        'dynamicButtonActions': {name: 'Dynamic Button Click',multiple: true}\n    };\n}\n ",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\"btnBgColor\",\"btnTxtColor\"],\n        \"properties\": {\n            \"btnBgColor\": {\n                \"title\": \"Button Background color\",\n                \"type\": \"string\",\n                \"default\": \"#505050\"\n            },\n            \"btnTxtColor\": {\n                \"title\": \"Button Text Color\",\n                \"type\": \"string\",\n                \"default\": \"#FFFFFF\"\n            },\n            \"iconPosition\": {\n                \"title\": \"Icon Position\",\n                \"type\": \"string\",\n                \"default\": \"Left\",\n                \"enum\": [\n                    \"Left\",\n                    \"Right\",\n                    \"None\"\n                ]\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\": \"btnBgColor\",\n            \"type\": \"color\"\n        },\n        {\n            \"key\": \"btnTxtColor\",\n            \"type\": \"color\"\n        },   \n        {\n            \"key\": \"iconPosition\",\n            \"type\": \"select\"\n        } \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"functionXX\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.23433878507658457,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0\",\"settings\":{\"btnBgColor\":\"#505050\",\"btnTxtColor\":\"#FFFFFF\",\"iconPosition\":\"Left\"},\"title\":\"Button By Action Descriptors - Static\",\"actions\":{\"selectionListItemClick\":[],\"dynamicButtonActions\":[{\"name\":\"My One\",\"icon\":\"insert_chart\",\"type\":\"custom\",\"customFunction\":\"console.log(\\\"working\\\");\",\"id\":\"f857ce37-90d1-da47-2b0c-86fc30246116\"},{\"name\":\"My Two\",\"icon\":\"refresh\",\"type\":\"custom\",\"customFunction\":\"console.log(\\\"working...\\\");\",\"id\":\"15a60f4c-50ec-b5f7-50ca-f450776f90eb\"}]},\"showTitleIcon\":false,\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"showLegend\":false,\"margin\":\"0\"}"
      }
    },
    {
      "alias": "selection_list_by_entity_alias",
      "name": "Selection List By Entity Alias",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 7,
        "sizeY": 2,
        "resources": [],
        "templateHtml": "<!--<mat-form-field appearance=\"fill\" style=\"width: 100%;\">-->\r\n<!--<mat-form-field appearance=\"outline\" style=\"width: 100%; margin-top:-20px;\">-->\r\n<mat-form-field class=\"containerSelectionFormField\">\r\n  <mat-label>{{selectOptionLabel}}</mat-label>\r\n  <mat-select>\r\n    <mat-option *ngFor=\"let entity of entityList\" [value]=entity (click)=\"selectionListItemClick($event, entity)\">{{entity.entityLabel || entity.entityName}}</mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n",
        "templateCss": ".containerSelectionFormField {\r\n    width: 100%;\r\n    position: absolute;\r\n    top: calc(50% + 10px);\r\n    left: 50%;\r\n    -moz-transform: translateX(-50%) translateY(-50%);\r\n    -webkit-transform: translateX(-50%) translateY(-50%);\r\n    transform: translateX(-50%) translateY(-50%);\r\n}\r\n\r\n.clrWhite{\r\n    color: white!important;\r\n}\r\n.clrBgWhite{\r\n    background: white!important;\r\n}",
        "controllerScript": "self.onInit = function() {\n    self.ctx.listUpdated = false;\n    self.ctx.darkModeDesign = function(){\n        if(self.ctx.settings.darkMode){\n            self.ctx.detectChanges();\n            $('.tb-default .mat-form-field-appearance-outline .mat-form-field-outline').addClass('clrWhite');\n            $('.tb-default .mat-form-field-label, .tb-default .mat-hint').addClass('clrWhite');\n            $('.tb-default .mat-form-field-underline').addClass('clrBgWhite');\n            $('.tb-default .mat-select-arrow').addClass('clrWhite');\n            $('.tb-default .mat-select-value').addClass('clrWhite');\n            $('input[type=\"time\"]').addClass('time-input-field');\n        }\n    }\n    self.ctx.findEntityList = function(data) {\n        //working for latest data\n        let newData = {};\n        let index = 0;\n        for(index = 0; index < data.length; index++) {\n            let iData = data[index];\n            if (iData && iData.data && iData.data.length > 0) {\n                let eid = iData.datasource.entityName;\n                if(typeof newData[eid] === 'undefined') newData[eid] = {};\n                newData[eid]['entityId'] = iData.datasource.entity.id;\n                newData[eid]['entityName'] = iData.datasource.entityName;\n                newData[eid]['entityLabel'] = iData.datasource.entityLabel;\n            }\n        }\n        return Object.keys(newData).map((key) => newData[key]);\n    }\n    self.ctx.$scope.selectOptionLabel = \"Select an option\";\n    actionDescriptors = self.ctx.actionsApi.getActionDescriptors('selectionListItemClick');\n    if(actionDescriptors.length > 0){\n        self.ctx.$scope.selectOptionLabel = actionDescriptors[0].name;\n    }\n    self.ctx.$scope.selectionListItemClick = function(event, entity){\n        if(actionDescriptors.length > 0){\n            self.ctx.actionsApi.handleWidgetAction(event, actionDescriptors[0], entity.entityId, entity.entityName);\n        } else {\n            console.log(\"Please create an action for selection list\");\n        }\n    }\n}\n\nself.onDataUpdated = function() {\n    if(!self.ctx.listUpdated){\n        let entityList = self.ctx.findEntityList(self.ctx.data);\n        \n        if(entityList.length > 0) {\n            self.ctx.$scope.entityList = entityList;\n            self.ctx.detectChanges();\n            self.ctx.listUpdated = true\n        }\n        self.ctx.darkModeDesign();\n    }\n}\n\n// self.onResize = function() {\n//     console.log('working');\n// }\n\n self.actionSources = function() {\n     return {\n         'selectionListItemClick': {name: 'Selection List Item Click',multiple: false}\n     };\n }\n \n",
        "settingsSchema": "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"required\": [\r\n        ],\r\n        \"properties\": {\r\n            \"darkMode\":{\r\n\r\n                \"title\":\"Enable dark mode\",\r\n                \"type\":\"boolean\"\r\n            }\r\n        }\r\n    },\r\n    \"form\": [\r\n        {\r\n            \"key\":\"darkMode\",\r\n            \"type\":\"checkbox\"\r\n        }\r\n        ]\r\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"functionXX\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.23433878507658457,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#111111\",\"color\":\"rgba(255,255,255,0.87)\",\"padding\":\"0 15px;\",\"settings\":{\"darkMode\":true},\"title\":\"Selection List By Entity Alias\",\"actions\":{\"selectionListItemClick\":[{\"name\":\"Select an option from here\",\"icon\":\"more_horiz\",\"type\":\"custom\",\"customFunction\":\"console.log(\\\"working....\\\");\",\"id\":\"17bf80cc-eaf7-a7a5-9e2f-0d0004e654de\"}]},\"showTitleIcon\":false,\"iconColor\":\"rgba(211,211,211,0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"showLegend\":false,\"margin\":\"0\"}"
      }
    },
    {
      "alias": "button_by_action_descriptors_single_entity",
      "name": "Button By Action Descriptors - Single Entity",
      "image": null,
      "description": null,
      "descriptor": {
        "type": "latest",
        "sizeX": 8.5,
        "sizeY": 2,
        "resources": [],
        "templateHtml": "<table style=\"height:100%; width:100%;border-spacing: 0!important;\">\r\n    <tr>\r\n        <td *ngFor=\"let actionDescriptor of actionDescriptors\">\r\n            <button mat-flat-button class=\"gbtn\" style=\"background-color:{{settings.btnBgColor}};color:{{settings.btnTxtColor}};\" (click)=\"dynamicButtonClick($event, actionDescriptor)\"><mat-icon *ngIf=\"settings.iconPosition=='Left'\">{{actionDescriptor.icon}}</mat-icon>{{actionDescriptor.name}}<mat-icon *ngIf=\"settings.iconPosition=='Right'\" style=\"margin-left:5px;\">{{actionDescriptor.icon}}</mat-icon></button>\r\n        </td>\r\n    </tr>\r\n</table>",
        "templateCss": ".gbtn{\n    width: 100%;\n    height: 100%;\n    cursor: pointer;\n    line-height: 100%!important;\n}\n\n.gbtn:hover{\n    opacity: 0.9;\n}\n",
        "controllerScript": "self.onInit = function() {\n    self.ctx.dataUpdated = false;\n    self.ctx.$scope.settings = self.ctx.settings;\n    \n    self.ctx.$scope.actionDescriptors = self.ctx.actionsApi.getActionDescriptors('dynamicButtonActions');\n    \n    self.ctx.$scope.dynamicButtonClick = function(event, actionDescriptor){\n        if(self.ctx.dataUpdated){\n            self.ctx.actionsApi.handleWidgetAction(event, actionDescriptor, self.ctx.entityInfo.entityId, self.ctx.entityInfo.entityName);\n        } else {\n            console.log('Entity has not been updated yet');\n        }\n    }\n}\n\nself.onDataUpdated = function() {\n    if (!self.ctx.dataUpdated) {\n        if(self.ctx.data && self.ctx.data.length > 0){\n            self.ctx.entityInfo = {\n                entityId: self.ctx.data[0].datasource.entity.id,\n                entityName: self.ctx.data[0].datasource.entityName\n            }\n            self.ctx.dataUpdated = true;\n        }\n        \n    }\n}\n\nself.actionSources = function() {\n    return {\n        'dynamicButtonActions': {name: 'Dynamic Button Click',multiple: true}\n    };\n}\n\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        singleEntity: true\n    };\n};",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\"btnBgColor\",\"btnTxtColor\"],\n        \"properties\": {\n            \"btnBgColor\": {\n                \"title\": \"Button Background color\",\n                \"type\": \"string\",\n                \"default\": \"#505050\"\n            },\n            \"btnTxtColor\": {\n                \"title\": \"Button Text Color\",\n                \"type\": \"string\",\n                \"default\": \"#FFFFFF\"\n            },\n            \"iconPosition\": {\n                \"title\": \"Icon Position\",\n                \"type\": \"string\",\n                \"default\": \"Left\",\n                \"enum\": [\n                    \"Left\",\n                    \"Right\",\n                    \"None\"\n                ]\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\": \"btnBgColor\",\n            \"type\": \"color\"\n        },\n        {\n            \"key\": \"btnTxtColor\",\n            \"type\": \"color\"\n        },   \n        {\n            \"key\": \"iconPosition\",\n            \"type\": \"select\"\n        } \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"functionXX\",\"entityAliasId\":null,\"filterId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.23433878507658457,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0\",\"settings\":{\"btnBgColor\":\"#505050\",\"btnTxtColor\":\"#FFFFFF\",\"iconPosition\":\"Left\"},\"title\":\"Button By Action Descriptors - Single Entity\",\"actions\":{\"selectionListItemClick\":[],\"dynamicButtonActions\":[{\"name\":\"My One\",\"icon\":\"insert_chart\",\"type\":\"custom\",\"customFunction\":\"console.log(\\\"working\\\");\",\"id\":\"f857ce37-90d1-da47-2b0c-86fc30246116\"},{\"name\":\"My Two\",\"icon\":\"refresh\",\"type\":\"custom\",\"customFunction\":\"console.log(\\\"working...\\\");\",\"id\":\"15a60f4c-50ec-b5f7-50ca-f450776f90eb\"}]},\"showTitleIcon\":false,\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":false,\"enableFullscreen\":false,\"widgetStyle\":{\"cursor\":\"default\"},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"showLegend\":false,\"margin\":\"0\"}"
      }
    }
  ]
}